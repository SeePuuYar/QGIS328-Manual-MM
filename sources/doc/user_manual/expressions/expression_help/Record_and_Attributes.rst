:orphan:

.. DO NOT EDIT THIS FILE DIRECTLY. It is generated automatically by
   populate_expressions_list.py in the scripts folder.
   Changes should be made in the function help files
   in the resources/function_help/json/ folder in the
   qgis/QGIS repository.

.. _expression_function_Record_and_Attributes_attribute:

attribute
..........

Feature တစ်ခုမှ အချက်အလက် (attribute) တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

**Variant 1** **(မူကွဲ 1)**

လက်ရှိ feature မှ attribute တစ်ခု၏ တန်ဖိုးကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - attribute(attribute_name)
   * - Argument များ
     - * **attribute_name** - ပြန်ထုတ်ပေးမည့် attribute ၏ အမည်
   * - ဥပမာများ
     - * ``attribute( 'name' )`` → လက်ရှိ feature အတွက် 'name' attribute တွင် သိမ်းဆည်းထားသည့်တန်ဖိုး

**Variant 2** **(မူကွဲ 2)**

သတ်မှတ်မည့် target (ရည်ရွယ်သည့်) feature နှင့် attribute အမည် ကို ခွင့်ပြုပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - attribute(feature, attribute_name)
   * - Argument များ
     - * **feature** - feature တစ်ခု
       * **attribute_name** - ပြန်ထုတ်ပေးမည့် attribute ၏ အမည်
   * - ဥပမာများ
     - * ``attribute( @atlas_feature, 'name' )`` → လက်ရှိ atlas feature အတွက် 'name' attribute တွင် သိမ်းဆည်းထားသည့်တန်ဖိုး


.. end_attribute_section

.. _expression_function_Record_and_Attributes_attributes:

attributes
...........

Field အမည်များသည် map key များအဖြစ်ပါဝင်သည့် feature တစ်ခုမှ attribute အားလုံးပါဝင်သော map (ပုံဖော်ချက်) တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

**Variant 1** **(မူကွဲ 1)**

လက်ရှိ feature မှ attribute များအားလုံး၏ map တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - attributes()
   * - ဥပမာများ
     - * ``attributes()['name']`` → လက်ရှိ feature အတွက် 'name' attribute တွင် သိမ်းဆည်းထားသည့်တန်ဖိုး


**Variant 2** **(မူကွဲ 2)**

သတ်မှတ်မည့် target (ရည်ရွယ်သည့်) feature ကို ခွင့်ပြုပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - attributes(feature)
   * - Argument များ
     - * **feature** - feature တစ်ခု
   * - ဥပမာများ
     - * ``attributes( @atlas_feature )['name']`` → လက်ရှိ atlas feature အတွက် 'name' attribute တွင် သိမ်းဆည်းထားသည့်တန်ဖိုး

.. end_attributes_section

.. _expression_function_Record_and_Attributes_$currentfeature:

$currentfeature
................

အကဲဖြတ်သုံးသပ်ခြင်း (evaluate) ပြုလုပ်ခံထားရသည့် လက်ရှိ feature ကို ပြန်ထုတ်ပေးပါသည်။ ၎င်းကို လက်ရှိ feature မှ attribute တန်ဖိုးများကို သုံးသပ်ခြင်းပြုလုပ်ရန်အတွက် 'attribute' function  နှင့်အတူ အသုံးပြုနိုင်ပါသည်။ **သတိပေးချက် - ဤလုပ်ဆောင်ချက်သည် အပြစ်အနာအဆာ ရှိနေပါသည်။ ၎င်းအစား @feature variable ကို အစားထိုး အသုံးပြုရန် အကြံပြုအပ်ပါသည်။**

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $currentfeature
   * - ဥပမာများ
     - * ``attribute( $currentfeature, 'name' )`` → လက်ရှိ feature အတွက် 'name' attribute တွင် သိမ်းဆည်းထားသည့်တန်ဖိုး


.. end_$currentfeature_section

.. _expression_function_Record_and_Attributes_display_expression:

display_expression
...................

Layer တစ်ခုထဲရှိ ပေးထားသည့် feature တစ်ခုအတွက် ပြသမှုဆိုင်ရာခိုင်းစေချက် (display expression) တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ Expression ကို default အားဖြင့် အကဲဖြတ်သုံးသပ်ပါသည်။ သုည၊ တစ်ခု သို့မဟုတ် တစ်ခုထက်ပိုသော argument များနှင့်အတူ အသုံးပြုနိုင်ပါသည်။ အသေးစိတ်ကို အောက်တွင်ကြည့်ပါ။ 

**No parameters** **(သတ်မှတ်ချက်များမရှိပါ)**

အကယ်၍ သတ်မှတ်ချက်များမရှိ (no parameters) ပါက function သည် လက်ရှိ layer ထဲရှိ လက်ရှိ feature ၏ display expression ကို အကဲဖြတ်သုံးသပ်မည် (evaluate) ဖြစ်ပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - display_expression()
   * - ဥပမာများ
     - * ``display_expression()`` → လက်ရှိ layer ထဲရှိ လက်ရှိ feature ၏ display expression


**One 'feature' parameter** **('feature' သတ်မှတ်ချက်တစ်ခု)**

အကယ်၍ 'feature' သတ်မှတ်ချက်တစ်ခုတည်းသာ ဖြစ်ပါက function သည် လက်ရှိ layer မှ သတ်မှတ်ထားသည့် feature ကို အကဲဖြတ်သုံးသပ်မည် (evaluate) ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - display_expression(feature)
   * - Argument များ
     - * **feature** - အကဲဖြတ်သုံးသပ်ခြင်းပြုလုပ်သင့်သည့် feature
   * - ဥပမာများ
     - * ``display_expression(@atlas_feature)`` → လက်ရှိ atlas feature ၏ display expression


**Layer and feature parameters ** **(Layer နှင့် feature သတ်မှတ်ချက်များ)**

အကယ်၍ လုပ်ဆောင်ချက်သည် Layer နှင့် လက္ခဏာအမှတ်အသား နှစ်ခုလုံးဖြစ်ပါက ၎င်းသည် သတ်မှတ်ထားသည့် layer မှ သတ်မှတ်ထားသည့် လက္ခဏာအမှတ်အသားကို သုံးသပ်ခြင်းပြုလုပ်မည်ဖြစ်ပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - display_expression(layer, feature, [evaluate=true])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်ပါသည်
   * - Argument များ
     - * **layer** - layer (သို့မဟုတ် ၎င်း၏ ID သို့မဟုတ် အမည်)
       * **feature** - အကဲဖြတ်သုံးသပ်ခြင်းပြုလုပ်သင့်သည့် feature
       * **evaluate** - True ဖြစ်လျှင် expression ကို အကဲဖြတ်သုံးသပ်ရမည်ဖြစ်သည်။ အကယ်၍ false ဖြစ်ပါက expression သည် string literal (string literal တွင် character များ၏ sequence တစ်ခု သို့မဟုတ် ( " " ) ထဲတွင် ထည့်သွင်းထားသည့် escape sequence များပါရှိပါသည်) တစ်ခုအဖြစ်သာ ပြန်လည်ရရှိမည်ဖြစ်ပါသည်။ (၎င်းသည် 'eval' function ကို အသုံးပြု၍ နောက်ပိုင်းတွင် အကဲဖြတ်သုံးသပ်ခံရရန် ဖြစ်နိုင်ချေရှိသည်)
   * - ဥပမာများ
     - * ``display_expression( 'streets', get_feature_by_id('streets', 1))`` → 'streets' layer အပေါ်ရှိ ID 1 ဖြစ်သည့် feature ၏ display expression
       * ``display_expression('a_layer_id', @feature, 'False')`` → အကဲဖြတ်သုံးသပ်ခြင်း မပြုလုပ်ထားသော ပေးထားသည့် feature ၏ display expression


.. end_display_expression_section

.. _expression_function_Record_and_Attributes_feature_id:

feature_id
...........

Feature ၏ သိသာထင်ရှားသည့် ID တစ်ခုကို ပြန်ထုတ်ပေးပါသည် သို့မဟုတ် အကယ်၍ feature သည် valid(ကျိုးကြောင်းဆီလျော်မှု) မဖြစ်ပါက NULL ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - feature_id(feature)
   * - Argument များ
     - * **feature** - feature object တစ်ခု
   * - ဥပမာများ
     - * ``feature_id( @feature )`` → လက်ရှိ feature ၏ ID


.. end_feature_id_section

.. _expression_function_Record_and_Attributes_get_feature:

get_feature
............

ပေးထားသည့် attribute တန်ဖိုးတစ်ခုနှင့် ကိုက်ညီသော layer တစ်ခု၏ ပထမဆုံး feature ကို ပြန်ထုတ်ပေးပါသည်။

**Single value variant** **(တစ်ခုတည်းသောတန်ဖိုးမူကွဲ)**

Layer ID နှင့်အတူ column တစ်ခုနှင့် တန်ဖိုးတစ်ခုတို့ကို သတ်မှတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - get_feature(layer, attribute, value)
   * - Argument များ
     - * **layer** - layer အမည် သို့မဟုတ် ID
       * **attribute** - ကိုက်ညီမှုအတွက်အသုံးပြုရန် attribute အမည် 
       * **value** - ကိုက်ညီမှုအတွက်အသုံးပြုရန် attribute တန်ဖိုး
   * - ဥပမာများ
     - * ``get_feature('streets','name','main st')`` → "name" field တွင် "main st" တန်ဖိုးနှင့်အတူ "streets" layer ထဲတွင် တွေ့ရှိသည့် ပထမဆုံး feature


**Map variant** **(ပုံဖော်ချက်မူကွဲ)**

Layer ID နှင့်အတူ အသုံးပြုမည့် column (key) များနှင့် ၎င်းတို့၏ သက်ဆိုင်ရာတန်ဖိုးများ ပါဝင်သော map တစ်ခု။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - get_feature(layer, attribute)
   * - Argument များ
     - * **layer** - layer အမည် သို့မဟုတ် ID
       * **attribute** - အသုံးပြုရန် column နှင့် တန်ဖိုးအတွဲများ (value pairs) ပါဝင်သည့် map
   * - ဥပမာများ
     - * ``get_feature('streets',map('name','main st','lane_num','4'))`` → "name" field ထဲရှိ "main st" တန်ဖိုးနှင့် "lane_num" field ထဲရှိ "4" တန်ဖိုးပါဝင်သော "streets" layer ထဲတွင် တွေ့ရှိသည့် ပထမဆုံး feature


.. end_get_feature_section

.. _expression_function_Record_and_Attributes_get_feature_by_id:

get_feature_by_id
..................

Layer တစ်ခုအပေါ်တွင် id တစ်ခုပါရှိသည့် feature ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - get_feature_by_id(layer, feature_id)
   * - Argument များ
     - * **layer** - layer ၊ layer အမည် သို့မဟုတ် layer id
       * **feature_id** - ပြန်လည်ရရှိသင့်သည့် feature ၏ id
   * - ဥပမာများ
     - * ``get_feature_by_id('streets', 1)`` → "streets" layer အပေါ်ရှိ id 1 ပါရှိသည့် feature


.. end_get_feature_by_id_section

.. _expression_function_Record_and_Attributes_$id:

$id
....

လက်ရှိ ဇယားတန်း (row) ၏ feature id ကို ပြန်ထုတ်ပေးပါသည်။ **သတိပေးချက် - ဤလုပ်ဆောင်ချက်သည် အပြစ်အနာအဆာပါဝင်နေပါသည်။ ၎င်းအစား @id variable ကို အစားထိုး အသုံးပြုရန် အကြံပြုအပ်ပါသည်။**

.. list-table::
   :widths: 15 85

   * - Syntax
     - $id
   * - ဥပမာများ
     - * ``$id`` → 42


.. end_$id_section

.. _expression_function_Record_and_Attributes_is_attribute_valid:

is_attribute_valid
...................

အကယ်၍ သီးခြား feature attribute တစ်ခုသည် ကန့်သတ်ချက် (constraints) များအားလုံးနှင့် ကိုက်ညီပါက TRUE ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_attribute_valid(attribute, [feature], [layer], [strength])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်ပါသည်
   * - Argument များ
     - * **attribute** - attribute အမည်တစ်ခု
       * **feature** - feature တစ်ခု။ အကယ်၍ သတ်မှတ်မထားပါက လက်ရှိ feature ကို အသုံးပြုလိမ့်မည်ဖြစ်သည်။
       * **layer** - vector layer တစ်ခု။ အကယ်၍ သတ်မှတ်မထားပါက လက်ရှိ layer ကို အသုံးပြုလိမ့်မည်ဖြစ်သည်။ 
       * **strength** - သတ်မှတ်ထားသည့် ကန့်သတ်ချက်အမျိုးအစား (constraint type) သို့ လျှော့ချနိုင် (narrow down) စေရန် 'hard' သို့မဟုတ် 'soft' သို့ သတ်မှတ်ပါ။ အကယ်၍ သတ်မှတ်မထားပါက function သည် hard သို့မဟုတ် soft ကန့်သတ်ချက် တစ်ခုမဟုတ်တစ်ခု မအောင်မြင်ပါက FALSE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။ 
   * - ဥပမာများ
     - * ``is_attribute_valid('HECTARES')`` → အကယ်၍ "HECTARES" field ထဲရှိ လက်ရှိ feature ၏ တန်ဖိုးသည် ကန့်သတ်ချက်များအားလုံးကို ကိုက်ညီပါက TRUE ကို ပြန်ထုတ်ပေးပါမည်။
       * ``is_attribute_valid('HOUSES',get_feature('my_layer', 'FID', 10), 'my_layer')`` → အကယ်၍ 'my_layer' ထဲရှိ "FID"=10 ရှိသည့် feature မှ "HOUSES" field ထဲရှိ တန်ဖိုးသည် ကန့်သတ်ချက်များအားလုံးနှင့် မကိုက်ညီပါက FALSE ကိုပြန်ထုတ်ပေးပါမည်။


.. end_is_attribute_valid_section

.. _expression_function_Record_and_Attributes_is_feature_valid:

is_feature_valid
.................

အကယ်၍ feature တစ်ခုသည် field constraints (ကန့်သတ်ချက်များ) အားလုံးနှင့် ကိုက်ညီပါက TRUE ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_feature_valid([feature], [layer], [strength])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်ပါသည်
   * - Argument များ
     - * **feature** - feature တစ်ခု။ အကယ်၍ သတ်မှတ်မထားပါက လက်ရှိ feature ကို အသုံးပြုလိမ့်မည်ဖြစ်သည်။
       * **layer** - vector layer တစ်ခု။ အကယ်၍ သတ်မှတ်မထားပါက လက်ရှိ layer ကို အသုံးပြုလိမ့်မည်ဖြစ်သည်။ 
       * **strength** - သတ်မှတ်ထားသည့် ကန့်သတ်ချက်အမျိုးအစား (constraint type) သို့ လျှော့ချနိုင် (narrow down) စေရန် 'hard' သို့မဟုတ် 'soft' သို့ သတ်မှတ်ပါ။ အကယ်၍ သတ်မှတ်မထားပါက function သည် hard သို့မဟုတ် soft ကန့်သတ်ချက် တစ်ခုမဟုတ်တစ်ခု မအောင်မြင်ပါက FALSE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။ 
   * - ဥပမာများ
     - * ``is_feature_valid(strength:='hard')`` → အကယ်၍ လက်ရှိ feature ၏ field များအားလုံးသည် ၎င်းတို့၏ hard constraints များနှင့် ကိုက်ညီပါက TRUE ကို ပြန်ထုတ်ပေးပါမည်။
       * ``is_feature_valid(get_feature('my_layer', 'FID', 10), 'my_layer')`` → အကယ်၍ 'my_layer' ထဲရှိ "FID"=10 ရှိသည့် feature မှ field များအားလုံးသည် ကန့်သတ်ချက်များအားလုံးနှင့် မကိုက်ညီပါက FALSE ကိုပြန်ထုတ်ပေးပါမည်။


.. end_is_feature_valid_section

.. _expression_function_Record_and_Attributes_is_selected:

is_selected
............

အကယ်၍ feature တစ်ခုသည် ရွေးချယ်ခြင်းခံရ (selected) ပါက TRUE ကို ပြန်ထုတ်ပေးပါသည်။ Argument မပါရှိသော၊ argument တစ်ခု သို့မဟုတ် နှစ်ခုနှင့်အတူ အသုံးပြုနိုင်ပါသည်။ အသေးစိတ်ကို အောက်တွင်ကြည့်ပါ။

**No parameters** **(သတ်မှတ်ချက်များမရှိပါ)**

အကယ်၍ parameter များမရှိပါက လက်ရှိ layer ထဲရှိ လက်ရှိ feature သည် ရွေးချယ်ခြင်းခံရ (selected) ပါက function သည် TRUE ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_selected()
   * - ဥပမာများ
     - * ``is_selected()`` → လက်ရှိ layer ထဲရှိ လက်ရှိ feature အနေဖြင့် ရွေးချယ်ခံရ (selected) ပါက TRUE ကို ပြန်ထုတ်ပေးပါမည်။


**One 'feature' parameter** **('feature' သတ်မှတ်ချက်တစ်ခု)**

အကယ်၍ 'feature' သတ်မှတ်ချက် တစ်ခုတည်းသာဖြစ်ပါက လက်ရှိ layer မှ သတ်မှတ်ထားသည့် feature သည် ရွေးချယ်ခံရပါက TRUE ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_selected(feature)
   * - Argument များ
     - * **feature** - ရွေးချယ်မှုအတွက် စစ်ဆေးမှုပြုလုပ်သင့်သည့် feature
   * - ဥပမာများ
     - * ``is_selected(@atlas_feature)`` → အကယ်၍ လက်ရှိ atlas feature ကို ရွေးချယ်ထားပါက TRUE ကိုပြန်ထုတ်ပေးပါမည်။
       * ``is_selected(get_feature('streets', 'name', 'Main St.'))`` → အသက်ဝင်နေသည့် (active) "streets" layer ပေါ်ရှိ "Main St." ဆိုသည့် သိသာထင်ရှားသောအရာကို ရွေးချယ်ထားပါက TRUE ကို ပြန်ထုတ်ပေးပါမည်။
       * ``is_selected(get_feature_by_id('streets', 1))`` → အသက်ဝင်နေသည့် (active) "streets" layer ပေါ်ရှိ id 1 ရှိသည့် feature ကို ရွေးချယ်ထားပါက TRUE ကို ပြန်ထုတ်ပေးပါမည်။


**Two parameters** **(သတ်မှတ်ချက်နှစ်ခု)**

အကယ်၍ function ကို layer နှင့် feature နှစ်ခုလုံးဖြင့် သတ်မှတ်ခိုင်းစေဆောင်ရွက်ပါက သတ်မှတ်ထားသည့် layer မှ သတ်မှတ်ထားသော feature သည် ရွေးချယ်ခံထားရပါက TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_selected(layer, feature)
   * - Argument များ
     - * **layer** - ရွေးချယ်မှုအတွက် စစ်ဆေးခြင်းပြုလုပ်သင့်သည့် layer (၎င်း၏ ID သို့မဟုတ် အမည်)
       * **feature** - ရွေးချယ်မှုအတွက် စစ်ဆေးမှုပြုလုပ်သင့်သည့် feature
   * - ဥပမာများ
     - * ``is_selected( 'streets', get_feature('streets', 'name', "street_name"))`` → လက်ရှိ အဆောက်အဦး၏ လမ်းသည် ရွေးချယ်ခြင်းခံထားရပါက TRUE ကို ပြန်ထုတ်ပေးပါမည် (building layer တွင် 'street_name' ဟုခေါ်သော field တစ်ခုနှင့် 'streets' layer တွင် သိသာထင်ရှားသောတန်ဖိုးများပါရှိသည့် 'name' ဟုခေါ်သော field တစ်ခုပါရှိသည်ဟု ယူဆခြင်းအားဖြင့်)။
       * ``is_selected( 'streets', get_feature_by_id('streets', 1))`` → "streets" layer ပေါ်ရှိ id 1 ရှိသည့် feature သည် ရွေးချယ်ခြင်းခံထားရပါက TRUE ကို ပြန်ထုတ်ပေးပါမည်။

.. end_is_selected_section

.. _expression_function_Record_and_Attributes_maptip:

maptip
.......

Layer တစ်ခုထဲရှိ ပေးထားသည့် feature တစ်ခုအတွက် maptip (MapTips သည် feature ၊ surface သို့မဟုတ် raster image ပေါ်တွင် pointer ကို နေရာချသည့်အခါတွင် အချက်အလက် သို့မဟုတ် ပြသမှုဆိုင်ရာဖော်ပြချက်စသော အချက်အလက်များကို ပံ့ပိုးပေးပါသည်) ကို ပြန်ထုတ်ပေးပါသည်။ Expression ကို default အားဖြင့် အကဲဖြတ်သုံးသပ်မည်ဖြစ်ပါသည်။ Argument မပါရှိသော၊ တစ်ခု သို့မဟုတ် တစ်ခုထက်ပိုသော argument များနှင့်အတူအသုံးပြုနိုင်ပါသည်။ အသေးစိတ်ကို အောက်တွင် ကြည့်ရှုပါ။

**No parameters** **(သတ်မှတ်ချက်များမရှိပါ)**

အကယ်၍ သတ်မှတ်ချက်များမပါရှိပဲ သတ်မှတ်ခိုင်းစေဆောင်ရွက်ပါက function သည် လက်ရှိ layer ထဲရှိ လက်ရှိ feature ၏ maptip ကို အကဲဖြတ်သုံးသပ်မည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - maptip()
   * - ဥပမာများ
     - * ``maptip()`` → လက်ရှိ layer ထဲရှိ လက်ရှိ feature ၏ maptip


**One 'feature' parameter** **('feature' သတ်မှတ်ချက်တစ်ခု)**

အကယ်၍ 'feature' သတ်မှတ်ချက် တစ်ခုတည်းသာ ဖြစ်ပါက function သည် လက်ရှိ layer မှ သတ်မှတ်ထားသည့် feature ကို အကဲဖြတ်သုံးသပ်မည်ဖြစ်ပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - maptip(feature)
   * - Argument များ
     - * **feature** - သုံးသပ်ခြင်းပြုလုပ်သင့်သည့် feature
   * - ဥပမာမာျး
     - * ``maptip(@atlas_feature)`` → လက်ရှိ atlas feature ၏ maptip


**Layer and feature parameters** **(Layerနှင့် feature သတ်မှတ်ချက်များ)**

အကယ်၍ function ကို layer နှင့် feature နှစ်ခုလုံးဖြင့် သတ်မှတ်ခိုင်းစေဆောင်ရွက်ပါက ၎င်းသည် သတ်မှတ်ထားသော layer မှ သတ်မှတ်ထားသော feature ကို အကဲဖြတ်သုံးသပ်မည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - maptip(layer, feature, [evaluate=true])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်ပါသည်
   * - Argument များ
     - * **layer** - layer (၎င်း၏ ID သို့မဟုတ် အမည်)
       * **feature** - သုံးသပ်ခြင်းပြုလုပ်သင့်သည့် feature
       * **evaluate** - True ဖြစ်လျှင် expression ကို အကဲဖြတ်သုံးသပ်ရမည်ဖြစ်သည်။ အကယ်၍ false ဖြစ်ပါက expression သည် string literal အဖြစ်သာ ပြန်လည်ရရှိမည်ဖြစ်ပါသည် (၎င်းသည် 'eval_template' function ကို အသုံးပြု၍ နောက်ပိုင်းတွင် အကဲဖြတ်သုံးသပ်ခံရရန် ဖြစ်နိုင်ချေရှိသည်)။
   * - ဥပမာများ
     - * ``maptip('streets', get_feature_by_id('streets', 1))`` → "streets" layer ပေါ်ရှိ id 1 ရှိသည့် feature ၏ maptip
       * ``maptip('a_layer_id', @feature, 'False')`` → သုံးသပ်ခြင်းမပြုလုပ်ထားသော ပေးထားသည့် feature ၏ maptip

.. end_maptip_section

.. _expression_function_Record_and_Attributes_num_selected:

num_selected
.............

ပေးထားသည့် layer တစ်ခုအပေါ်တွင် ရွေးချယ်မှုပြုလုပ်ထားသော feature အရေအတွက်ကို ပြန်ထုတ်ပေးပါသည်။ Default အားဖြင့် expression ကို အကဲဖြတ်သုံးသပ်သည့် layer အပေါ်တွင် အလုပ်လုပ်ဆောင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - num_selected([layer=current layer])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်ပါသည်
   * - Argument များ
     - * **layer** - ရွေးချယ်မှုကို စစ်ဆေးမည့် layer (သို့မဟုတ် ၎င်း၏ ID သို့မဟုတ် အမည်)
   * - ဥပမာများ
     - * ``num_selected()`` → လက်ရှိ layer ပေါ်ရှိ ရွေးချယ်ခံထားရသည့် feature အရေအတွက်
       * ``num_selected('streets')`` → streets layer ပေါ်ရှိ ရွေးချယ်ခံထားရသည့် feature အရေအတွက်


.. end_num_selected_section

.. _expression_function_Record_and_Attributes_represent_attributes:

represent_attributes
.....................

Attribute အမည်များကို key များအဖြစ်နှင့် သတ်မှတ်ပြင်ဆင်ထားသော ကိုယ်စားပြုတန်ဖိုးများကို တန်ဖိုးများအဖြစ် ပါရှိသည့် map တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ Attribute များအတွက် ကိုယ်စားပြုတန်ဖိုးများသည် attribute တစ်ခုချင်းစီအတွက် စီစဉ်သတ်မှတ်ထားသည့် widget အမျိုးအစားအပေါ်တွင် မူတည်ပါသည်။ Argument မပါရှိသော၊ တစ်ခု သို့မဟုတ် တစ်ခုထက်ပိုသော argument များနှင့်အတူ အသုံးပြုနိုင်ပါသည်။ အသေးစိတ်ကို အောက်တွင်ကြည့်ရှုပါ။

**No parameters** **(သတ်မှတ်ချက်များမရှိပါ)**

အကယ်၍ သတ်မှတ်ချက်များမရှိပါ ဖြစ်ပါက function သည် လက်ရှိ layer ထဲရှိ လက်ရှိ feature ၏ 
attribute များ၏ ကိုယ်စားပြုဖော်ပြမှုကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - represent_attributes()
   * - ဥပမာများ
     - * ``represent_attributes()`` → လက်ရှိ feature အတွက် attribute များ၏ ကိုယ်စားပြုဖော်ပြမှု


**One 'feature' parameter** **('feature' သတ်မှတ်ချက်တစ်ခု)**

အကယ်၍ 'feature' သတ်မှတ်ချက်တစ်ခုတည်းသာ ဖြစ်ပါက function သည် လက်ရှိ layer မှ သတ်မှတ်ထားသည့် feature ၏ attribute များကို ကိုယ်စားပြုဖော်ပြမှုအား ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - display_expression(feature)
   * - Argument များ
     - * **feature** - အကဲဖြတ်သုံးသပ်ခြင်းပြုလုပ်သင့်သည့် feature
   * - ဥပမာများ
     - * ``represent_attributes(@atlas_feature)`` → လက်ရှိ layer ထဲမှ သတ်မှတ်ထားသည့် feature အတွက် attribute များ၏ ကိုယ်စားပြုဖော်ပြမှု


**Layer and feature parameters** **(Layer နှင့် feature သတ်မှတ်ချက်များ)**

အကယ်၍ 'layer' နှင့် 'feature' သတ်မှတ်ချက် ဖြစ်ပါက function သည် သတ်မှတ်ထားသည့် layer မှ သတ်မှတ်ထားသော feature ၏ attribute များ၏ ကိုယ်စားပြုဖော်ပြမှုကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - represent_attributes(layer, feature)
   * - Argument များ
     - * **layer** - layer (သို့မဟုတ် ၎င်း၏ ID သို့မဟုတ် အမည်)
       * **feature** - အကဲဖြတ်သုံးသပ်ခြင်းပြုလုပ်သင့်သည့် feature
   * - ဥပမာများ
     - * ``represent_attributes('atlas_layer', @atlas_feature)`` → သတ်မှတ်ထားသည့် layer မှ သတ်မှတ်ထားသော feature အတွက် attribute များ၏ ကိုယ်စားပြုဖော်ပြမှု 


.. end_represent_attributes_section

.. _expression_function_Record_and_Attributes_represent_value:

represent_value
................

Field တန်ဖိုးတစ်ခုအတွက် စီစဉ်သတ်မှတ်ထားသော (configured) ကိုယ်စားပြုတန်ဖိုးကို ပြန်ထုတ်ပေးပါသည်။ ၎င်းသည် စီစဉ်သတ်မှတ်ထားသော (configured) widget အမျိုးအစားပေါ်တွင် မူတည်ပါသည်။ တစ်ခါတစ်ရံ ၎င်းသည် 'Value Map' widget များအတွက် အသုံးဝင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - represent_value(value, [fieldName])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်ပါသည်
   * - Argument များ
     - * **value** - ဖြေရှင်း (resolve) သင့်သည့် တန်ဖိုး။ များသောအားဖြင့် field တစ်ခုနှင့်အလားတူပါသည်။
       * **fieldName** - မည်သည့် widget configuration ကို ထည့်သွင်းသင့်သည်အတွက် field အမည်။
   * - ဥပမာများ
     - * ``represent_value("field_with_value_map")`` → တန်ဖိုးအတွက် ကျိုးကြောင်းဖော်ပြချက်
       * ``represent_value('static value', 'field_name')`` → static value (တစ်သမတ်တည်းတန်ဖိုး) အတွက် ကျိုးကြောင်းဖော်ပြချက်


.. end_represent_value_section

.. _expression_function_Record_and_Attributes_sqlite_fetch_and_increment:

sqlite_fetch_and_increment
...........................

sqlite database များထဲတွင် အလိုအလျောက်တိုးပွားလာသည့်တန်ဖိုးများ (autoincrementing values) ကို စီမံခန့်ခွဲပါသည်။

SQlite default တန်ဖိုးများကို insert (ထည့်သွင်းမှု) အပေါ်တွင်သာ အသုံးပြုနိုင်ပြီး ကြိုတင်ကူးပြောင်းခြင်း (prefetched) မပြုလုပ်နိုင်ပါ။

၎င်းသည် database ထဲတွင် row များကို မဖန်တီးခင်တွင် AUTO_INCREMENT (အလိုအလျောက်တိုးပွားလာမှု) မှတဆင့် တိုးပွားလာသည့် (incremented) primary key တစ်ခုကို ရယူနိုင်ခြင်း မရှိအောင် ပြုလုပ်ပါသည်။ မှတ်စု- postgres ဖြင့် ၎င်းသည် *evaluate default values* မှတစ်ဆင့် အလုပ်လုပ်ဆောင်ပါသည်။

Feature အသစ်များကို Relation (ဆက်နွယ်မှု) များနှင့်အတူ ထည့်သွင်းသည့်အခါတွင် parents form(ပုံစံ) ပွင့်နေစဉ်အတွင်း parent feature သည် အပြီးသတ်လုပ်ဆောင်နိုင်ခြင်း (uncommitted) မရှိသေးသဖြင့် parent (ပင်မဇယားရှိ primary key သို့မဟုတ် unique key တစ်ခုကို သိမ်းဆည်းထားသည့် ဇယား) တစ်ခုအတွက် children (foreign key တစ်ခုဖြင့် parent ကို ညွှန်းဆိုသည့် မည်သည့်ဇယားမဆို) များကို ကြိုတင်ထည့်သွင်းထားခြင်းသည် အလွန်ကောင်းမွန်ပါသည်။ 

ဤကန့်သတ်ချက်ကို ကျော်လွှားနိုင်ရန် ဤ function ကို gpkg ကဲ့သို့သော sqlite အခြေပြု format များပေါ်တွင် သီးခြားဇယားတစ်ခုဖြင့် sequence တန်ဖိုးများ ကို စီမံခန့်ခွဲရန် အသုံးပြုနိုင်ပါသည်။

sequence id (filter_attribute နှင့် filter_value) တစ်ခုအတွက် sequence table ကို စစ်ထုတ်မှုပြုလုပ်မည်ဖြစ်ပြီး id_field ၏ လက်ရှိတန်ဖိုးကို 1 တိုးသွားမည်ဖြစ်ပြီး တိုးလာမည့် တန်ဖိုးကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။

အကယ်၍ ထပ်ဆောင်း column များသည် တန်ဖိုးများသတ်မှတ်ရန်လိုအပ်လာပါက default_values map ကို ဤ ရည်ရွယ်ချက်အတွက် အသုံးပြုနိုင်ပါသည်။


**Note** **(မှတ်စု)**

ဤ function သည် ရည်ရွယ်ထားသည့် (target) sqlite ဇယားကို ပြင်ဆင်မွမ်းမံပါသည်။ ၎င်းကို attribute များအတွက် default တန်ဖိုး စီစဉ်သတ်မှတ်ခြင်းများ (default value configurations) ဖြင့် အသုံးပြုရန်အတွက် ရည်ရွယ်ပါသည်။


Database parameter သည် layer တစ်ခုဖြစ်နေပြီး layer သည် transaction mode (transaction တစ်ခုတွင် SQL သည် ထည့်သွင်းခြင်း၊ သို့မဟုတ် ဖျက်ခြင်းကဲ့သို့သော တစ်ခုထက်ပိုသည့် လုပ်ငန်းဆောင်တာများကို အလုပ်တစ်ခုတည်းအဖြစ် database တစ်ခုအပေါ်တွင်ဆောင်ရွက်ခြင်းဖြစ်ပါသည်) အတွင်းတွင် ရှိနေသည့်အခါတွင် တန်ဖိုးကို transaction တစ်ခု ၏ သက်တမ်းတစ်လျှောက်တွင် တစ်ကြိမ်သာ  ပြန်လည်ရယူခြင်း (retrieved)၊ သိမ်းဆည်ခြင်း (cached) နှင့် တိုးပွားခြင်း (incremented) ပြုလုပ်မည်ဖြစ်ပါသည်။ ထိုသို့ဆောင်ရွက်ခြင်းသည် များစွာသော လုပ်ငန်းစဉ်များကို တူညီသည့် database အပေါ်တွင် တပြိုင်နက်တည်း လုပ်ဆောင်ရာတွင် လုံခြုံစိတ်ချမှုမရှိစေနိုင်ပါ။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - sqlite_fetch_and_increment(database, table, id_field, filter_attribute, filter_value, [default_values])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်ပါသည်
   * - Argument များ
     - * **database** - sqlite file သို့မဟုတ် geopackage layer ရှိရာ လမ်းကြောင်း
       * **table** - sequence များကို စီမံခန့်ခွဲခြင်းဆောင်ရွက်မည့် ဇယား၏ အမည်
       * **id_field** - လက်ရှိတန်ဖိုးပါဝင်သည့် field ၏ အမည်
       * **filter_attribute** - ဤ sequence အတွက် သိသာထင်ရှားသည့်အမှတ်အသားပြုလုပ်မှု (unique identifier) ပါဝင်သည့် field ကို အမည်သတ်မှတ်ပါ။ သိသာထင်ရှားသည့်အညွှန်း (UNIQUE index) တစ်ခုပါရှိရမည်ဖြစ်ပါသည်။
       * **filter_value** - အသုံးပြုရန် sequence ၏ အမည်
       * **default_values** - ဇယားပေါ်ရှိ နောက်ထပ် column များအတွက် default တန်ဖိုးများပါရှိသည့် map ။ ဤတန်ဖိုးများကို အပြည့်အဝကိုးကားခြင်း ပြုလုပ်ရန်လိုအပ်ပါသည်။ Function (လုပ်ဆောင်ချက်) များကို ခွင့်ပြုပါသည်။
   * - ဥပမာများ
     - * ``sqlite_fetch_and_increment(@layer, 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change', 'date(''now'')', 'user', '''' || @user_account_name || ''''))`` → 0
       * ``sqlite_fetch_and_increment(layer_property(@layer, 'path'), 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change', 'date(''now'')', 'user', '''' || @user_account_name || ''''))`` → 0


.. end_sqlite_fetch_and_increment_section

.. _expression_function_Record_and_Attributes_uuid:

uuid
.....

Qt `QUuid::createUuid <https://doc.qt.io/qt-5/quuid.html#createUuid>`_  နည်းလမ်းကို အသုံးပြုပြီး row တစ်ခုချင်းစီအတွက် Universally Unique Identifier (UUID) တစ်ခုကို ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - uuid([format='WithBraces'])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်ပါသည်
   * - Argument များ
     - * **format** - UUID ကို format ပြုလုပ်သကဲ့သို့ format။ 'WithBraces' ၊ 'WithoutBraces' သို့မဟုတ် 'Id128' ။
   * - ဥပမာများ
     - * ``uuid()`` → '{0bd2f60f-f157-4a6d-96af-d4ba4cb366a1}'
       * ``uuid('WithoutBraces')`` → '0bd2f60f-f157-4a6d-96af-d4ba4cb366a1'
       * ``uuid('Id128')`` → '0bd2f60ff1574a6d96afd4ba4cb366a1'


.. end_uuid_section

