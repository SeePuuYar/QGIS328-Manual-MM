:orphan:

.. DO NOT EDIT THIS FILE DIRECTLY. It is generated automatically by
   populate_expressions_list.py in the scripts folder.
   Changes should be made in the function help files
   in the resources/function_help/json/ folder in the
   qgis/QGIS repository.


.. _expression_function_GeometryGroup_affine_transform:

affine_transform
................

ဤ function သည် သဏ္ဍာန်မပျက်အသွင်ပြောင်းလဲ (affine transformation) ပြီးနောက် ဂျီဩမေတြီကို ပြန်ထုတ်ပေးပြီး တွက်ချက်မှုများကို ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်း ဆောင်ရွက်သွားမည်ဖြစ်သည်။ ထိုလုပ်ဆောင်ချက်များသည် ဂျီဩမေတြီများကို ၎င်းတို့၏ စကေး၊ လှည့်ထောင့်နှင့် ပြောင်းလဲခြင်းအစဉ်အတိုင်း ဆောင်ရွက်ပါသည်။ အကယ်၍ ဂျီဩမေတြီတွင် Z သို့မဟုတ် M အရွေ့ (offset) ရှိပြီး ကိုဩဒိနိတ်မပါရှိလျှင် ၎င်းတို့ကို ပေါင်းထည့်ပေးသွားပါလိမ့်မည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - affine_transform(geometry, delta_x, delta_y, rotation_z, scale_x, scale_y, [delta_z=0], [delta_m=0], [scale_z=1], [scale_m=1])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလုပ်သော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **delta_x** - x ဝင်ရိုး ရွှေ့ပြောင်းခြင်း
       * **delta_y** - y ဝင်ရိုး ရွှေ့ပြောင်းခြင်း
       * **rotation_z** - z ဝင်ရိုးတွင် ဒီဂရီဖြင့်ဖော်ပြသော နာရီလက်တံအတိုင်းလှည့်ထောင့်
       * **scale_x** - x ဝင်ရိုး စကေး factor
       * **scale_y** - y ဝင်ရိုး စကေး factor
       * **delta_z** - z ဝင်ရိုး ရွှေ့ပြောင်းခြင်း
       * **delta_m** - m ဝင်ရိုး ရွှေ့ပြောင်းခြင်း
       * **scale_z** - z ဝင်ရိုး စကေး factor
       * **scale_m** - m ဝင်ရိုး စကေး factor
   * - ဥပမာများ
     - * ``geom_to_wkt(affine_transform(geom_from_wkt('LINESTRING(1 1, 2 2)'), 2, 2, 0, 1, 1))`` → 'LineString (3 3, 4 4)'
       * ``geom_to_wkt(affine_transform(geom_from_wkt('POLYGON((0 0, 0 3, 2 2, 0 0))'), 0, 0, -90, 1, 2))`` → 'Polygon ((0 0, 6 0, 4 -2, 0 0))'
       * ``geom_to_wkt(affine_transform(geom_from_wkt('POINT(3 1)'), 0, 0, 0, 1, 1, 5, 0))`` → 'PointZ (3 1 5)'


.. end_affine_transform_section

.. _expression_function_GeometryGroup_angle_at_vertex:

angle_at_vertex
...............

ဤ function သည် မျဉ်းအဆစ်များဆက်ထားသည့် မျဉ်းကြောင်း (linestring) ဂျီဩမေတြီတစ်ခုရှိ သတ်မှတ်ထားသောမျဉ်းဆစ်တစ်ခုအတွက် ပျမ်းမျှထောင့်ကို ရရှိစေပြီး ထောင့်များကို မြောက်အရပ်မှ နာရီလက်တံအတိုင်း ဒီဂရီဖြင့် ရေတွက်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - angle_at_vertex(geometry, vertex)
   * - Argument များ
     - * **geometry** - linestring ဂျီဩမေတြီ တစ်ခု
       * **vertex** - မျဉ်းအဆစ်အညွှန်းကိန်း (vertex index) သည် သုညမှ စတင်သည်၊ အကယ်၍ အနှုတ်တန်ဖိုးဖြစ်နေခဲ့လျှင် ရွေးချယ်ထားသော မျဉ်းအဆစ်အညွှန်းကိန်းသည် ၎င်း၏မျဉ်းဆစ်အရေအတွက် စုစုပေါင်းထဲမှ ပကတိတန်ဖိုးကို နုတ်ထားခြင်းဖြစ်သည်။ 
   * - ဥပမာများ
     - * ``angle_at_vertex(geometry:=geom_from_wkt('LineString(0 0, 10 0, 10 10)'),vertex:=1)`` → 45.0


.. end_angle_at_vertex_section

.. _expression_function_GeometryGroup_apply_dash_pattern:

apply_dash_pattern
..................

ဂျီဩမေတြီတစ်ခုတွင် မျဉ်းတိုအတုံးသဏ္ဍာန် (dash pattern) တစ်ခုကို အသုံးပြုပေးပြီး မူရင်း input ဂျီဩမေတြီကို မျဉ်း/ကွင်းဆက်တစ်လျှောက်တွင် သတ်မှတ်ထားသော pattern ဖြင့် ရေးဆွဲထားသော MultiLineString (မျဉ်းကြောင်းများစွာပါဝင်သည့်) ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ 

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - apply_dash_pattern(geometry, pattern, [start_rule=no_rule], [end_rule=no_rule], [adjustment=both], [pattern_offset=0])
       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု (linestring (များစွာ) သို့မဟုတ် polygon (များစွာ) အကျုံးဝင်ပါသည်)။
       * **pattern** - dash နှင့် gap (ကွက်လပ်) အလျားများကို ကိုယ်စားပြုသော ကိန်းများအစု (array of numbers) တစ်ခုအဖြစ် ဖော်ပြထားသည့် dash pattern ကိုဆိုလိုခြင်းဖြစ်ပြီး ၎င်းတွင် အရေအတွက်အားဖြင့် စုံဂဏန်းပါဝင်ရမည်ဖြစ်ပါသည်။
       * **start_rule** - Pattern စတင်မှုကို ကန့်သတ်ရန်အတွက် ရွေးချယ်နိုင်သော စည်းမျဉ်းဖြစ်ပါသည်။ ရွေးချယ်ရနိုင်သော တန်ဖိုးများမှာ 'no_rule' (စည်းမျဉ်းမသတ်မှတ်ပါ) ၊ 'full_dash' (မျဉ်းတိုအတုံးအပြည့်) ၊ 'half_dash' (မျဉ်းတိုအတုံးတစ်ဝက်) ၊ 'full_gap' (ကွက်လပ်အပြည့်) ၊ 'half_gap' (ကွက်လပ်တစ်ဝက်) တို့ဖြစ်ပါသည်။ 
       * **end_rule** - Pattern ပြီးဆုံးမှုကို ကန့်သတ်ရန်အတွက် ရွေးချယ်နိုင်သော စည်းမျဉ်းဖြစ်ပါသည်။ ရွေးချယ်ရနိုင်သော တန်ဖိုးများမှာ 'no_rule' (စည်းမျဉ်းမသတ်မှတ်ပါ) ၊ 'full_dash' (မျဉ်းတိုအတုံးအပြည့်) ၊ 'half_dash' (မျဉ်းတိုအတုံးတစ်ဝက်) ၊ 'full_gap' (ကွက်လပ်အပြည့်) ၊ 'half_gap' (ကွက်လပ်တစ်ဝက်) တို့ဖြစ်ပါသည်။ 
       * **adjustment** - အလိုရှိသော pattern စည်းမျဉ်းများနှင့် ကိုက်ညီစေရန် မည်သည့် pattern အစိတ်အပိုင်းများတွင် ချိန်ညှိခြင်းပြုလုပ်မည်ကို သတ်မှတ်ရန် ရွေးချယ်နိုင်သော စည်းမျဉ်းဖြစ်ပါသည်။ ရွေးချယ်ရနိုင်သော တန်ဖိုးများမှာ 'both' (နှစ်မျိုးစလုံး)၊ 'dash' (မျဉ်းတိုအတုံး) နှင့် 'gap' (ကွက်လပ်) တို့ဖြစ်ပါသည်။
       * **pattern_offset** - Pattern တလျှောက် စတင်သည့် သီးသန့်အကွာအဝေးကို သတ်မှတ်ရန် ရွေးချယ်မှုပြုလုပ်နိုင်သော အကွာအဝေးဖြစ်ပါသည်။ 
   * - ဥပမာများ
     - * ``geom_to_wkt(apply_dash_pattern(geom_from_wkt('LINESTRING(1 1, 10 1)'), array(3, 1)))`` → MultiLineString ((1 1, 4 1),(5 1, 8 1),(9 1, 10 1, 10 1))
       * ``geom_to_wkt(apply_dash_pattern(geom_from_wkt('LINESTRING(1 1, 10 1)'), array(3, 1), start_rule:='half_dash'))`` → MultiLineString ((1 1, 2.5 1),(3.5 1, 6.5 1),(7.5 1, 10 1, 10 1))


.. end_apply_dash_pattern_section

.. _expression_function_GeometryGroup_$area:

$area
.....

လက်ရှိ feature ၏ဧရိယာကို ပြန်ထုတ်ပေးပါသည်။ ဤ function ဖြင့် တွက်ချက်ရရှိသော ဧရိယာသည် လက်ရှိ project ၏ စက်လုံးပုံ (ellipsoid) setting နှင့် ဧရိယာယူနစ် setting များ နှစ်ခုစလုံးနှင့် စပ်လျဉ်းပါသည်။ ဥပမာအားဖြင့် project အတွက် ellipsoid တစ်ခုကိုသတ်မှတ်ထားမည်ဆိုပါက တွက်ထုတ်လိုက်သော ဧရိယာသည်လည်း စက်လုံးပုံဆိုင်ရာ (ellipsoidal )ဧရိယာဖြစ်နေမည်ဖြစ်ပြီး အကယ်၍ ellipsoid သတ်မှတ်မထားပါက တွက်ထုတ်လိုက်သော ဧရိယာသည် ပြင်ညီမျက်နှာပြင်ဆိုင်ရာ (planimetric) ဧရိယာဖြစ်နေပေလိမ့်မည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $area
   * - ဥပမာများ
     - * ``$area`` → 42


.. end_$area_section

.. _expression_function_GeometryGroup_area:

area
....

ဂျီဩမေတြီ polygon တစ်ခု၏ ဧရိယာကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် အဆိုပါ ဂျီဩမေတြီ၏ တည်နေရာဆိုင်ရာရည်ညွှန်းစနစ် (Spatial Reference System (SRS)) အရ အမြဲတမ်း ပြင်ညီမျက်နှာပြင်ဆိုင်ရာ (planimetric) တိုင်းတာမှုဖြစ်နေမည်ဖြစ်ပြီး ရရှိလာသော ဧရိယာ၏ ယူနစ်သည်လည်း SRS အတွက်ယူနစ်များနှင့် ကိုက်ညီနေမည်ဖြစ်ပါသည်။ ဤ function သည် $area function ဖြင့် တွက်ချက်သော ဧရိယာဖြင့် ကွာခြားပါသည်။ $area function တွင် project ၏ ellipsoid setting နှင့် ဧရိယာယူနစ် setting များပေါ် မူတည်၍ ellipsoidal တွက်ချက်မှုများကို လုပ်ဆောင်ခြင်းဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - area(geometry)
   * - Argument များ
     - * **geometry** - polygon ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``area(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))'))`` → 8.0


.. end_area_section

.. _expression_function_GeometryGroup_azimuth:


azimuth
.......

ဤ function သည် အမှတ် a မှ အမှတ် b သို့ ဒေါင်လိုက်အနေအထားမှ နာရီလက်တံအတိုင်းတိုင်းတာသော မြောက်အရပ်အခြေခံ ဦးတည်ရာထောင့် (azimuth) ကို radian ဖြင့် ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - azimuth(point_a, point_b)
   * - Argument များ
     - * **point_a** - point geometry
       * **point_b** - point geometry
   * - ဥပမာများ
     - * ``degrees( azimuth( make_point(25, 45), make_point(75, 100) ) )`` → 42.273689
       * ``degrees( azimuth( make_point(75, 100), make_point(25,45) ) )`` → 222.273689


.. end_azimuth_section

.. _expression_function_GeometryGroup_boundary:


boundary
........

ဤ function သည် ဂျီဩမေတြီပုံသဏ္ဍာန်တစ်ခု၏ ပေါင်းစပ်နယ်နိမိတ် အနားသတ်များ (ဆိုလိုသည်မှာ ဂျီဩမေတြီတစ်ခု၏ ဖွဲ့စည်းပုံနယ်နိမိတ်များ) ထိစပ်ခြင်းကို ပြန်ထုတ်ပေးပါသည်။ ဥပမာအားဖြင့် polygon ဂျီဩမေတြီတစ်ခုတွင် ထို polygon အတွင်းရှိ ring တစ်ခုစီအတွက် linestring များပါဝင်နေသော နယ်နိမိတ်တစ်ခုရှိမည်ဖြစ်သည်။ အချို့သော ဂျီဩမေတြီအမျိုးအစားများတွင် နယ်နိမိတ်သတ်မှတ်ချက်မရှိပေ။ ဥပမာ- point များ သို့မဟုတ် ဂျီဩမေတြီစုစည်းမှုများဖြစ်ပြီး NULL ကို ပြန်ထုတ်ပေးပါလိမ့်မည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - boundary(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt(boundary(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))')))`` → 'LineString(1 1,0 0,-1 1,1 1)'
       * ``geom_to_wkt(boundary(geom_from_wkt('LineString(1 1,0 0,-1 1)')))`` → 'MultiPoint ((1 1),(-1 1))'


.. end_boundary_section

.. _expression_function_GeometryGroup_bounds:


bounds
......

ဤ function သည် ထည့်သွင်းလိုက်သော ဂျီဩမေတြီ၏ စတုဂံပုံအကျယ်အဝန်းနယ် (bounding box) ကို ကိုယ်စားပြုသော ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်း ဆောင်ရွက်ခြင်းဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - bounds(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``bounds(@geometry)`` → လက်ရှိ feature ၏ ဂျီဩမေတြီ၏ bounding box
       * ``geom_to_wkt(bounds(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))')))`` → 'Polygon ((-1 0, 1 0, 1 1, -1 1, -1 0))'


.. figure:: /docs/user_manual/processing_algs/qgis/img/bounding_box.png
   :align: center
   :width: 100%

   အနက်ရောင်မျဉ်းများသည် polygon feature တစ်ခုစီ၏ bounding box များကို ကိုယ်စားပြုပါသည်။

.. end_bounds_section

.. _expression_function_GeometryGroup_bounds_height:


bounds_height
.............

ဤ function သည် ဂျီဩမေတြီတစ်ခုရှိ စတုဂံပုံအကျယ်အဝန်းနယ် (bounding box) ၏အမြင့်ကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်း ဆောင်ရွက်ခြင်းဖြစ်သည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - bounds_height(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``bounds_height(@geometry)`` → လက်ရှိ feature ဂျီဩမေတြီရှိ bounding box ၏အမြင့်
       * ``bounds_height(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))'))`` → 1


.. end_bounds_height_section

.. _expression_function_GeometryGroup_bounds_width:

bounds_width
............

ဤ function သည် ဂျီဩမေတြီတစ်ခုရှိ စတုဂံပုံအကျယ်အဝန်းနယ် (bounding box) ၏အကျယ်ကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်း ဆောင်ရွက်ခြင်းဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - bounds_width(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``bounds_width(@geometry)`` → လက်ရှိ feature ဂျီဩမေတြီရှိ bounding box ၏အကျယ်
       * ``bounds_width(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))'))`` → 2


.. end_bounds_width_section

.. _expression_function_GeometryGroup_buffer:


buffer
......

ဤ function သည် ဂျီဩမေတြီတစ်ခုမှ အကွာအဝေးနည်းသော သို့မဟုတ် ထိုအကွာအဝေးနှင့်ညီမျှသော point များကို ကိုယ်စားပြုသည့် ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်း ဆောင်ရွက်ခြင်းဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - buffer(geometry, distance, [segments=8], [cap='round'], [join='round'], [miter_limit=2])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **distance** - Layer ၏ ယူနစ်များဖြင့် buffer အကွာအဝေး
       * **segments** - ထိပ်လုံးအဆက် (round join) style ကို အသုံးပြုသောအခါ စက်ဝိုင်း၏လေးပုံတစ်ပုံရှိသော စက်ဝန်းပိုင်းတစ်ခုကို ကိုယ်စားပြုရန် မျဉ်းပိုင်းအရေအတွက်။ မျဉ်းပိုင်း အရေအတွက် ပိုများပါက အဆစ် (node) များပိုမိုပါဝင်သည့် ချောမွေ့သော buffer ကို ရရှိစေပါသည်။
       * **cap** - buffer အတွက် အနားသတ်ပုံစံ။ အသုံးပြုနိုင်သောပုံစံများမှာ 'round' ၊ 'flat' သို့မဟုတ် 'square' တို့ဖြစ်သည်။
       * **join** - buffer အတွက် အဆက် (join) ပုံစံ။ အသုံးပြုနိုင်သော ပုံစံများမှာ  'round' ၊ 'bevel' သို့မဟုတ် 'miter' တို့ဖြစ်သည်။
       * **miter_limit** - 'miter' အဆက် style ကို အသုံးပြုသောအခါ ၎င်း၏ miter အကွာအဝေးသတ်မှတ်ချက်
   * - ဥပမာများ
     - * ``buffer(@geometry, 10.5)`` → လက်ရှိ feature ၏ ဂျီဩမေတြီကို 10.5 ယူနစ်ဖြင့် ကြားခံပြုလုပ်ထားသည့် polygon


.. figure:: /docs/user_manual/processing_algs/qgis/img/buffer.png
   :align: center
   :width: 100%

   Point များ၊ line ၊ အပေါင်း buffer လုပ်ထားသော polygon နှင့် အနှုတ် buffer လုပ်ထားသော polygon တို့၏ buffer (အဝါရောင်)

.. end_buffer_section

.. _expression_function_GeometryGroup_buffer_by_m:


buffer_by_m
...........

ဤ function သည် မျဉ်းအဆစ်များ၌ရှိသော m တန်ဖိုးအလိုက် buffer အချင်း ပြောင်းလဲသည့် line ဂျီဩမေတြီတလျှောက် buffer တစ်ခုကိုဖန်တီးပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - buffer_by_m(geometry, [segments=8])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ထည့်သွင်းသောဂျီဩမေတြီ။ m တန်ဖိုးများရှိသည့် line (များစွာ) ဂျီဩမေတြီ တစ်ခု ဖြစ်ရမည်။ 
       * **segments** - Buffer ထဲတွင် လေးပုံတစ်ပုံရှိသောစက်ဝန်းပိုင်းအကွေးများကို အနီးစပ်ဆုံးဖော်ပြသည့် မျဉ်းပိုင်းများအရေအတွက်
   * - ဥပမာများ
     - * ``buffer_by_m(geometry:=geom_from_wkt('LINESTRINGM(1 2 0.5, 4 2 0.2)'),segments:=8)`` → Linestring ဂျီဩမေတြီတလျှောက် အစတွင် 0.5 အချင်းရှိပြီး အဆုံးသတ်တွင် 0.2 အချင်းရှိသော အကျယ်ပြောင်းလဲနိုင်သည့် buffer တစ်ခု


.. figure:: /docs/user_manual/processing_algs/qgis/img/variable_buffer_m.png
   :align: center
   :width: 100%

   မျဉ်းအဆစ်များရှိ m တန်ဖိုးများကို အသုံးပြုပြီး line feature များကို buffer ပြုလုပ်ခြင်း

.. end_buffer_by_m_section

.. _expression_function_GeometryGroup_centroid:

centroid
........

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အလယ်ဗဟိုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - centroid(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``centroid(@geometry)`` → point ဂျီဩမေတြီတစ်ခု


.. end_centroid_section

.. _expression_function_GeometryGroup_close_line:

close_line
..........

ဤ function သည် ထည့်သွင်းလိုက်သော မျဉ်းသည် မျဉ်းပိတ် ဖြစ်မနေလျှင် အဆိုပါမျဉ်း၏ ပထမအမှတ်ကို မျဉ်းအဆုံးအထိ ဆက်ပေးခြင်းဖြင့် မျဉ်းပိတ်တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ ဂျီဩမေတြီသည် မျဉ်းကြောင်း (line string) သို့မဟုတ် မျဉ်းများစွာပါဝင်သောမျဉ်းတစ်ကြောင်း (multi line string) မဟုတ်ခဲ့ပါက ရလဒ်သည် NULL ဖြစ်နေပေလိမ့်မည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - close_line(geometry)
   * - Argument များ
     - * **geometry** - line string ဂျီဩမေတြီ တစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt(close_line(geom_from_wkt('LINESTRING(0 0, 1 0, 1 1)')))`` → 'LineString (0 0, 1 0, 1 1, 0 0)'
       * ``geom_to_wkt(close_line(geom_from_wkt('LINESTRING(0 0, 1 0, 1 1, 0 0)')))`` → 'LineString (0 0, 1 0, 1 1, 0 0)'


.. end_close_line_section

.. _expression_function_GeometryGroup_closest_point:

closest_point
.............

ဤ function သည် ဂျီဩမေတြီ (၂) နှင့် အနီးကပ်ဆုံးရှိသည့် ဂျီဩမေတြီ (၁) ပေါ်တွင် အမှတ်တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ 

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - closest_point(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ၎င်းအပေါ်တွင် အနီးကပ်ဆုံးအမှတ်ကို ရှာမည့် ဂျီဩမေတြီ
       * **geometry2** - ၎င်းနှင့် အနီးကပ်ဆုံးအမှတ်ကို ရှာမည့် ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``geom_to_wkt(closest_point(geom_from_wkt('LINESTRING (20 80, 98 190, 110 180, 50 75 )'),geom_from_wkt('POINT(100 100)')))`` → 'Point(73.0769 115.384)'


.. end_closest_point_section

.. _expression_function_GeometryGroup_collect_geometries:

collect_geometries
..................

ဤ function သည် ဂျီဩမေတြီအစုတစ်ခုကို အစိတ်အပိုင်းများစွာပါဝင်သော ဂျီဩမေတြီတစ်ခုအဖြစ်သို့ စုစည်းပေးပါသည်။ 

**List of arguments variant (Argument မူကွဲများစာရင်း)**

ဂျီဩမေတြီအစိတ်အပိုင်းများကို function တွင် သီးခြား argument များအဖြစ် သတ်မှတ်ထားပါသည်။ 


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - collect_geometries(geometry1, geometry2, ...)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt(collect_geometries(make_point(1,2), make_point(3,4), make_point(5,6)))`` → 'MultiPoint ((1 2),(3 4),(5 6))'


**Array variant (Array မူကွဲ)**

ဂျီဩမေတြီအစိတ်အပိုင်းများကို ဂျီဩမေတြီအစိတ်အပိုင်းများ၏ array တစ်ခုအနေဖြင့် သတ်မှတ်ထားပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - collect_geometries(array)
   * - Argument များ
     - * **array** - ဂျီဩမေတြီများ၏ array
   * - ဥပမာများ
     - * ``geom_to_wkt(collect_geometries(array(make_point(1,2), make_point(3,4), make_point(5,6))))`` → 'MultiPoint ((1 2),(3 4),(5 6))'


.. end_collect_geometries_section

.. _expression_function_GeometryGroup_combine:

combine
.......

ဤ function သည် ဂျီဩမေတြီနှစ်ခု ပေါင်းစပ်ခြင်းကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - combine(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု 
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt( combine( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 2 1)' ) ) )`` → 'MULTILINESTRING((4 4, 2 1), (3 3, 4 4), (4 4, 5 5))'
       * ``geom_to_wkt( combine( geom_from_wkt( 'LINESTRING(3 3, 4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 6 6, 2 1)' ) ) )`` → 'LINESTRING(3 3, 4 4, 6 6, 2 1)'


.. end_combine_section

.. _expression_function_GeometryGroup_concave_hull:

concave_hull
............

ဤ function သည် ဂျီဩမေတြီထဲရှိ point များအားလုံးပါဝင်သော ခွက်နေသည့် (concave) polygon တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - concave_hull(geometry, target_percent, [allow_holes=False])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **target_percent** - ဤလုပ်ဆောင်ချက်မှ ဆောင်ရွက်မည့် convex (ခုံးနေသော) hull ဧရိယာ ရာခိုင်နှုန်းဖြစ်ပါသည်။ သတ်မှတ်ရာခိုင်နှုန်းသည် ၁ ဖြစ်ပါက convex (ခုံးနေသော) hull အတိုင်း ရလာဒ်အတူတူကို ရရှိမည်ဖြစ်ပြီး သတ်မှတ်ရာခိုင်နှုန်းသည် 0 နှင့် 0.99 ကြားရှိပါက convex (ခုံးနေသော) hull ၏ ဧရိယာထက် ပိုမိုသေးငယ်သော ဧရိယာကို ရရှိမည်ဖြစ်သည်။
       * **allow_holes** - ရလာဒ် ဂျီဩမေတြီ အတွင်းတွင် အပေါက်များ (hole) ကို ခွင့်ပြု/မပြု သတ်မှတ်ပေးနိုင်သည့် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument တစ်ခုဖြစ်ပါသည်။ FALSE သည် default ဖြစ်ပြီး ရလာဒ် ဂျီဩမေတြီ အတွင်းတွင် အပေါက်များ မပါဝင်လိုပါက TRUE ကို သတ်မှတ်ရပါမည်။ 
   * - ဥပမာများ
     - * ``geom_to_wkt(concave_hull(geom_from_wkt('MULTILINESTRING((106 164,30 112,74 70,82 112,130 94,130 62,122 40,156 32,162 76,172 88),(132 178,134 148,128 136,96 128,132 108,150 130,170 142,174 110,156 96,158 90,158 88),(22 64,66 28,94 38,94 68,114 76,112 30,132 10,168 18,178 34,186 52,184 74,190 100,190 122,182 148,178 170,176 184,156 164,146 178,132 186,92 182,56 158,36 150,62 150,76 128,88 118))'), 0.99))`` → 'Polygon ((30 112, 36 150, 92 182, 132 186, 176 184, 190 122, 190 100, 186 52, 178 34, 168 18, 132 10, 112 30, 66 28, 22 64, 30 112))'


.. end_concave_hull_section

.. _expression_function_GeometryGroup_contains:

contains
........

ဤ function သည် ဂျီဩမေတြီတစ်ခုအတွင်း အခြားဂျီဩမေတြီတစ်ခုပါဝင်နေမှု ရှိ/မရှိ စစ်ဆေးပေးပါသည်။ ဂျီဩမေတြီ (၂)၏ point များသည် ဂျီဩမေတြီ (၁)၏ အပြင်ပိုင်းတွင် လုံးဝ ကျရောက်မနေလျှင်သော်လည်းကောင်း၊ ဂျီဩမေတြီ (၂)အတွင်းပိုင်းရှိ အနည်းဆုံး point တစ်ခုသည် ဂျီဩမေတြီ (၁)၏ အတွင်းပိုင်းတွင် ကျရောက်နေခဲ့လျှင်သော်လည်းကောင်း TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။ 

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - contains(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု 
       * **geometry2** - ဂျီဩမေတြီတစ်ခု 
   * - ဥပမာများ
     - * ``contains( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ), geom_from_wkt( 'POINT(0.5 0.5 )' ) )`` → TRUE
       * ``contains( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )`` → FALSE


.. end_contains_section

.. _expression_function_GeometryGroup_convex_hull:


convex_hull
...........

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ convex (ခုံးနေသော) hull ကို ပြန်ထုတ်ပေးပါသည်။ ၎င်းသည် အစုအတွင်းရှိ ဂျီဩမေတြီများအားလုံးကို လွှမ်းခြုံသော အနည်းဆုံး ခုံးနေသည့် ဂျီဩမေတြီကို ကိုယ်စားပြုပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - convex_hull(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt( convex_hull( geom_from_wkt( 'LINESTRING(3 3, 4 4, 4 10)' ) ) )`` → 'POLYGON((3 3, 4 10, 4 4, 3 3))'


.. end_convex_hull_section

.. _expression_function_GeometryGroup_crosses:

crosses
.......

ဤ function သည် ဂျီဩမေတြီတစ်ခုနှင့် တစ်ခု ဖြတ်နေခြင်း ရှိ/မရှိ စစ်ဆေးပေးပါသည်။ ပေးထားသော ဂျီဩမေတြီများတွင် အတွင်းပိုင်း point များအားလုံးမဟုတ်သော်လည်း point အချို့ သည် ဘုံတူညီနေမှု ရှိနေခဲ့လျှင် TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။ 


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - crosses(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``crosses( geom_from_wkt( 'LINESTRING(3 5, 4 4, 5 3)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )`` → TRUE
       * ``crosses( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )`` → FALSE


.. end_crosses_section

.. _expression_function_GeometryGroup_densify_by_count:

densify_by_count
................

ဤ function သည် polygon သို့မဟုတ် line layer ဂျီဩမေတြီတစ်ခုကိုယူ၍ မူလဂျီဩမေတြီထက် မျဉ်းဆစ် (vertex) များစွာပါဝင်သော ဂျီဩမေတြီအသစ် တစ်ခုကို ရရှိစေပါသည်။ 

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - densify_by_count(geometry, vertices)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု ((multi)linestrings သို့မဟုတ် (multi)polygons ကို လက်ခံပါသည်)
       * **vertices** - ပေါင်းထည့်ရမည့် မျဉ်းဆစ်အရေအတွက် (မျဉ်းပိုင်းတစ်ခုလျှင်)
   * - ဥပမာများ
     - * ``geom_to_wkt(densify_by_count(geom_from_wkt('LINESTRING(1 1, 10 1)'), 3))`` → LineString (1 1, 3.25 1, 5.5 1, 7.75 1, 10 1)


.. end_densify_by_count_section

.. _expression_function_GeometryGroup_densify_by_distance:

densify_by_distance
...................

ဤ function သည် polygon သို့မဟုတ် line layer ဂျီဩမေတြီတစ်ခုကိုယူ၍ သတ်မှတ်ထားသော အများဆုံး ကြားပိုင်း အကွာအဝေး ရှိသည့် အစွန်းများတွင် မျဉ်းဆစ်များ ထပ်မံပေါင်းထည့်ခြင်းဖြင့် သိပ်သည်းအောင်ပြုလုပ်ထားသော ဂျီဩမေတြီအသစ်တစ်ခုကို ရရှိစေပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - densify_by_distance(geometry, distance)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု ((multi)linestrings သို့မဟုတ် (multi)polygons ကို လက်ခံပါသည်)
       * **distance** - ရလာဒ်ဂျီဩမေတြီအတွင်း မျဉ်းဆစ်များအကြားရှိ အများဆုံး ကြားပိုင်း အကွာအဝေး
   * - ဥပမာများ
     - * ``geom_to_wkt(densify_by_distance(geom_from_wkt('LINESTRING(1 1, 10 1)'), 4))`` → LineString (1 1, 4 1, 7 1, 10 1)


.. end_densify_by_distance_section

.. _expression_function_GeometryGroup_difference:

difference
..........

ဤ function သည် ဂျီဩမေတြီ (၂) နှင့် ထိဖြတ်သွားခြင်းမရှိသော ဂျီဩမေတြီ (၁) ၏အစိတ်အပိုင်းများကို ကိုယ်စားပြုသည့် ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - difference(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt( difference( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4)' ) ) )`` → 'LINESTRING(4 4, 5 5)'


.. end_difference_section

.. _expression_function_GeometryGroup_disjoint:

disjoint
........

ဤ function သည် ဂျီဩမေတြီများ တည်နေရာအရ တစ်ခုနှင့်တစ်ခု ထိစပ်ခြင်းရှိမရှိကို စစ်ဆေးပေးပါသည်။ အကယ်၍ ဂျီဩမေတြီများသည် တည်နေရာအရထိစပ်ခြင်းမရှိလျှင် TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - disjoint(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``disjoint( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0 ))' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )`` → TRUE
       * ``disjoint( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'POINT(4 4)' ))`` → FALSE


.. end_disjoint_section

.. _expression_function_GeometryGroup_distance:

distance
........

ဤ function သည် ဂျီဩမေတြီနှစ်ခုအကြားရှိ (တည်နေရာရည်ညွှန်းစနစ်အပေါ်မူတည်၍) အနည်းဆုံးအကွာအဝေးကို အရိပ်ချစနစ်၏ယူနစ်များဖြင့် ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - distance(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``distance( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(4 8)' ) )`` → 4


.. end_distance_section

.. _expression_function_GeometryGroup_distance_to_vertex:

distance_to_vertex
..................

ဤ function သည် သတ်မှတ်ထားသည့် မျဉ်းဆစ်တစ်ခုသို့ ဂျီဩမေတြီတလျှောက်ရှိ အကွာအဝေးကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - distance_to_vertex(geometry, vertex)
   * - Argument များ
     - * **geometry** - linestring ဂျီဩမေတြီတစ်ခု
       * **vertex** - 0 မှ စတင်သည့် မျဉ်းဆစ်ညွှန်းကိန်းဖြစ်သည်။ အကယ်၍ တန်ဖိုးသည် အနှုတ်လက္ခဏာဖြစ်ပါက ရွေးချယ်ထားသည့် မျဉ်းဆစ်ညွှန်းကိန်းသည် ပကတိတန်ဖိုးမှ ၎င်း၏စုစုပေါင်းအရေအတွက်ကို နှုတ်ထားခြင်း ဖြစ်သည်။
   * - ဥပမာများ
     - * ``distance_to_vertex(geometry:=geom_from_wkt('LineString(0 0, 10 0, 10 10)'),vertex:=1)`` → 10.0


.. end_distance_to_vertex_section

.. _expression_function_GeometryGroup_end_point:

end_point
.........

ဤ function သည် ဂျီဩမေတြီတစ်ခုမှ နောက်ဆုံး node (ဆုံမှတ်)ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - end_point(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``geom_to_wkt(end_point(geom_from_wkt('LINESTRING(4 0, 4 2, 0 2)')))`` → 'Point (0 2)'


.. end_end_point_section

.. _expression_function_GeometryGroup_exif_geotag:

exif_geotag
...........

ဤ function သည် ဓာတ်ပုံဖိုင်တစ်ခု၏ exif geotag များမှ point ဂျီဩမေတြီတစ်ခုကို ဖန်တီးပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - exif_geotag(path)
   * - Argument များ
     - * **path** - ဓာတ်ပုံဖိုင်လမ်းကြောင်း သို့မဟုတ် မြေပုံ layer ၏တန်ဖိုးတစ်ခုဖြစ်သည်။ အကယ်၍ မြေပုံ layer ၏တန်ဖိုးကို သတ်မှတ်ထားပါက ထို layer ၏ မူလဖိုင်အရင်းအမြစ်ကို အသုံးပြုသွားပါမည်။
   * - ဥပမာများ
     - * ``geom_to_wkt(exif_geotag('/my/photo.jpg'))`` → 'Point (2 4)'


.. end_exif_geotag_section

.. _expression_function_GeometryGroup_extend:

extend
......

ဤ function သည် linestring ဂျီဩမေတြီတစ်ခု၏ စမှတ်နှင့်ဆုံးမှတ်ကို သတ်မှတ်တန်ဖိုးအတိုင်း ထပ်မံတိုးချဲ့စေပါသည်။ Line များကို အစမျဉ်းပိုင်းနှင့် အဆုံးမျဉ်းပိုင်း၏ လားရာအတိုင်း တိုးချဲ့ခြင်းဖြစ်သည်။ Line များစွာပါရှိပါက ထိုမျဉ်းအစိတ်အပိုင်းများအားလုံးကို တိုးချဲ့ပေးမည်ဖြစ်ပြီး အကွာအဝေးများမှာ ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ်အတိုင်း ဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - extend(geometry, start_distance, end_distance)
   * - Argument များ
     - * **geometry** - (multi)linestring ဂျီဩမေတြီ
       * **start_distance** - မျဉ်း၏စမှတ်ကို တိုးချဲ့မည့်အကွာအဝေး
       * **end_distance** -မျဉ်း၏ဆုံးမှတ်ကို တိုးချဲ့မည့်အကွာအ‌ဝေး
   * - ဥပမာများ
     - * ``geom_to_wkt(extend(geom_from_wkt('LineString(0 0, 1 0, 1 1)'),1,2))`` → 'LineString (-1 0, 1 0, 1 3)'
       * ``geom_to_wkt(extend(geom_from_wkt('MultiLineString((0 0, 1 0, 1 1), (2 2, 0 2, 0 5))'),1,2))`` → 'MultiLineString ((-1 0, 1 0, 1 3),(3 2, 0 2, 0 7))'


.. end_extend_section

.. _expression_function_GeometryGroup_exterior_ring:


exterior_ring
.............

ဤ function သည် polygon ဂျီဩမေတြီတစ်ခု၏ အပြင်နယ်နိမိတ်ကို ကိုယ်စားပြုသော line တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ ဂျီဩမေတြီသည် polygon တစ်ခုမဟုတ်ပါက ရလဒ်သည် NULL ဟူ၍ ဖော်ပြနေမည်ဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - exterior_ring(geometry)
   * - Argument များ
     - * **geometry** - polygon ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt(exterior_ring(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),( 0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2, 0.1, 0.1 0.1))')))`` → 'LineString (-1 -1, 4 0, 4 2, 0 2, -1 -1)'


.. end_exterior_ring_section

.. _expression_function_GeometryGroup_extrude:


extrude
.......

ဤ function သည် ထည့်သွင်းလိုက်သည့် မျဉ်းကွေး(များ) သို့မဟုတ် မျဉ်းကြောင်း(များ) ဂျီဩမေတြီများကို သတ်မှတ်ထားသည့် x နှင့် y တန်ဖိုးများဖြင့် တိုးချဲ့ပြီး ထုဖော်ထားသည့်ပုံစံကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - extrude(geometry, x, y)
   * - Argument များ
     - * **geometry** - မျဉ်းကွေး သို့မဟုတ် linestring ဂျီဩမေတြီ
       * **x** - တိုးချဲ့သည့် x ဂဏန်းတန်ဖိုး
       * **y** - တိုးချဲ့သည့် y ဂဏန်းတန်ဖိုး
   * - ဥပမာများ
     - * ``geom_to_wkt(extrude(geom_from_wkt('LineString(1 2, 3 2, 4 3)'), 1, 2))`` → 'Polygon ((1 2, 3 2, 4 3, 5 5, 4 4, 2 4, 1 2))'
       * ``geom_to_wkt(extrude(geom_from_wkt('MultiLineString((1 2, 3 2), (4 3, 8 3))'), 1, 2))`` → 'MultiPolygon (((1 2, 3 2, 4 4, 2 4, 1 2)),((4 3, 8 3, 9 5, 5 5, 4 3)))'


.. end_extrude_section

.. _expression_function_GeometryGroup_flip_coordinates:


flip_coordinates
................

ဤ function သည် x နှင့် y ကိုဩဒိနိတ်များလဲလှယ်ပြောင်းလဲထားသော ဂျီဩမေတြီ၏မိတ္တူတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ လတ္တီကျု နှင့် လောင်ဂျီကျု တန်ဖိုးများ ပြောင်းပြန်ဖြစ်နေသော ဂျီဩမေတြီများကို ပြုပြင်ရာတွင် အသုံးဝင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - flip_coordinates(geometry)
   * - Argument များ 
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt(flip_coordinates(make_point(1, 2)))`` → 'Point (2 1)'
       * ``geom_to_wkt(flip_coordinates(geom_from_wkt('LineString(0 2, 1 0, 1 6)')))`` → 'LineString (2 0, 0 1, 6 1)'


.. end_flip_coordinates_section

.. _expression_function_GeometryGroup_force_polygon_ccw:

force_polygon_ccw
.................

ဤ function သည် ဂျီဩမေတြီတစ်ခုကို ပြင်ပနယ်နိမိတ်ကွင်းများအား နာရီလက်တံပြောင်းပြန်အတိုင်းလည်းကောင်း၊ အတွင်းနယ်နိမိတ်ကွင်းများအား နာရီလက်တံအတိုင်းလည်းကောင်း ဖြစ်ရမည်ဟူသော သဘောတူညီချက်ကို လိုက်နာရန် လုပ်ဆောင်ပေးပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - force_polygon_ccw(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု၊ polygon မဟုတ်သော ဂျီဩမေတြီများမှာမူ မပြောင်းလဲဘဲ မူလအတိုင်း ရှိနေမည်ဖြစ်ပါသည်။ 
   * - ဥပမာများ
     - * ``geom_to_wkt(force_polygon_ccw(geometry:=geom_from_wkt('Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1))')))`` → 'Polygon ((-1 -1, 4 0, 4 2, 0 2, -1 -1))'


.. end_force_polygon_ccw_section

.. _expression_function_GeometryGroup_force_polygon_cw:

force_polygon_cw
................

ဤ function သည် ဂျီဩမေတြီတစ်ခုကို ပြင်ပနယ်နိမိတ်ကွင်းများအား နာရီလက်တံအတိုင်းလည်းကောင်း၊ အတွင်းနယ်နိမိတ်ကွင်းများအား နာရီလက်တံပြောင်းပြန်အတိုင်းလည်းကောင်း ဖြစ်ရမည်ဟူသော သဘောတူညီချက်ကို လိုက်နာရန် လုပ်ဆောင်ပေးပါသည်။


.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - force_polygon_cw(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု၊ polygon မဟုတ်သော ဂျီဩမေတြီများမှာမူ မပြောင်းလဲဘဲ မူလအတိုင်း ရှိနေမည်ဖြစ်ပါသည်။
   * - ဥပမာများ
     - * ``geom_to_wkt(force_polygon_cw(geometry:=geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))')))`` → 'Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1))'


.. end_force_polygon_cw_section

.. _expression_function_GeometryGroup_force_rhr:


force_rhr
.........

ဤ function သည် ဂျီဩမေတြီတစ်ခုကို Right-Hand-Rule (လက်ယာဘက်စည်းမျဉ်း) အတိုင်း လိုက်နာစေပါသည်။ လက်ယာဘက်စည်းမျဉ်းဆိုသည်မှာ polygon ဖြင့် ဘောင်ခတ်ထားသော ဧရိယာတစ်ခုသည် နယ်နိမိတ်၏လက်ယာဘက်လားရာအတိုင်း ဆောင်ရွက်စေခြင်းဖြစ်သည်။ အထူးသဖြင့် ပြင်ပနယ်နိမိတ်ကွင်းများသည် နာရီလက်တံလားရာအတိုင်းဖြစ်ပြီး အတွင်းနယ်နိမိတ်ကွင်းများမှာမူ နာရီလက်တံပြောင်းပြန်လားရာအတိုင်းဖြစ်သည်။ လက်ယာဘက်စည်းမျဉ်း သည် အချို့သော အကြောင်းအရာများအတွက် အဓိပ္ပါယ်သတ်မှတ်ချက် တသမတ်တည်း မရှိခြင်းကြောင့် တိကျပြတ်သားသော  force_polygon_cw funcion ကို အစားထိုးအသုံးပြုရန် အကြံပြုပါသည်။ 


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - force_rhr(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု၊ polygon မဟုတ်သော ဂျီဩမေတြီများမှာမူ မပြောင်းလဲဘဲ မူလအတိုင်း ရှိနေမည်ဖြစ်ပါသည်။ 
   * - ဥပမာများ
     - * ``geom_to_wkt(force_rhr(geometry:=geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))')))`` → 'Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1))'


.. end_force_rhr_section

.. _expression_function_GeometryGroup_geom_from_gml:

geom_from_gml
.............

ဤ function သည် ဂျီဩမေတြီ၏ GML ကိုယ်စားပြုဖော်ပြခြင်းတစ်ခုမှ ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - geom_from_gml(gml)
   * - Argument များ
     - * **gml** - ဂျီဩမေတြီတစ်ခု၏ GML ကို စာသားအနေဖြင့် ဖော်ပြခြင်း
   * - ဥပမာများ
     - * ``geom_from_gml('<gml:LineString srsName="EPSG:4326"><gml:coordinates>4,4 5,5 6,6</gml:coordinates></gml:LineString>')`` → line ဂျီဩမေတြီ object တစ်ခု


.. end_geom_from_gml_section

.. _expression_function_GeometryGroup_geom_from_wkb:

geom_from_wkb
.............

ဤ function သည် Well-Known Binary (WKB) ကိုယ်စားပြုမှုတစ်ခုမှ ဖန်တီးထားသော ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - geom_from_wkb(binary)
   * - Argument များ
     - * **binary** - ဂျီဩမေတြီတစ်ခု၏ လူသိများသော  Well-Known Binary (WKB) ကိုယ်စားပြုမှု (binary blob တစ်ခုအဖြစ်)
   * - ဥပမာများ
     - * ``geom_from_wkb( geom_to_wkb( make_point(4,5) ) )`` → point ဂျီဩမေတြီ object တစ်ခု


.. end_geom_from_wkb_section

.. _expression_function_GeometryGroup_geom_from_wkt:

geom_from_wkt
.............

ဤ function သည် Well-Known Text (WKT) ကိုယ်စားပြုမှုတစ်ခုမှ ဖန်တီးထားသော ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - geom_from_wkt(text)
   * - Argument များ
     - * **text** - ဂျီဩမေတြီတစ်ခု၏ လူသိများသော Well-Known Text (WKT) ကိုယ်စားပြုမှု
   * - ဥပမာများ
     - * ``geom_from_wkt( 'POINT(4 5)' )`` → ဂျီဩမေတြီတစ်ခု

.. end_geom_from_wkt_section

.. _expression_function_GeometryGroup_geom_to_wkb:

geom_to_wkb
...........

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ Well-Known Binary (WKB) ကိုယ်စားပြုမှုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - geom_to_wkb(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkb( @geometry )`` → ဂျီဩမေတြီတစ်ခုပါဝင်သည့် binary blob


.. end_geom_to_wkb_section

.. _expression_function_GeometryGroup_geom_to_wkt:


geom_to_wkt
...........

ဤ function သည် ဂျီဩမေတြီ၏ Well-Known Text (WKT) ကိုယ်စားပြု‌ဖော်ပြခြင်းကို SRID metadata မပါဝင်ပဲ ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - geom_to_wkt(geometry, [precision=8])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **precision** - ကိန်းဂဏန်းဆိုင်ရာ တိကျမှု
   * - ဥပမာများ
     - * ``geom_to_wkt( make_point(6, 50) )`` → 'POINT(6 50)'
       * ``geom_to_wkt(centroid(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))')))`` → 'POINT(0 0.66666667)'
       * ``geom_to_wkt(centroid(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))')), 2)`` → 'POINT(0 0.67)'


.. end_geom_to_wkt_section


.. _expression_function_GeometryGroup_$geometry:


$geometry
.........

ဤ function သည် လက်ရှိအသုံးပြုနေသော feature ၏ ဂျီဩမေတြီကို ပြန်ထုတ်ပေးပါသည်။ အခြားသော လုပ်ဆောင်ချက်များ ဆောင်ရွက်ရန် အသုံးပြုနိုင်ပါသည်။ **WARNING (သတိပေးချက်) - ဤလုပ်ဆောင်ချက်သည် အပြစ်အနာအဆာပါဝင်နေပြီး ၎င်းတို့အစား @geometry variable ကို အစားထိုးအသုံးပြုရန် အကြံပြုပါသည်။**

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $geometry
   * - ဥပမာများ
     - * ``geom_to_wkt( $geometry )`` → 'POINT(6 50)'


.. end_$geometry_section

.. _expression_function_GeometryGroup_geometry:


geometry
........

ဤ function သည် feature ၏ ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - geometry(feature)
   * - Argument များ
     - * **feature** - feature အရာဝတ္ထုတစ်ခု
   * - ဥပမာများ
     - * ``geometry( @feature )`` → လက်ရှိအသုံးပြုနေသော feature ၏ ဂျီဩမေတြီ၊ @geometry ကို အသုံးပြုလျှင် ပိုမိုကောင်းမွန်ပါသည်။
       * ``geom_to_wkt( geometry( get_feature_by_id( 'streets', 1 ) ) )`` → "streets" layer တွင် id 1 ရှိသော feature ၏ WKT ပုံစံဖြင့် ဂျီဩမေတြီ၊ ဥပမာ- 'POINT(6 50)'
       * ``intersects( @geometry, geometry( get_feature( 'streets', 'name', 'Main St.' ) ) )`` → "streets" layer ထဲရှိ 'Main St.' အမည်ရှိသော feature ကို လက်ရှိ feature မှ တည်နေရာအရ ထိဖြတ်သွားလျှင် TRUE ကိုပြန်ထုတ်ပေးပါသည်


.. end_geometry_section


.. _expression_function_GeometryGroup_geometry_n:


geometry_n
..........

ဤ function သည် ဂျီဩမေတြီစုစည်းမှုမှ သီးခြား ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပြီး အကယ်၍ ထည့်သွင်းလိုက်သော ဂျီဩမေတြီသည် စုစည်းမှု တစ်ခုမဟုတ်ပါက NULL ပြန်ထုတ်ပေးမည်ဖြစ်သည်။ ၎င်းသည် အစိတ်အပိုင်းများစွာပါဝင်သော ဂျီဩမေတြီတစ်ခု အစိတ်အပိုင်းတစ်ခုကိုလည်း ပြန်ထုတ်ပေးနိုင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - geometry_n(geometry, index)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီစုစည်းမှု 
       * **index** - ရရှိလာမည့် ဂျီဩမေတြီ၏ အညွှန်းကိန်း ဖြစ်ပြီး၊ 1 သည် စုစည်းမှုထဲရှိ ပထမဆုံး ဂျီဩမေတြီဖြစ်ပါသည်။ 
   * - ဥပမာများ
     - * ``geom_to_wkt(geometry_n(geom_from_wkt('GEOMETRYCOLLECTION(POINT(0 1), POINT(0 0), POINT(1 0), POINT(1 1))'),3))`` → 'Point (1 0)'


.. end_geometry_n_section


.. _expression_function_GeometryGroup_geometry_type:


geometry_type
.............

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အမျိုးအစားကို ဖော်ပြသော စာသားတန်ဖိုးတစ်ခုကို ပြန်ထုတ်ပေးပါသည် (Point ၊ Line သို့မဟုတ် Polygon)

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - geometry_type(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geometry_type( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') )`` → 'Line'
       * ``geometry_type( geom_from_wkt( 'MULTILINESTRING((2 5, 3 6, 4 8), (1 1, 0 0))') )`` → 'Line'
       * ``geometry_type( geom_from_wkt( 'POINT(2 5)') )`` → 'Point'
       * ``geometry_type( geom_from_wkt( 'POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))') )`` → 'Polygon'

.. end_geometry_type_section

.. _expression_function_GeometryGroup_hausdorff_distance:

hausdorff_distance
..................

ဤ function သည် ဂျီဩမေတြီနှစ်ခုကြားရှိ Hausdorff အကွာအဝေးကို ပြန်ထုတ်ပေးပါသည်။ ၎င်းသည် အခြေခံအားဖြင့် ဂျီဩမေတြီနှစ်ခု မည်သို့မည်ပုံ ဆင်တူခြင်း/ကွဲပြားခြင်းကို တိုင်းတာခြင်းဖြစ်ပါသည်။ အကွာအဝေးနည်းလေလေ ဂျီဩမေတြီနှစ်ခုမှာ ပိုမိုဆင်တူလေဖြစ်ပါသည်။ 

ဤ function ကို optional ဖြစ်သော densify fraction argument ဖြင့် စေခိုင်းလုပ်ဆောင်နိုင်ပါသည်။ အကယ်၍ သီးခြားသတ်မှတ်ထားခြင်းမရှိပါက စံသတ်မှတ်ထားသော Hausdorff အကွာအဝေး နှင့် အနီးစပ်ဆုံး တန်ဖိုးကို အသုံးပြုသွားမည်ဖြစ်ပါသည်။ ဤအနီးစပ်ဆုံးတန်ဖိုးမှာ အသုံးဝင်သော ဖြစ်ရပ်များစွာအတွက် တန်ဖိုးအတိအကျ သို့မဟုတ် အနီးစပ်ဆုံးတန်ဖိုးဖြစ်ပါသည်။ ဥပမာများမှာ- 



* တစ်ခုနှင့် တစ်ခု အကြမ်းဖျင်းအားဖြင့် အလျားတူပြီး ပြိုင်နေသည့် မျဉ်းကြောင်းများအကြား အကွာအဝေးကို တွက်ချက်ခြင်း။ ၎င်းသည် မျဉ်းဖြောင့် လမ်းကြောင်းကွန်ယက်များကို ယှဉ်တွဲသည့်အခါ တွေ့ရပါသည်။ 
* ဂျီဩမေတြီများ၏ ဆင်တူမှုကို စမ်းသပ်ခြင်း။ 




အကယ်၍ ဤနည်းလမ်းဖြင့် ပံ့ပိုးပေးထားသော default အနီးစပ်ဆုံးတန်ဖိုးမှာ လုံလောက်မှုမရှိလျှင် optional ဖြစ်သော densify fraction argument ကို သတ်မှတ်ပါ။ ဤ argument ကို သတ်မှတ်ခြင်းအားဖြင့် Hausdorff အကွာအဝေး ပြတ်ကိန်းကို မတွက်ချက်မီ မျဉ်းပိုင်းများ တိုးခြင်း/သိပ်သည်းစေခြင်းကို ဆောင်ရွက်ပေးပါသည်။ Parameter သည် မျဉ်းပိုင်းတစ်ခုစီကို သိပ်သည်းအောင်လုပ်မည့် အပိုင်း (fraction) ကို သတ်မှတ်ပေးပါသည်။ မျဉ်းပိုင်းတစ်ခုစီအား အလျားတူညီသော မျဉ်းပိုင်းအခွဲများအဖြစ် ပိုင်းခြားသွားမည်ဖြစ်ပြီး အလျားစုစုပေါင်း၏ အပိုင်း (fraction) သည် ပေးထားသော အပိုင်း (fraction) နှင့် အနီးစပ်ဆုံးတူညီနေပါမည်။ densify fraction parameter ကိုလျော့ချလိုက်ပါက ပြန်လည်ရရှိလာမည့်အကွာအဝေးသည် ဂျီဩမေတြီများအတွက် Hausdorff အကွာအဝေးအမှန်နှင့် နီးစပ်လာစေမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - hausdorff_distance(geometry1, geometry2, [densify_fraction])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်

   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
       * **densify_fraction** - သိပ်သည်းစေမည့် အပိုင်း အရေအတွက်
   * - ဥပမာများ
     - * ``hausdorff_distance( geometry1:= geom_from_wkt('LINESTRING (0 0, 2 1)'),geometry2:=geom_from_wkt('LINESTRING (0 0, 2 0)'))`` → 2
       * ``hausdorff_distance( geom_from_wkt('LINESTRING (130 0, 0 0, 0 150)'),geom_from_wkt('LINESTRING (10 10, 10 150, 130 10)'))`` → 14.142135623
       * ``hausdorff_distance( geom_from_wkt('LINESTRING (130 0, 0 0, 0 150)'),geom_from_wkt('LINESTRING (10 10, 10 150, 130 10)'),0.5)`` → 70.0


.. end_hausdorff_distance_section

.. _expression_function_GeometryGroup_inclination:


inclination
...........

ဤ function သည် point_a တွင် ဦးထိပ်တည့်တည့်အမှတ် (zenith) (0) မှ အပေါ်အောက်တည့်အနေအထား (nadir) (180) ဖြင့် point_b သို့ တိုင်းတာသော စောင်းခြင်း/အစောင်း ကို ပြန်ထုတ်ပေးပါသည်။ 


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - inclination(point_a, point_b)
   * - Argument များ
     - * **point_a** - point ဂျီဩမေတြီ
       * **point_b** - point ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 5 ) )`` → 0.0
       * ``inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 0 ) )`` → 90.0
       * ``inclination( make_point( 5, 10, 0 ), make_point( 50, 100, 0 ) )`` → 90.0
       * ``inclination( make_point( 5, 10, 0 ), make_point( 5, 10, -5 ) )`` → 180.0


.. end_inclination_section

.. _expression_function_GeometryGroup_interior_ring_n:

interior_ring_n
...............

ဤ function သည် polygon ဂျီဩမေတြီတစ်ခုမှ သီးခြား အတွင်းနယ်နိမိတ်ကွင်းတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ သို့မဟုတ် အကယ်၍ ဂျီဩမေတြီသည် polygon မဟုတ်ပါက NULL ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - interior_ring_n(geometry, index)
   * - Argument များ
     - * **geometry** - polygon ဂျီဩမေတြီ
       * **index** - ပြန်လည်ရရှိလာမည့် အတွင်းနယ်နိမိတ်ကွင်း၏အညွှန်းကိန်းဖြစ်ပြီး 1 သည် ပထမဆုံး အတွင်းနယ်နိမိတ်ကွင်းဖြစ်ပါသည်။ 
   * - ဥပမာများ
     - * ``geom_to_wkt(interior_ring_n(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1),(-1 -1, 4 0, 4 2, 0 2, -1 -1))'),1))`` → 'LineString (-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))'

.. end_interior_ring_n_section

.. _expression_function_GeometryGroup_intersection:

intersection
............

ဤ function သည် ဂျီဩမေတြီနှစ်ခု၏ ထိဖြတ်နေသော အပိုင်းကို ကိုယ်စားပြုသည့် ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ 

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - intersection(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt( intersection( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4)' ) ) )`` → 'LINESTRING(3 3, 4 4)'
       * ``geom_to_wkt( intersection( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'MULTIPOINT(3.5 3.5, 4 5)' ) ) )`` → 'POINT(3.5 3.5)'


.. end_intersection_section

.. _expression_function_GeometryGroup_intersects:


intersects
..........

ဤ function သည် ဂျီဩမေတြီတစ်ခုသည် အခြားတစ်ခုနှင့် ထိဖြတ်ခြင်းရှိ/မရှိကို စစ်ဆေးပေးပါသည်။ ဂျီဩမေတြီများသည် တည်နေရာအားဖြင့် ထိဖြတ်နေလျှင် (နေရာအပိုင်းတစ်ခုခုကို ဝေမျှပိုင်ဆိုင်ထားလျှင်) TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပြီး မထိဖြတ်နေကြလျှင် false ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။ 


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - intersects(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``intersects( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )`` → TRUE
       * ``intersects( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'POINT(5 5)' ) )`` → FALSE

.. end_intersects_section

.. _expression_function_GeometryGroup_intersects_bbox:


intersects_bbox
...............

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ စတုဂံပုံအကျယ်အဝန်းနယ် (bounding box) သည် အခြား ဂျီဩမေတြီတစ်ခု၏ စတုဂံပုံအကျယ်အဝန်းနယ် (bounding box) နှင့် ထပ်နေခြင်း ရှိ/မရှိ စစ်ဆေးပေးပါသည်။ အကယ်၍ ဂျီဩမေတြီများသည် သတ်မှတ်ထားသော စတုဂံပုံအကျယ်အဝန်းနယ်တွင် တည်နေရာအရ ထိဖြတ်နေလျှင် TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပြီး ထိဖြတ်မနေပါက false ကို ပြန်ထုတ်ပေးမည် ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - intersects_bbox(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ 
     - * ``intersects_bbox( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )`` → TRUE
       * ``intersects_bbox( geom_from_wkt( 'POINT(6 5)' ), geom_from_wkt( 'POLYGON((3 3, 4 4, 5 5, 3 3))' ) )`` → FALSE


.. end_intersects_bbox_section

.. _expression_function_GeometryGroup_is_closed:

is_closed
.........

ဤ funcion သည် မျဉ်းကြောင်းတစ်ကြောင်း (line string) သည် မျဉ်းပိတ်ဖြစ်နေလျှင် (စမှတ် နှင့် ဆုံးမှတ်သည် ထိစပ်နေလျှင်) TRUE ကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ မျဉ်းကြောင်းသည် မျဉ်းပိတ်ဖြစ်မနေပါက false ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။ အကယ်၍ ဂျီဩမေတြီသည် မျဉ်းတစ်ကြောင်း မဟုတ်ပါက ရလဒ်သည် NULL ဖြစ်နေပေလိမ့်မည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_closed(geometry)
   * - Argument များ
     - * **geometry** - line string ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``is_closed(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))`` → FALSE
       * ``is_closed(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2, 0 0)'))`` → TRUE


.. end_is_closed_section

.. _expression_function_GeometryGroup_is_empty:


is_empty
........

ဤ function သည် ကိုဩဒိနိတ်စနစ်များမပါရှိသော ဂျီဩမေတြီတစ်ခု ဖြစ်နေလျှင် TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပြီး အကယ်၍ ကိုဩဒိနိတ်စနစ်များပါရှိနေသော ဂျီဩမေတြီတစ်ခုဖြစ်ပါက false ကို ပြန်ထုတ်ပေးပါမည်။ ဂျီဩမေတြီမရှိပါက NULL ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။ is_empty_or_null ကိုလည်း ကြည့်ရှုနိုင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_empty(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``is_empty(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))`` → FALSE
       * ``is_empty(geom_from_wkt('LINESTRING EMPTY'))`` → TRUE
       * ``is_empty(geom_from_wkt('POINT(7 4)'))`` → FALSE
       * ``is_empty(geom_from_wkt('POINT EMPTY'))`` → TRUE

.. end_is_empty_section

.. _expression_function_GeometryGroup_is_empty_or_null:


is_empty_or_null
................

ဤ function သည် ဂျီဩမေတြီတစ်ခုသည် NULL သို့မဟုတ် ကိုဩဒိနိတ်မပါရှိလျှင် TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပြီး ယင်းသို့မဟုတ်ပါက false ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။ ဤ function သည် '@geometry IS NULL or is_empty(@geometry)' ဟူသော expression ကဲ့သို့ပင် ဖြစ်ပါသည်။ 


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_empty_or_null(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``is_empty_or_null(NULL)`` → TRUE
       * ``is_empty_or_null(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))`` → FALSE
       * ``is_empty_or_null(geom_from_wkt('LINESTRING EMPTY'))`` → TRUE
       * ``is_empty_or_null(geom_from_wkt('POINT(7 4)'))`` → FALSE
       * ``is_empty_or_null(geom_from_wkt('POINT EMPTY'))`` → TRUE


.. end_is_empty_or_null_section

.. _expression_function_GeometryGroup_is_multipart:

is_multipart
............

ဤ function သည် ဂျီဩမေတြီတစ်ခုတွင် အစိတ်အပိုင်းများစွာပါဝင်သော အမျိုးအစားဖြစ်ပါက TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_multipart(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ 
     - * ``is_multipart(geom_from_wkt('MULTIPOINT ((0 0),(1 1),(2 2))'))`` → TRUE
       * ``is_multipart(geom_from_wkt('POINT (0 0)'))`` → FALSE


.. end_is_multipart_section

.. _expression_function_GeometryGroup_is_valid:


is_valid
........

ဤ function တွင် ဂျီဩမေတြီတစ်ခုသည် OGC စည်းမျဉ်းများအရ နှစ်ဖက်မြင်ပုံစံဖြင့် ကောင်းစွာတည်ဆောက်ထားပြီး ခိုင်လုံမှုရှိပါက TRUE ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - is_valid(geometry)
   * - Argument များ 
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ 
     - * ``is_valid(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2, 0 0)'))`` → TRUE
       * ``is_valid(geom_from_wkt('LINESTRING(0 0)'))`` → FALSE


.. end_is_valid_section

.. _expression_function_GeometryGroup_$length:


$length
.......

ဤ function သည် မျဉ်းကြောင်းတစ်ကြောင်း၏ အလျားကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ polygon တစ်ခု၏ နယ်နိမိတ်မျဉ်းအလျားကို သိလိုလျှင် ဤ function အစား $perimeter ကို အသုံးပြုပါ။ ဤ function ဖြင့် တွက်ချက်ရရှိသော အလျားသည် လက်ရှိ project ၏ စက်လုံးပုံ (ellipsoid) setting နှင့် အကွာအဝေးယူနစ် setting နှစ်မျိုးစလုံးအတိုင်း ဖြစ်ပါသည်။ ဥပမာအားဖြင့် project ကို စက်လုံးပုံ (ellipsoid) အဖြစ် သတ်မှတ်ထားပါက တွက်ချက်မှုမှရရှိလာသောအလျားသည် ellipsoidal ဖြစ်နေမည်ဖြစ်ပြီး စက်လုံးပုံ (ellipsoid) ကိုသတ်မှတ်မထားပါက တွက်ချက်ရရှိသော အလျားသည် ပြင်ညီအလျား (planimetric) ဖြစ်နေပေလိမ့်မည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $length
   * - ဥပမာများ 
     - * ``$length`` → 42.4711


.. end_$length_section

.. _expression_function_GeometryGroup_length:


length
......

ဤ function သည် စာသားတစ်ခုထဲရှိ စာလုံးအရေအတွက် သို့မဟုတ် linestring ဂျီဩမေတြီတစ်ခု၏ အလျားကို ပြန်ထုတ်ပေးပါသည်။

**String variant (စာသား မူကွဲ)**

စာသားတစ်ခုထဲရှိ စာလုံးအရေအတွက်ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - length(string)
   * - Argument များ
     - * **string** - စာလုံးအရေအတွက်ကို တွက်ချက်မည့် စာသား
   * - ဥပမာများ
     - * ``length('hello')`` → 5


**Geometry variant (ဂျီဩမေတြီ မူကွဲ)**

ဤ function သည် line ဂျီဩမေတြီတစ်ခု၏ အလျားကို တွက်ချက်ပေးပါသည်။ တွက်ချက်မှုများကို ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) ရှိ ပြင်ညီအတိုင်း တွက်ချက်ပြီး ရရှိလာသော အလျား၏ ယူနစ်များသည် ထို SRS ၏ ယူနစ်များနှင့် ကိုက်ညီနေမည်ဖြစ်သည်။ $length funcion နှင့် မတူညီသည့်အချက်မှာ $length သည် project ၏ စက်လုံးပုံ (ellipsoid) နှင့် အကွာအဝေးယူနစ် setting များအတိုင်း စက်လုံးဆိုင်ရာ (ellipsoidal) တွက်ချက်မှုများကို ပြုလုပ်ခြင်းဖြစ်သည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - length(geometry)
   * - Argument များ
     - * **geometry** - line ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``length(geom_from_wkt('LINESTRING(0 0, 4 0)'))`` → 4.0

.. end_length_section

.. _expression_function_GeometryGroup_length3D:


length3D
........

ဤ function သည် line ဂျီဩမေတြီတစ်ခု၏ 3D အလျားကို တွက်ချက်ပေးပါသည်။ ဂျီဩမေတြီသည် 3D line အရာဝတ္ထုမဟုတ်ပါက 2D အလျားကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။ တွက်ချက်မှုများကို ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) ရှိ ပြင်ညီအတိုင်း တွက်ချက်ပြီး ရရှိလာသော အလျား၏ ယူနစ်များသည် ထို SRS ၏ ယူနစ်များနှင့် ကိုက်ညီနေမည်ဖြစ်သည်။ $length function မှ ရရှိလာသည့် တွက်ချက်မှုများနှင့် မတူညီသည့်အချက်မှာ $length သည် project ၏ စက်လုံးပုံ (ellipsoid) နှင့် အကွာအဝေးယူနစ် setting များအတိုင်း စက်လုံးဆိုင်ရာ (ellipsoidal) တွက်ချက်မှုများကို ပြုလုပ်ခြင်းဖြစ်သည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - length3D(geometry)
   * - Argument များ
     - * **geometry** - line ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``length3D(geom_from_wkt('LINESTRINGZ(0 0 0, 3 0 4)'))`` → 5.0

.. end_length3D_section

.. _expression_function_GeometryGroup_line_interpolate_angle:


line_interpolate_angle
......................

ဤ function သည် linestring ဂျီဩမေတြီတစ်လျှောက် သတ်မှတ်ထားသော အကွာအဝေးတစ်ခု၌ ထိုဂျီဩမေတြီနှင့် အပြိုင် ထောင့်တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ ထောင့်များသည် မြောက်အရပ်မှ နာရီလက်တံအတိုင်း ဒီဂရီဖြင့် တိုင်းတာခြင်းဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - line_interpolate_angle(geometry, distance)
   * - Argument များ
     - * **geometry** - linestring ဂျီဩမေတြီတစ်ခု
       * **distance** - ထောင့်တွက်ထုတ်ပေးမည့် line တလျှောက်အကွာအဝေး                       
   * - ဥပမာများ
     - * ``line_interpolate_angle(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),distance:=5)`` → 90.0


.. end_line_interpolate_angle_section

.. _expression_function_GeometryGroup_line_interpolate_point:


line_interpolate_point
......................

ဤ function သည် linestring ဂျီဩမေတြီတစ်ခုတလျှောက်တွင် သတ်မှတ်ထားသည့် အကွာအဝေး၌ တွက်ထုတ်ထားသည့် point ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - line_interpolate_point(geometry, distance)
   * - Argument များ
     - * **geometry** - linestring ဂျီဩမေတြီတစ်ခု
       * **distance** - line တလျှောက် တွက်ထုတ်မည့် အကွာအဝေး
   * - ဥပမာများ
     - * ``geom_to_wkt(line_interpolate_point(geometry:=geom_from_wkt('LineString(0 0, 8 0)'), distance:=5))`` → 'Point (5 0)'
       * ``geom_to_wkt(line_interpolate_point(geometry:=geom_from_wkt('LineString(0 0, 1 1, 2 0)'), distance:=2.1))`` → 'Point (1.48492424 0.51507576)'
       * ``geom_to_wkt(line_interpolate_point(geometry:=geom_from_wkt('LineString(0 0, 1 0)'), distance:=2))`` → NULL


.. end_line_interpolate_point_section

.. _expression_function_GeometryGroup_line_locate_point:


line_locate_point
.................

ဤ function သည် သတ်မှတ်ထားသည့် point ဂျီဩမေတြီတစ်ခုဆီသို့ linestring မှအနီးစပ်ဆုံးတည်နေရာနှင့် သက်ဆိုင်သည့် linestring တလျှောက် အကွာအ‌ဝေးကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - line_locate_point(geometry, point)
   * - Argument များ
     - * **geometry** - linestring ဂျီဩမေတြီတစ်ခု
       * **point** - linestring ပေါ်မှ အနီးစပ်ဆုံးတည်နေရာကို ညွှန်ပြပေးမည့် point ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``line_locate_point(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),point:=geom_from_wkt('Point(5 0)'))`` → 5.0


.. end_line_locate_point_section

.. _expression_function_GeometryGroup_line_merge:


line_merge
..........

ဤ function သည် ထည့်သွင်းလိုက်သည့် ဂျီဩမေတြီမှ ချိတ်ဆက်နေသည့် မျဉ်းကြောင်းများကို မျဉ်းကြောင်းတစ်ခုတည်းအဖြစ် ပေါင်းစည်းထားသော LineString ဂျီဩမေတြီတစ်ခု သို့မဟုတ် MultiLineString ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ ဤ function သည် အကယ်၍ LineString/MultiLineString ဂျီဩမေတြီတစ်ခုကို မဟုတ်ပါက Null ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - line_merge(geometry)
   * - Argument များ
     - * **geometry** - LineString/MultiLineString ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt(line_merge(geom_from_wkt('MULTILINESTRING((0 0, 1 1),(1 1, 2 2))')))`` → 'LineString(0 0,1 1,2 2)'
       * ``geom_to_wkt(line_merge(geom_from_wkt('MULTILINESTRING((0 0, 1 1),(11 1, 21 2))')))`` → 'MultiLineString((0 0, 1 1),(11 1, 21 2)'


.. end_line_merge_section

.. _expression_function_GeometryGroup_line_substring:


line_substring
..............

ဤ function သည် သတ်မှတ်ထားသည့် စမှတ်နှင့်ဆုံးမှတ်အကြား အကွာအဝေး (မျဉ်းကြောင်းအစမှ တိုင်းတာထားသော) အတွင်း ကျရောက်သည့် မျဉ်းကြောင်း(သို့မဟုတ် မျဉ်းကွေး) ၏ အပိုင်းတစ်ခု ကို ပြန်ထုတ်ပေးပါသည်။ Z နှင့် M တန်ဖိုးများကို ရှိပြီးသားတန်ဖိုးများမှ linear (အစဉ်လိုက်) အတိုင်း ဖြည့်စွက်တွက်ချက် (interpolate) ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - line_substring(geometry, start_distance, end_distance)
   * - Argument များ
     - * **geometry** - မျဉ်းကြောင်း သို့မဟုတ် မျဉ်းကွေး ဂျီဩမေတြီတစ်ခု
       * **start_distance** - မျဉ်းအခွဲ၏ စမှတ်သို့ အကွာအဝေး
       * **end_distance** - မျဉ်းအခွဲ၏ ဆုံးမှတ်သို့ အကွာအဝေး
   * - ဥပမာများ
     - * ``geom_to_wkt(line_substring(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),start_distance:=2,end_distance:=6))`` → 'LineString (2 0,6 0)'


.. end_line_substring_section

.. _expression_function_GeometryGroup_m:


m
.

ဤ function သည် point ဂျီဩမေတြီတစ်ခု၏ m (အတိုင်းအတာ) တန်ဖိုးကို ပြန်ထုတ်ပေးပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - m(geometry)
   * - Argument များ)
     - * **geometry** - point ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``m( geom_from_wkt( 'POINTM(2 5 4)' ) )`` → 4

.. end_m_section

.. _expression_function_GeometryGroup_m_at:


m_at
....

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ m ကိုဩဒိနိတ်ကို ရယူပေးပါသည်။ သို့မဟုတ် ထိုဂျီဩမေတြီတွင် m တန်ဖိုးမရှိပါက NULL ကို ရရှိမည်ဖြစ်သည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - m_at(geometry, vertex)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
       * **vertex** - ဂျီဩမေတြီ၏ မျဉ်းအဆစ်ညွှန်းကိန်း (အညွှန်းကိန်းများသည် 0 မှ စတင်ပါသည်၊ အနုတ်တန်ဖိုးများကို နောက်ဆုံးအညွှန်းကိန်းမှ စတင်လျှင်အသုံးပြုပြီး -1 မှ စတင်သည်) 
   * - ဥပမာများ
     - * ``m_at(geom_from_wkt('LineStringZM(0 0 0 0, 10 10 0 5, 10 10 0 0)'), 1)`` → 5


.. end_m_at_section

.. _expression_function_GeometryGroup_m_max:

m_max
.....

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အများဆုံး m (အတိုင်းအတာ) တန်ဖိုးကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - m_max(geometry)
   * - Argument များ
     - * **geometry** - m တန်ဖိုးများပါဝင်သော ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``m_max( make_point_m( 0,0,1 ) )`` → 1
       * ``m_max(make_line( make_point_m( 0,0,1 ), make_point_m( -1,-1,2 ), make_point_m( -2,-2,0 ) ) )`` → 2

.. end_m_max_section

.. _expression_function_GeometryGroup_m_min:


m_min
.....

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အနည်းဆုံး m(အတိုင်းအတာ) တန်ဖိုးကို ပြန်ထုတ်ပေးပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - m_min(geometry)
   * - Argument များ
     - * **geometry** - m တန်ဖိုးများပါဝင်သော ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``m_min( make_point_m( 0,0,1 ) )`` → 1
       * ``m_min(make_line( make_point_m( 0,0,1 ), make_point_m( -1,-1,2 ), make_point_m( -2,-2,0 ) ) )`` → 0


.. end_m_min_section

.. _expression_function_GeometryGroup_main_angle:


main_angle
..........

ဤ function သည် ဂျီဩမေတြီကို လုံးလုံးလျားလျားဖုံးအုပ်သော အသေးဆုံးထောင့်မှန်စတုဂံပုံ အကျယ်အဝန်းနယ်၏ ရှည်သောဝင်ရိုး (မြောက်အရပ်မှ နာရီလက်တံအတိုင်းတိုင်းတာသည့် ထောင့်ဒီဂရီ) ၏ ထောင့်ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - main_angle(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``main_angle(geom_from_wkt('Polygon ((321577 129614, 321581 129618, 321585 129615, 321581 129610, 321577 129614))'))`` → 38.66


.. end_main_angle_section

.. _expression_function_GeometryGroup_make_circle:

make_circle
...........

ဤ funcion သည် စက်ဝိုင်းပုံ polygon တစ်ခုကို ဖန်တီးပေးပါသည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_circle(center, radius, [segments=36])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **center** - စက်ဝိုင်း၏ အလယ်မှတ်
       * **radius** - စက်ဝိုင်း၏ အချင်းဝက်
       * **segments** - Polygon မျဉ်းပိုင်းများအတွက် optional ဖြစ်သော argument ဖြစ်သည်။ Default အားဖြင့် ဤတန်ဖိုးမှာ 36 ဖြစ်သည်
   * - ဥပမာများ
     - * ``geom_to_wkt(make_circle(make_point(10,10), 5, 4))`` → 'Polygon ((10 15, 15 10, 10 5, 5 10, 10 15))'
       * ``geom_to_wkt(make_circle(make_point(10,10,5), 5, 4))`` → 'PolygonZ ((10 15 5, 15 10 5, 10 5 5, 5 10 5, 10 15 5))'
       * ``geom_to_wkt(make_circle(make_point(10,10,5,30), 5, 4))`` → 'PolygonZM ((10 15 5 30, 15 10 5 30, 10 5 5 30, 5 10 5 30, 10 15 5 30))'


.. end_make_circle_section

.. _expression_function_GeometryGroup_make_ellipse:

make_ellipse
............

ဤ function သည် ဘဲဥပုံ polygon တစ်ခုကို ဖန်တီးပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_ellipse(center, semi_major_axis, semi_minor_axis, azimuth, [segments=36])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **center** - ဘဲဥပုံ၏ အလယ်မှတ်
       * **semi_major_axis** - ဘဲဥပုံ၏ semi-major (တစ်ပိုင်းတစ်စအဓိကဖြစ်သော) ဝင်ရိုး
       * **semi_minor_axis** - ဘဲဥပုံ၏ semi-minor (တစ်ပိုင်းတစ်စအသေးအဖွဲဖြစ်သော) ဝင်ရိုး
       * **azimuth** - ဘဲဥပုံ၏ဦးတည်ရာ
       * **segments** - Polygon မျဉ်းပိုင်းများအတွက် optional ဖြစ်သော argument ဖြစ်သည်။ Default အားဖြင့် ဤတန်ဖိုးမှာ 36 ဖြစ်သည်
   * - ဥပမာများ
     - * ``geom_to_wkt(make_ellipse(make_point(10,10), 5, 2, 90, 4))`` → 'Polygon ((15 10, 10 8, 5 10, 10 12, 15 10))'
       * ``geom_to_wkt(make_ellipse(make_point(10,10,5), 5, 2, 90, 4))`` → 'PolygonZ ((15 10 5, 10 8 5, 5 10 5, 10 12 5, 15 10 5))'
       * ``geom_to_wkt(make_ellipse(make_point(10,10,5,30), 5, 2, 90, 4))`` → 'PolygonZM ((15 10 5 30, 10 8 5 30, 5 10 5 30, 10 12 5 30, 15 10 5 30))'


.. end_make_ellipse_section

.. _expression_function_GeometryGroup_make_line:

make_line
.........

ဤ function သည် point ဂျီဩမေတြီ စီးရီး (series) တစ်ခုမှ line ဂျီဩမေတြီတစ်ခုကို ဖန်တီးပေးပါသည်။

**List of arguments variant (Argument မူကွဲများစာရင်း)**

ဤ function ကို အသုံးပြုရာတွင် Line မျဉ်းအဆစ်များကို သီးခြား argument များအဖြစ် သတ်မှတ်ထားပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_line(point1, point2, ...)
   * - Argument များ
     - * **point** - point ဂျီဩမေတြီ (သို့မဟုတ် point များ array)
   * - ဥပမာများ
     - * ``geom_to_wkt(make_line(make_point(2,4),make_point(3,5)))`` → 'LineString (2 4, 3 5)'
       * ``geom_to_wkt(make_line(make_point(2,4),make_point(3,5),make_point(9,7)))`` → 'LineString (2 4, 3 5, 9 7)'

**Array variant (Array မူကွဲ)**

Line မျဉ်းအဆစ်များကို point များ array တစ်ခုအဖြစ် သတ်မှတ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_line(array)
   * - Argument များ
     - * **array** - point များ array
   * - ဥပမာများ
     - * ``geom_to_wkt(make_line(array(make_point(2,4),make_point(3,5),make_point(9,7))))`` → 'LineString (2 4, 3 5, 9 7)'


.. end_make_line_section

.. _expression_function_GeometryGroup_make_point:

make_point
..........

ဤ function သည် x နှင့် y (optional ဖြစ်သော z နှင့် m) တန်ဖိုးတစ်ခုမှ point ဂျီဩမေတြီတစ်ခုကို ဖန်တီးပေးပါသည်။ 

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_point(x, y, [z], [m])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **x** - Point ၏ x ကိုဩဒိနိတ်
       * **y** - Point ၏ y ကိုဩဒိနိတ်
       * **z** - optional ဖြစ်သော Point ၏ z ကိုဩဒိနိတ်
       * **m** - optional ဖြစ်သော Point ၏ m ကိုဩဒိနိတ်
   * - ဥပမာများ
     - * ``geom_to_wkt(make_point(2,4))`` → 'Point (2 4)'
       * ``geom_to_wkt(make_point(2,4,6))`` → 'PointZ (2 4 6)'
       * ``geom_to_wkt(make_point(2,4,6,8))`` → 'PointZM (2 4 6 8)'


.. end_make_point_section

.. _expression_function_GeometryGroup_make_point_m:

make_point_m
............

ဤ function သည် x ၊ y ကိုဩဒိနိတ်နှင့် m တန်ဖိုးတစ်ခုမှ point ဂျီဩမေတြီတစ်ခုကို ဖန်တီးပေးပါသည်။ 

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_point_m(x, y, m)
   * - Argument များ
     - * **x** - Point ၏ x ကိုဩဒိနိတ်
       * **y** - Point ၏ y ကိုဩဒိနိတ်
       * **m** - Point ၏ m တန်ဖိုး
   * - ဥပမာများ
     - * ``geom_to_wkt(make_point_m(2,4,6))`` → 'PointM (2 4 6)'


.. end_make_point_m_section

.. _expression_function_GeometryGroup_make_polygon:

make_polygon
............

ဤ function သည် အပြင်နယ်နိမိတ်ကွင်းတစ်ခုနှင့် optional ဖြစ်သော အတွင်းနယ်နိမိတ်ကွင်း စီးရီးများ ပါဝင်သည့် ဂျီဩမေတြီများမှ polygon ဂျီဩမေတြီတစ်ခုကို ဖန်တီးပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_polygon(outerRing, [innerRing1], [innerRing2], ...)

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **outerRing** - Polygon ၏အပြင်နယ်နိမိတ်ကွင်းအတွက် အပိတ်ဖြစ်နေသော line ဂျီဩမေတြီ
       * **innerRing** - Optional ဖြစ်သည့် အတွင်းနယ်နိမိတ်ကွင်းအတွက် အပိတ်ဖြစ်နေသော line ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``geom_to_wkt(make_polygon(geom_from_wkt('LINESTRING( 0 0, 0 1, 1 1, 1 0, 0 0 )')))`` → 'Polygon ((0 0, 0 1, 1 1, 1 0, 0 0))'
       * ``geom_to_wkt(make_polygon(geom_from_wkt('LINESTRING( 0 0, 0 1, 1 1, 1 0, 0 0 )'),geom_from_wkt('LINESTRING( 0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2 0.1, 0.1 0.1 )'),geom_from_wkt('LINESTRING( 0.8 0.8, 0.8 0.9, 0.9 0.9, 0.9 0.8, 0.8 0.8 )')))`` → 'Polygon ((0 0, 0 1, 1 1, 1 0, 0 0),(0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2 0.1, 0.1 0.1),(0.8 0.8, 0.8 0.9, 0.9 0.9, 0.9 0.8, 0.8 0.8))'


.. end_make_polygon_section

.. _expression_function_GeometryGroup_make_rectangle_3points:

make_rectangle_3points
......................

ဤ function သည် point သုံးခုမှ ထောင့်မှန်စတုဂံတစ်ခုကို ဖန်တီးပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_rectangle_3points(point1, point2, point3, [option=0])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **point1** - ပထမ point
       * **point2** - ဒုတိယ point
       * **point3** - တတိယ point
       * **option** - ထောင့်မှန်စတုဂံတည်ဆောက်ရန် optional argument တစ်ခုဖြစ်သည်။ Default အားဖြင့် ထိုတန်ဖိုးမှာ 0 ဖြစ်ပါသည်။ တန်ဖိုးမှာ 0 (distance) သို့မဟုတ် 1 (projected) ဖြစ်နိုင်ပါသည်။ ရွေးချယ်မှု distance - ဒုတိယအကွာအဝေးသည် ဒုတိယမြောက် point နှင့် တတိယမြောက် point အကြား အကွာအဝေးနှင့် အတူတူပင်ဖြစ်သည်။ ရွေးချယ်မှု projected - ဒုတိယအကွာအဝေးသည် မျဉ်းပိုင်း သို့မဟုတ် တိုးချဲ့သည့်မျဉ်းပေါ်ရှိ တတိယမြောက် point အပေါ်တွင် ထောင့်မှန်ကျ ပုံရိပ်ချအကွာအဝေးနှင့် အတူတူပင်ဖြစ်သည်။ 
   * - ဥပမာများ
     - * ``geom_to_wkt(make_rectangle_3points(make_point(0, 0), make_point(0,5), make_point(5, 5), 0))`` → 'Polygon ((0 0, 0 5, 5 5, 5 0, 0 0))'
       * ``geom_to_wkt(make_rectangle_3points(make_point(0, 0), make_point(0,5), make_point(5, 3), 1))`` → 'Polygon ((0 0, 0 5, 5 5, 5 0, 0 0))'


.. end_make_rectangle_3points_section

.. _expression_function_GeometryGroup_make_regular_polygon:


make_regular_polygon
....................

ဤ function သည် အနားညီ polygon တစ်ခုကို ဖန်တီးပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_regular_polygon(center, radius, number_sides, [circle=0])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **center** - အနားညီ polygon ၏ အလယ်မှတ်
       * **radius** - ဒုတိယမြောက် point ဖြစ်သည်။ အကယ်၍ အနားညီ polygon သည် စက်ဝိုင်းအတွင်း ဝန်းထိခြင်း (inscribed) ဖြစ်နေပါက ပထမ point ဖြစ်သည်။ အနားညီ‌ polygon သည် စက်ဝိုင်းအပြင်တွင် ဝန်းထိခြင်း (circumscribed) များဖြစ်နေပါက ပထမအနား၏ အလယ်မှတ်ဖြစ်သည်။
       * **number_sides** - အနားညီ polygon ၏ အနားများ/အစွန်းများ အရေအတွက်
       * **circle** - အနားညီ polygon ကို တည်ဆောက်ရန် optional ဖြစ်သော argument ဖြစ်သည်။ Default အားဖြင့် တန်ဖိုးမှာ 0 ဖြစ်သည်။ ထိုတန်ဖိုးသည် 0 (inscribed) သို့မဟုတ် 1 (circumscribed) ဖြစ်နိုင်သည်။
   * - ဥပမာများ
     - * ``geom_to_wkt(make_regular_polygon(make_point(0,0), make_point(0,5), 5))`` → 'Polygon ((0 5, 4.76 1.55, 2.94 -4.05, -2.94 -4.05, -4.76 1.55, 0 5))'
       * ``geom_to_wkt(make_regular_polygon(make_point(0,0), project(make_point(0,0), 4.0451, radians(36)), 5))`` → 'Polygon ((0 5, 4.76 1.55, 2.94 -4.05, -2.94 -4.05, -4.76 1.55, 0 5))'

.. end_make_regular_polygon_section

.. _expression_function_GeometryGroup_make_square:

make_square
...........

ဤ function သည် ထောင့်ဖြတ်မျဉ်းတစ်ခုမှ စတုရန်းတစ်ခုဖန်တီးပေးပါသည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_square(point1, point2)
   * - Argument များ
     - * **point1** - ထောင့်ဖြတ်မျဉ်း၏ ပထမ point
       * **point2** - ထောင့်ဖြတ်မျဉ်း၏ ဒုတိယ point
   * - ဥပမာများ
     - * ``geom_to_wkt(make_square( make_point(0,0), make_point(5,5)))`` → 'Polygon ((0 0, -0 5, 5 5, 5 0, 0 0))'
       * ``geom_to_wkt(make_square( make_point(5,0), make_point(5,5)))`` → 'Polygon ((5 0, 2.5 2.5, 5 5, 7.5 2.5, 5 0))'


.. end_make_square_section

.. _expression_function_GeometryGroup_make_triangle:


make_triangle
.............

ဤ function သည် တြိဂံပုံ polygon တစ်ခုကို ဖန်တီးပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_triangle(point1, point2, point3)
   * - Argument များ
     - * **point1** - တြိဂံ၏ ပထမ point
       * **point2** - တြိဂံ၏ ဒုတိယ point
       * **point3** - တြိဂံ၏ တတိယ point
   * - ဥပမာများ
     - * ``geom_to_wkt(make_triangle(make_point(0,0), make_point(5,5), make_point(0,10)))`` → 'Triangle ((0 0, 5 5, 0 10, 0 0))'
       * ``geom_to_wkt(boundary(make_triangle(make_point(0,0), make_point(5,5), make_point(0,10))))`` → 'LineString (0 0, 5 5, 0 10, 0 0)'


.. end_make_triangle_section

.. _expression_function_GeometryGroup_make_valid:


make_valid
..........

ဤ function သည် ဆီလျော်မှုရှိသော ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ သို့မဟုတ် ဂျီဩမေတြီကို ဆီလျော်မှုရှိအောင် ပြုလုပ်နိုင်ခြင်း မရှိပါက ဗလာဖြစ်နေသော ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - make_valid(geometry, [method=structure], [keep_collapsed=false])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **method** - ပြန်လည်ပြုပြင်ပေးသည့် algorithm ဖြစ်သည်။ ၎င်းသည် 'structure'(ဖွဲ့စည်းပုံဆိုင်ရာ) အရ သို့မဟုတ် 'linework' (မျဉ်းကြောင်းဆိုင်ရာ) အရ ဖြစ်နိုင်ပါသည်။ 'linework' နည်းလမ်းသည် နယ်နိမိတ်ကွင်းများအားလုံးကို အဆစ်များပါသော မျဉ်းကြောင်းများအဖြစ် ပေါင်းစည်းပြီးနောက် အဆိုပါ မျဉ်းကြောင်းပုံမှ ဆီလျော်မှုရှိသော polygon များကို ထုတ်ယူပေးပါသည်။ 'structure' နည်းလမ်းမှာမူ နယ်နိမိတ်ကွင်းများအားလုံးကို ဆီလျော်မှုရှိအောင် ဦးစွာ ပြုလုပ်ပြီးနောက် ပြင်ပကွင်း (shell) များကို ပေါင်းစပ်ကာ အပေါက်များ (holes) ကို နှုတ်ယူပြီး ဆီလျော်မှုရှိသော ရလဒ်ကို ထုတ်ပေးခြင်းဖြစ်သည်။ Shell များနှင့် hole များကို မှန်မှန်ကန်ကန် အမျိုးအစားခွဲထားသည်ဟု ယူဆပါသည်။
       * **keep_collapsed** - True ဟုသတ်မှတ်ထားပါက တစ်ဆင့်နိမ့်သော အတိုင်းအတာဂုဏ်သတ္တိ (dimensionality) တစ်ခုအဖြစ်သို့ ကျဆင်းသွားသော အစိတ်အပိုင်းများကို ဆက်လက်ထားရှိပေးမည်ဖြစ်သည်။ ဥပမာအားဖြင့် နယ်နိမိတ်ကွင်းတစ်ခုသည် မျဉ်းကြောင်းတစ်ကြောင်းအဖြစ် ကျဆင်းသွားပြီး မျဉ်းကြောင်းတစ်ကြောင်းသည် point တစ်ခုအဖြစ်သို့ ကျဆင်းသွားခြင်းဖြစ်သည်။
   * - ဥပမာများ
     - * ``geom_to_wkt(make_valid(geom_from_wkt('POLYGON((3 2, 4 1, 5 8, 3 2, 4 2))')))`` → 'Polygon ((3 2, 5 8, 4 1, 3 2))'
       * ``geom_to_wkt(make_valid(geom_from_wkt('POLYGON((3 2, 4 1, 5 8, 3 2, 4 2))'), 'linework'))`` → 'GeometryCollection (Polygon ((5 8, 4 1, 3 2, 5 8)),LineString (3 2, 4 2))'
       * ``geom_to_wkt(make_valid(geom_from_wkt('POLYGON((3 2, 4 1, 5 8))'), method:='linework'))`` → 'Polygon ((3 2, 4 1, 5 8, 3 2))'
       * ``make_valid(geom_from_wkt('LINESTRING(0 0)'))`` → ဗလာဖြစ်နေသော ဂျီဩမေတြီ


.. end_make_valid_section

.. _expression_function_GeometryGroup_minimal_circle:


minimal_circle
..............

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ minimal enclosing circle (အငယ်ဆုံး ဝိုင်းကာထားသော စက်ဝိုင်း) ကို ရရှိစေပါသည်။ ၎င်းသည် အစုထဲရှိ ဂျီဩမေတြီများအားလုံးကို ဝိုင်းကာထားသော အငယ်ဆုံးစက်ဝိုင်းကို ကိုယ်စားပြုပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - minimal_circle(geometry, [segments=36])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **segments** - Polygon မျဉ်းပိုင်းများ ပိုင်းခြင်း (segmentation) အတွက် optional ဖြစ်သော argument ဖြစ်သည်။ Default အားဖြင့် ထိုတန်ဖိုးမှာ 36 ဖြစ်သည်။
   * - ဥပမာများ
     - * ``geom_to_wkt( minimal_circle( geom_from_wkt( 'LINESTRING(0 5, 0 -5, 2 1)' ), 4 ) )`` → 'Polygon ((0 5, 5 -0, -0 -5, -5 0, 0 5))'
       * ``geom_to_wkt( minimal_circle( geom_from_wkt( 'MULTIPOINT(1 2, 3 4, 3 2)' ), 4 ) )`` → 'Polygon ((3 4, 3 2, 1 2, 1 4, 3 4))'


.. end_minimal_circle_section

.. _expression_function_GeometryGroup_nodes_to_points:

nodes_to_points
...............

ဤ function သည် ထည့်သွင်းလိုက်သည့် ဂျီဩမေတြီထဲရှိ မျဉ်းဆစ်တိုင်းပါဝင်သော multipoint (point များစွာပါသော) ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - nodes_to_points(geometry, [ignore_closing_nodes=false])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
       * **ignore_closing_nodes** - polygon ကွင်းများ သို့မဟုတ် မျဉ်းများကို ပိတ်ပေးသော ထပ်နေသည့် မျဉ်းဆစ်များ ပါဝင်သင့်/မသင့်ကို သတ်မှတ်သည့် optional ဖြစ်သော argument ဖြစ်ပါသည်။ Default အားဖြင့် false ဖြစ်နေမည်ဖြစ်ပြီး၊ ရလာဒ်တွင် ထိုထပ်နေသောမျဉ််းဆစ်များ မပါဝင်စေရန် true ကိုရွေးချယ်ရမည်ဖြစ်သည်။
   * - ဥပမာများ
     - * ``geom_to_wkt(nodes_to_points(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')))`` → 'MultiPoint ((0 0),(1 1),(2 2))'
       * ``geom_to_wkt(nodes_to_points(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))'),true))`` → 'MultiPoint ((-1 -1),(4 0),(4 2),(0 2))'


.. end_nodes_to_points_section

.. _expression_function_GeometryGroup_num_geometries:

num_geometries
..............

ဤ function သည် ဂျီဩမေတြီစုစည်းမှု (collection) တစ်ခုထဲရှိ ဂျီဩမေတြီအရေအတွက်ကို ပြန်ထုတ်ပေးပါသည်၊ သို့မဟုတ် အစိတ်အပိုင်းများစွာပါဝင်သော ဂျီဩမေတြီထဲရှိ အစိတ်အပိုင်းအရေအတွက်ကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ ထည့်သွင်းလိုက်သည့် ဂျီဩမေတြီသည် စုစည်းမှု (collection) တစ်ခုမဟုတ်ပါက NULL ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - num_geometries(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ စုစည်းမှု သို့မဟုတ် အစိတ်အပိုင်းများစွာပါဝင်သော ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``num_geometries(geom_from_wkt('GEOMETRYCOLLECTION(POINT(0 1), POINT(0 0), POINT(1 0), POINT(1 1))'))`` → 4
       * ``num_geometries(geom_from_wkt('MULTIPOINT((0 1), (0 0), (1 0))'))`` → 3


.. end_num_geometries_section

.. _expression_function_GeometryGroup_num_interior_rings:

num_interior_rings
..................

ဤ function သည် polygon တစ်ခု သို့မဟုတ် ဂျီဩမေတြီစုစည်းမှု တစ်ခုအတွင်းရှိ အတွင်းကွင်းအရေအတွက်ကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ ထည့်သွင်းလိုက်သည့် ဂျီဩမေတြီသည် စုစည်းမှုတစ်ခု သို့မဟုတ် polygon တစ်ခု မဟုတ်ပါက NULL ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။


.. list-table::   
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - num_interior_rings(geometry)
   * - Argument များ
     - * **geometry** - ထည့်သွင်းသည့် ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``num_interior_rings(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))'))`` → 1


.. end_num_interior_rings_section

.. _expression_function_GeometryGroup_num_points:


num_points
..........

ဤ function သည် ဂျီဩမေတြီတစ်ခုအတွင်းရှိ မျဉ်းဆစ် (vertex) အရေအတွက်ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - num_points(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``num_points(@geometry)`` → လက်ရှိ feature ၏ ဂျီဩမေတြီထဲရှိ မျဉ်းအဆစ် (vertex) အရေအတွက်


.. end_num_points_section

.. _expression_function_GeometryGroup_num_rings:

num_rings
.........

ဤ function သည် polygon တစ်ခု သို့မဟုတ် ဂျီဩမေတြီစုစည်းမှုတစ်ခုအတွင်းရှိ (အပြင်ကွင်းအပါအဝင်) ကွင်းအရေအတွက်ကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ ထည့်သွင်းလိုက်သည့် ဂျီဩမေတြီသည် စုစည်းမှုတစ်ခု သို့မဟုတ် polygon တစ်ခု မဟုတ်ပါက NULL ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - num_rings(geometry)
   * - Argument များ
     - * **geometry** - ထည့်သွင်းလိုက်သည့် ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``num_rings(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))'))`` → 2


.. end_num_rings_section

.. _expression_function_GeometryGroup_offset_curve:


offset_curve
............

ဤ function သည် linestring ဂျီဩမေတြီတစ်ခုကို ဘေးသို့ ရွှေ့ခြင်းဖြင့်ဖြစ်ပေါ်လာသော ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ အကွာအဝေးများသည် ထိုဂျီဩမေတြီ၏ ရည်ညွှန်းကိုဩဒိနိတ်စနစ် (SRS) အတိုင်း ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - offset_curve(geometry, distance, [segments=8], [join=1], [miter_limit=2.0])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - linestring (multi) ဂျီဩမေတြီတစ်ခု
       * **distance** - offset (အရွေ့) အကွာအဝေးဖြစ်သည်။ အပေါင်းတန်ဖိုးများသည် မျဉ်းများ၏ ဘယ်ဘက်သို့ buffer ပြုလုပ်မည်ဖြစ်ပြီး အနှုတ်တန်ဖိုးများသည် ညာဘက်သို့ buffer ပြုလုပ်မည်ဖြစ်သည်။
       * **segments** - လုံးဝန်းသော (round) ချိတ်ဆက်မှု (join) style ကို အသုံးပြုသောအခါ စက်ဝိုင်း၏လေးပုံတစ်ပုံကို ဖော်ပြရာတွင် အသုံးပြုသည့် မျဉ်းပိုင်းအရေအတွက်ဖြစ်ပါသည်။ အရေအတွက် ပိုများပါက အဆစ်များပိုမိုပါဝင်သည့် ချောမွေ့သော မျဉ်းကို ရရှိစေပါသည်။ 
       * **join** - ထောင့်များအတွက် ချိတ်ဆက်မှုပုံစံ (join style) ။ အသုံးပြုနိုင်သော ပုံစံများမှာ 1 = round ၊ 2 = miter နှင့် 3 = bevel တို့ဖြစ်သည်။
       * **miter_limit** - အလွန်ချွန်သော ထောင့်များအတွက် အသုံးပြုသော miter အချိုး ကန့်သတ်ချက် (miter ချိတ်ဆက်မှုကို အသုံးပြုသောအခါမှသာ)
   * - ဥပမာများ
     - * ``offset_curve(@geometry, 10.5)`` → 10.5 ယူနစ်ဖြင့် ဘယ်ဘက်သို့ မျဉ်းအရွေ့
       * ``offset_curve(@geometry, -10.5)`` → 10.5 ယူနစ်ဖြင့် ညာဘက်သို့ မျဉ်းအရွေ့
       * ``offset_curve(@geometry, 10.5, segments:=16, join:=1)`` → 10.5 ယူနစ်ဖြင့် ဘယ်ဘက်သို့ မျဉ်းအရွေ့၊ ပိုမိုချောမွေ့သော မျဉ်းကွေးရရှိရန် မျဉ်းပိုင်းများ ပိုမိုအသုံးပြုထားလျှက်
       * ``offset_curve(@geometry, 10.5, join:=3)`` → 10.5 ယူနစ်ဖြင့် ဘယ်ဘက်သို့ မျဉ်းအရွေ့၊ bevel ချိတ်ဆက်မှုကို အသုံးပြုလျှက်


.. end_offset_curve_section

.. _expression_function_GeometryGroup_order_parts:


order_parts
...........

ဂျီဩမေတြီများစွာပါဝင်သည့် ဂျီဩမေတြီတစ်ခု၏ အစိတ်အပိုင်းများကို သတ်မှတ်ထားသည့် စံနှုန်းတစ်ခုဖြင့် စီစဉ်ခြင်းဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - order_parts(geometry, orderby, [ascending=true])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - အမျိုးအစားများစွာပါဝင်သည့် ဂျီဩမေတြီတစ်ခု
       * **orderby** - အစီအစဉ်ပြုလုပ်မည့် စံနှုန်းကို သတ်မှတ်သည့် expression တစ်ခု
       * **ascending** - မှား/မှန် ဖော်ပြချက်၊ ငယ်စဉ်ကြီးလိုက်စီစဉ်မှုအတွက် True ဖြစ်ပြီး၊ ကြီးစဉ်ငယ်လိုက်စီစဉ်မှုအတွက် False ဖြစ်သည်။
   * - ဥပမာများ
     - * ``geom_to_wkt(order_parts(geom_from_wkt('MultiPolygon (((1 1, 5 1, 5 5, 1 5, 1 1)),((1 1, 9 1, 9 9, 1 9, 1 1)))'), 'area(@geometry)', False))`` → 'MultiPolygon (((1 1, 9 1, 9 9, 1 9, 1 1)),((1 1, 5 1, 5 5, 1 5, 1 1)))'
       * ``geom_to_wkt(order_parts(geom_from_wkt('LineString(1 2, 3 2, 4 3)'), '1', True))`` → 'LineString(1 2, 3 2, 4 3)'


.. end_order_parts_section

.. _expression_function_GeometryGroup_oriented_bbox:


oriented_bbox
.............

ဤ function သည် ထည့်သွင်းလိုက်သည့် ဂျီဩမေတြီ၏ အနိမ့်ဆုံး ဦးတည်ရာ စတုဂံပုံအကျယ်အဝန်းနယ် (minimal oriented bounding box) ကို ကိုယ်စားပြုသည့် ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - oriented_bbox(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt( oriented_bbox( geom_from_wkt( 'MULTIPOINT(1 2, 3 4, 3 2)' ) ) )`` → 'Polygon ((3 2, 3 4, 1 4, 1 2, 3 2))'


.. end_oriented_bbox_section

.. _expression_function_GeometryGroup_overlaps:


overlaps
........

ဤ function သည် ဂျီဩမေတြီများ တစ်ခုနှင့်တစ်ခု ထပ်နေခြင်းရှိ/မရှိကို စစ်ဆေးခြင်းဖြစ်သည်။ အကယ်၍ ဂျီဩမေတြီများသည် တူညီသည့်အတိုင်းအတာဖြင့် ထပ်နေပြီး ဂျီဩမေတြီတစ်ခုအတွင်း အခြားတစ်ခုမှ အပြည့်အဝ ပါဝင်နေခြင်းမဖြစ်လျှင် TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - overlaps(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``overlaps( geom_from_wkt( 'LINESTRING(3 5, 4 4, 5 5, 5 3)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )`` → TRUE
       * ``overlaps( geom_from_wkt( 'LINESTRING(0 0, 1 1)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )`` → FALSE


.. end_overlaps_section

.. _expression_function_GeometryGroup_overlay_contains:

overlay_contains
................

ဤ function သည် လက်ရှိအသုံးပြုနေသော feature တွင် ရည်ရွယ်သည့် layer တစ်ခုမှ အနည်းဆုံး feature တစ်ခုသည် တည်နေရာအားဖြင့် ပါဝင်ခြင်းရှိ/မရှိ ကို ပြန်ထုတ်ပေးပါသည်၊ သို့မဟုတ် လက်ရှိ feature တွင်ပါဝင်သော ရည်ရွယ်သည့် layer ရှိ feature များအတွက် expression ကို အခြေခံထားသောရလာဒ်များ array တစ်ခုကိုပြန်ထုတ်ပေးပါသည်။ 


PostGIS ရှိ `ST_Contains <https://postgis.net/docs/ST_Contains.html>`_ function တွင် ဖော်ပြထားသည့်အတိုင်း GEOS "Contains" ခေါင်းစဉ်အောက်တွင် ဆက်လက်ဖတ်ရှုနိုင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - overlay_contains(layer, [expression], [filter], [limit], [cache=false])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **layer** - ထပ်ခြင်းကို စစ်ဆေးမည့် layer
       * **expression** - ရည်ရွယ်ထားသည့် layer မှ feature များကို အကဲဖြတ်စစ်ဆေးမည့် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ဤ function သည် အနည်းဆုံးကိုက်ညီမှုတစ်ခု ရှိ/မရှိကို ညွှန်ပြသော မှန်/မှား တစ်ခုကိုသာ ပြန်ထုတ်ပေးမည်ဖြစ်သည်။
       * **filter** - စစ်ဆေးမည့် ရည်ရွယ်ထားသော feature များကို စစ်ထုတ် (filter) ရန် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို စစ်ဆေးသွားလိမ့်မည်ဖြစ်သည်။
       * **limit** - ကိုက်ညီမှုရှိသည့် feature အရေအတွက်ကို ကန့်သတ်မည့် optional ဖြစ်သော ကိန်းပြည့်တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။
       * **cache** - local spatial index (စက်အတွင်း သီးသန့်သိမ်းဆည်းသည့် တည်နေရာဆိုင်ရာအညွှန်းကိန်း) တစ်ခုကို တည်ဆောက်နိုင်ရန် ၎င်းကို ture ဟု သတ်မှတ်ထားရမည် (များသောအားဖြင့် နှေးကွေးသော ဒေတာဝန်ဆောင်မှုများနှင့် အလုပ်လုပ်မနေပါက ၎င်းကို လိုချင်မည်မဟုတ်ပေ)
   * - ဥပမာများ
     - * ``overlay_contains('regions')`` → လက်ရှိ feature တွင် တည်နေရာအရ နေရာဒေသ (region) တစ်ခုပါဝင်ပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_contains('regions', filter:= population > 10000)`` → လက်ရှိ feature တွင် လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region တစ်ခုပါဝင်ပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_contains('regions', name)`` → လက်ရှိ feature တွင် ပါဝင်သော region များအတွက် နာမည်စဉ် (array of names) များ
       * ``array_to_string(overlay_contains('regions', name))`` → လက်ရှိ feature တွင် ပါဝင်သော region များအတွက် ကော်မာဖြင့် ခွဲခြားရေးသားထားသည့် အမည်စာရင်းစာသားတစ်ခု
       * ``array_sort(overlay_contains(layer:='regions', expression:="name", filter:= population > 10000))`` → လက်ရှိ feature တွင် လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region များ၏ အစဉ်လိုက် စီထားသော အမည်များ array တစ်ခု
       * ``overlay_contains(layer:='regions', expression:= geom_to_wkt(@geometry), limit:=2)`` → လက်ရှိ feature တွင် ပါဝင်သော region နှစ်ခုထိအတွက် ဂျီဩမေတြီများ array တစ်ခု (WKT ဖြင့်)


.. end_overlay_contains_section

.. _expression_function_GeometryGroup_overlay_crosses:


overlay_crosses
...............

ဤ function သည် လက်ရှိအသုံးပြုနေသော feature အနေဖြင့် ရည်ရွယ်ထားသည့် layer တစ်ခုမှ အနည်းဆုံး feature တစ်ခုကို ကန့်လန့်ဖြတ်သွားခြင်းရှိ/မရှိကို ပြန်ထုတ်ပေးပါသည်၊ သို့မဟုတ် လက်ရှိ feature မှ ကန့်လန့်ဖြတ်သွားသော ရည်ရွယ်သည့် layer ရှိ feature များအတွက် expression ကို အခြေခံထားသော ရလာဒ်များ array တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ 


PostGIS ရှိ `ST_Crosses <https://postgis.net/docs/ST_Crosses.html>`_ function တွင် ဖော်ပြထားသော GEOS "Crosses" ခေါင်းစဉ်အောက်တွင် ဆက်လက်ဖတ်ရှုနိုင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - overlay_crosses(layer, [expression], [filter], [limit], [cache=false])


       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **layer** - ထပ်ခြင်းကို စစ်ဆေးမည့် layer
       * **expression** - ရည်ရွယ်ထားသည့် layer မှ feature များကို အကဲဖြတ်စစ်ဆေးမည့် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ဤ function သည် အနည်းဆုံးကိုက်ညီမှုတစ်ခု ရှိ/မရှိကို ညွှန်ပြသော မှန်/မှား တစ်ခုကိုသာ ပြန်ထုတ်ပေးမည်ဖြစ်သည်။
       * **filter** - စစ်ဆေးမည့် ရည်ရွယ်ထားသော feature များကို စစ်ထုတ် (filter) ရန် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို စစ်ဆေးသွားလိမ့်မည်ဖြစ်သည်။
       * **limit** - ကိုက်ညီမှုရှိသည့် feature အရေအတွက်ကို ကန့်သတ်မည့် optional ဖြစ်သော ကိန်းပြည့်တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။
       * **cache** - local spatial index (စက်အတွင်း သီးသန့်သိမ်းဆည်းသည့် တည်နေရာဆိုင်ရာအညွှန်းကိန်း) တစ်ခုကို တည်ဆောက်နိုင်ရန် ၎င်းကို ture ဟု သတ်မှတ်ထားရမည် (များသောအားဖြင့် နှေးကွေးသော ဒေတာဝန်ဆောင်မှုများနှင့် အလုပ်လုပ်မနေပါက ၎င်းကို လိုချင်မည်မဟုတ်ပေ)
   * - ဥပမာများ
     - * ``overlay_crosses('regions')`` → လက်ရှိ feature တွင် တည်နေရာအရ နေရာဒေသ (region) တစ်ခုကို ကန့်လန့်ဖြတ်ပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_crosses('regions', filter:= population > 10000)`` → လက်ရှိ feature တွင် လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region တစ်ခုကို ကန့်လန့်ဖြတ်ပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_crosses('regions', name)`` → လက်ရှိ feature မှ ကန့်လန့်ဖြတ်သော region များအတွက် နာမည်စဉ် (array of names) များ
       * ``array_to_string(overlay_crosses('regions', name))`` → လက်ရှိ feature မှ ကန့်လန့်ဖြတ်သွားသော region များအတွက် ကော်မာဖြင့် ခွဲခြားရေးသားထားသည့် အမည်စာရင်းစာသားတစ်ခု
       * ``array_sort(overlay_crosses(layer:='regions', expression:="name", filter:= population > 10000))`` → လက်ရှိ feature မှ ကန့်လန့်ဖြတ်သွားပြီး လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region များ၏ အစဉ်လိုက် စီထားသော အမည်များ array တစ်ခု
       * ``overlay_crosses(layer:='regions', expression:= geom_to_wkt(@geometry), limit:=2)`` → လက်ရှိ feature မှ ကန့်လန့်ဖြတ်သွားသော region နှစ်ခုထိအတွက် ဂျီဩမေတြီများ array တစ်ခု (WKT ဖြင့်)


.. end_overlay_crosses_section

.. _expression_function_GeometryGroup_overlay_disjoint:


overlay_disjoint
................

ဤ function တွင် လက်ရှိ feature သည် ရည်ရွယ်ထားသည့် layer တစ်ခု၏ feature များအားလုံးနှင့် တည်နေရာအရ ဆက်စပ်မှုရှိမရှိကို ပြန်ထုတ်ပေးပါသည်၊ သို့မဟုတ် လက်ရှိ feature မှ ဆက်စပ်မှုမရှိသော ရည်ရွယ်ထားသည့် layer ထဲရှိ feature များအတွက် expression ကို အခြေခံထားသော ရလာဒ်များ၏ array တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။


PostGIS ရှိ `ST_Disjoint <https://postgis.net/docs/ST_Disjoint.html>`_ function တွင် ဖော်ပြထားသည့် GEOS "Disjoint" ခေါင်းစဉ်အောက်တွင် ပိုမိုလေ့လာနိုင်ပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - overlay_disjoint(layer, [expression], [filter], [limit], [cache=false])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **layer** - ထပ်ခြင်းကို စစ်ဆေးမည့် layer
       * **expression** - ရည်ရွယ်ထားသည့် layer မှ feature များကို အကဲဖြတ်စစ်ဆေးမည့် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ဤ function သည် အနည်းဆုံးကိုက်ညီမှုတစ်ခု ရှိ/မရှိကို ညွှန်ပြသော မှန်/မှား တစ်ခုကိုသာ ပြန်ထုတ်ပေးမည်ဖြစ်သည်။
       * **filter** - စစ်ဆေးမည့် ရည်ရွယ်ထားသော feature များကို စစ်ထုတ် (filter) ရန် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို စစ်ဆေးသွားလိမ့်မည်ဖြစ်သည်။
       * **limit** - ကိုက်ညီမှုရှိသည့် feature အရေအတွက်ကို ကန့်သတ်မည့် optional ဖြစ်သော ကိန်းပြည့်တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။
       * **cache** - local spatial index (စက်အတွင်း သီးသန့်သိမ်းဆည်းသည့် တည်နေရာဆိုင်ရာအညွှန်းကိန်း) တစ်ခုကို တည်ဆောက်နိုင်ရန် ၎င်းကို ture ဟု သတ်မှတ်ထားရမည် (များသောအားဖြင့် နှေးကွေးသော ဒေတာဝန်ဆောင်မှုများနှင့် အလုပ်လုပ်မနေပါက ၎င်းကို လိုချင်မည်မဟုတ်ပေ)
   * - ဥပမာများ
     - * ``overlay_disjoint('regions')`` → လက်ရှိ feature သည် တည်နေရာအရ နေရာဒေသ (region) အားလုံးနှင့် ဆက်စပ်မှုမရှိပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_disjoint('regions', filter:= population > 10000)`` → လက်ရှိ feature သည် လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region များအားလုံးနှင့် ဆက်စပ်မှုမရှိပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_disjoint('regions', name)`` → လက်ရှိ feature မှ တည်နေရာအရ ဆက်စပ်မှုမရှိသော region များအတွက် နာမည်စဉ် (array of names) များ
       * ``array_to_string(overlay_disjoint('regions', name))`` → လက်ရှိ feature မှ တည်နေရာအရ ဆက်စပ်မှုမရှိသော region များအတွက် ကော်မာဖြင့် ခွဲခြားရေးသားထားသည့် အမည်စာရင်းစာသားတစ်ခု
       * ``array_sort(overlay_disjoint(layer:='regions', expression:="name", filter:= population > 10000))`` → လက်ရှိ feature မှ တည်နေရာအရ ဆက်စပ်မှုမရှိပဲ လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region များ၏ အစဉ်လိုက် စီထားသော အမည်များ array တစ်ခု
       * ``overlay_disjoint(layer:='regions', expression:= geom_to_wkt(@geometry), limit:=2)`` → လက်ရှိ feature မှ တည်နေရာအရ ဆက်စပ်မှုမရှိသည့် region နှစ်ခုထိအတွက် ဂျီဩမေတြီများ array တစ်ခု (WKT ဖြင့်)


.. end_overlay_disjoint_section

.. _expression_function_GeometryGroup_overlay_equals:


overlay_equals
..............

ဤ function တွင် လက်ရှိ feature သည် ရည်ရွယ်သည့် layer တစ်ခုမှ အနည်းဆုံး feature တစ်ခုခုနှင့် တည်နေရာအရ တူညီမှုရှိမရှိကို ပြန်ထုတ်ပေးပါသည်၊ သို့မဟုတ် လက်ရှိ feature နှင့် တည်နေရာအရတူညီမှုရှိသည့် ရည်ရွယ်သည့် layer ထဲရှိ feature များအတွက် expression ကိုအခြေခံသော ရလာဒ်များ၏ array တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။


PostGIS ရှိ `ST_Equals <https://postgis.net/docs/ST_Equals.html>`_ function တွင် ဖော်ပြထားသည့် GEOS "Equals" ခေါင်းစဉ်အောက်တွင် ပိုမိုလေ့လာနိုင်ပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - overlay_equals(layer, [expression], [filter], [limit], [cache=false])


       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **layer** - ထပ်ခြင်းကို စစ်ဆေးမည့် layer
       * **expression** - ရည်ရွယ်ထားသည့် layer မှ feature များကို အကဲဖြတ်စစ်ဆေးမည့် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ဤ function သည် အနည်းဆုံးကိုက်ညီမှုတစ်ခု ရှိ/မရှိကို ညွှန်ပြသော မှန်/မှား တစ်ခုကိုသာ ပြန်ထုတ်ပေးမည်ဖြစ်သည်။
       * **filter** - စစ်ဆေးမည့် ရည်ရွယ်ထားသော feature များကို စစ်ထုတ် (filter) ရန် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို စစ်ဆေးသွားလိမ့်မည်ဖြစ်သည်။
       * **limit** - ကိုက်ညီမှုရှိသည့် feature အရေအတွက်ကို ကန့်သတ်မည့် optional ဖြစ်သော ကိန်းပြည့်တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။
       * **cache** - local spatial index (စက်အတွင်း သီးသန့်သိမ်းဆည်းသည့် တည်နေရာဆိုင်ရာအညွှန်းကိန်း) တစ်ခုကို တည်ဆောက်နိုင်ရန် ၎င်းကို ture ဟု သတ်မှတ်ထားရမည် (များသောအားဖြင့် နှေးကွေးသော ဒေတာဝန်ဆောင်မှုများနှင့် အလုပ်လုပ်မနေပါက ၎င်းကို လိုချင်မည်မဟုတ်ပေ)
   * - ဥပမာများ
     - * ``overlay_equals('regions')`` → လက်ရှိ feature သည် တည်နေရာအရ နေရာဒေသ (region) တစ်ခုနှင့် တူညီမှုရှိပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_equals('regions', filter:= population > 10000)`` → လက်ရှိ feature သည် လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region တစ်ခုနှင့် တည်နေရာအရ တူညီမှုရှိပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_equals('regions', name)`` → လက်ရှိ feature နှင့် တည်နေရာအရ တူညီမှုရှိသော region များအတွက် နာမည်စဉ် (array of names) များ
       * ``array_to_string(overlay_equals('regions', name))`` → လက်ရှိ feature နှင့် တည်နေရာအရ တူညီမှုရှိသော region များအတွက် ကော်မာဖြင့် ခွဲခြားရေးသားထားသည့် အမည်စာရင်းစာသားတစ်ခု
       * ``array_sort(overlay_equals(layer:='regions', expression:="name", filter:= population > 10000))`` → လက်ရှိ feature နှင့် တည်နေရာအရ တူညီမှုရှိပြီး လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region များ၏ အစဉ်လိုက် စီထားသော အမည်များ array တစ်ခု
       * ``overlay_equals(layer:='regions', expression:= geom_to_wkt(@geometry), limit:=2)`` → လက်ရှိ feature နှင့် တည်နေရာအရ တူညီမှုရှိသော region နှစ်ခုထိအတွက် ဂျီဩမေတြီများ array တစ်ခု (WKT ဖြင့်)


.. end_overlay_equals_section

.. _expression_function_GeometryGroup_overlay_intersects:


overlay_intersects
..................

ဤ function တွင် လက်ရှိ feature သည် ရည်ရွယ်သည့် layer တစ်ခုမှ အနည်းဆုံး feature တစ်ခုခုနှင့် တည်နေရာအရ ထိဖြတ်ခြင်းရှိမရှိကို ပြန်ထုတ်ပေးပါသည်၊ သို့မဟုတ် လက်ရှိ feature မှ ထိဖြတ်သွားသော ရည်ရွယ်သည့် layer ထဲရှိ feature များအတွက် expression ကိုအခြေခံသော ရလာဒ်များ၏ array တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။


PostGIS ရှိ `ST_Intersects <https://postgis.net/docs/ST_Intersects.html>`_ function တွင် ဖော်ပြထားသည့် GEOS "Intersects" ခေါင်းစဉ်အောက်တွင် ပိုမိုလေ့လာနိုင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - overlay_intersects(layer, [expression], [filter], [limit], [cache=false], [min_overlap], [min_inscribed_circle_radius], [return_details], [sort_by_intersection_size])


       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **layer** - ထပ်ခြင်းကို စစ်ဆေးမည့် layer
       * **expression** - ရည်ရွယ်ထားသည့် layer မှ feature များကို အကဲဖြတ်စစ်ဆေးမည့် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ဤ function သည် အနည်းဆုံးကိုက်ညီမှုတစ်ခု ရှိ/မရှိကို ညွှန်ပြသော မှန်/မှား တစ်ခုကိုသာ ပြန်ထုတ်ပေးမည်ဖြစ်သည်။
       * **filter** - စစ်ဆေးမည့် ရည်ရွယ်ထားသော feature များကို စစ်ထုတ် (filter) ရန် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို စစ်ဆေးသွားလိမ့်မည်ဖြစ်သည်။
       * **limit** - ကိုက်ညီမှုရှိသည့် feature အရေအတွက်ကို ကန့်သတ်မည့် optional ဖြစ်သော ကိန်းပြည့်တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။
       * **cache** - local spatial index (စက်အတွင်း သီးသန့်သိမ်းဆည်းသည့် တည်နေရာဆိုင်ရာအညွှန်းကိန်း) တစ်ခုကို တည်ဆောက်နိုင်ရန် ၎င်းကို ture ဟု သတ်မှတ်ထားရမည် (များသောအားဖြင့် နှေးကွေးသော ဒေတာဝန်ဆောင်မှုများနှင့် အလုပ်လုပ်မနေပါက ၎င်းကို လိုချင်မည်မဟုတ်ပေ)
       * **min_overlap** - Optional ဖြစ်သော ဖယ်ထုတ်ပေးသည့် စစ်ထုတ်မှု (filter) တစ်ခုကို သတ်မှတ်ပေးပါသည်။

         * Polygon များအတွက် ထိဖြတ်ခြင်းသည် စတုရန်းယူနစ်ဖြင့် ဖော်ပြသော လက်ရှိ feature ထဲရှိ အနည်းဆုံးဧရိယာတစ်ခုဖြစ်သည်။ အကယ်၍ ထိဖြတ်ခြင်းသည် polygon များစွာထဲတွင်ဖြစ်နေပါက ထို polygon များထဲမှ အနည်းဆုံး polygon တစ်ခုသည် သတ်မှတ်ထားသည့်တန်ဖိုးထက် ကြီးသော သို့မဟုတ် တူညီသော ဧရိယာရှိလျှင် ထိဖြတ်ခြင်းကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။
         * Line များအတွက် လက်ရှိ feature ၏ ယူနစ်ဖြင့် တိုင်းတာသည့် အနည်းဆုံးအလျားတစ်ခုဖြစ်သည်။ အကယ်၍ ထိဖြတ်ခြင်းတွင် line များစွာပါဝင်နေပါက ထို line များထဲမှ အနည်းဆုံး line တစ်ခုသည် သတ်မှတ်ထားသည့် တန်ဖိုးထက် ကြီးသော သို့မဟုတ် တူညီသော အလျားရှိလျှင် ထိဖြတ်ခြင်းကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။


       * **min_inscribed_circle_radius** သည် optional ဖြစ်သော ဖယ်ထုတ်ပေးသည့် စစ်ထုတ်မှု (filter) တစ်ခုကို သတ်မှတ်ပေးပါသည် (polygon များအတွက်သာ)။ ၎င်းသည် ထိဖြတ်ခြင်း၏ အများဆုံး အတွင်းပိုင်းဝန်းထိသော စက်ဝိုင်း (maximum inscribed circle) အတွက် လက်ရှိ feature ၏ ယူနစ်ဖြင့်တိုင်းတာသော အနည်းဆုံးအချင်းဝက်ဖြစ်သည်။ အကယ်၍ ထိဖြတ်ခြင်းသည် polygon များစွာအတွင်း၌ ဖြစ်ပေါ်ခဲ့သော် ထို polygon များထဲမှ အနည်းဆုံး polygon တစ်ခုတွင် maximum inscribed circle အတွက် အချင်းဝက်သည် သတ်မှတ်ထားသည့်တန်ဖိုးထက် ပိုကြီးသော သို့မဟုတ် တူညီသော တန်ဖိုးရှိပါက ထိဖြတ်ခြင်းကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။

         PostGIS ရှိ `ST_MaximumInscribedCircle <https://postgis.net/docs/ST_MaximumInscribedCircle.html>`_ function တွင် ဖော်ပြထားသည့် GEOS ခေါင်းစဉ်အောက်တွင် ပိုမိုလေ့လာနိုင်ပါသည်။

         ဤ argument သည် GEOS  >= 3.9 နှင့်အထက်ဖြစ်ရန် လိုအပ်ပါသည်။
       * **return_details** - feature 'id' ၊  expression 'result (ရလဒ်)' နှင့် 'overlap (ထပ်ခြင်း)' တန်ဖိုးများပါဝင်သော ဖော်ပြချက်များစာရင်း (key အမည်များကို ' ' ထဲတွင်ထည့်ထားသည်) ကိုရရှိရန် ၎င်းကို true ဟု သတ်မှတ်ပါ။ ရည်ရွယ်သည့် layer သည် polygon ဖြစ်ပါက maximum inscribed circle ၏ အချင်းဝက်ကိုလည်း ပြန်ထုတ်ပေးမည်ဖြစ်သည်။ Expression parameter ဖြင့် အသုံးပြုမှသာ ဆီလျော်မှုရှိမည်ဖြစ်သည်။

       * **sort_by_intersection_size** - Expression ဖြင့် အသုံးပြုမှသာ ဆီလျော်မှုရှိမည်ဖြစ်သည်။ ထပ်နေသည့်တန်ဖိုးဖြင့် ရလာဒ်ကို ကြီးစဉ်ငယ်လိုက်အစဉ်ဖြင့် ပြန်ထုတ်ရန် 'des' ဟု သတ်မှတ်ပါ၊ သို့မဟုတ် ငယ်စဉ်ကြီးလိုက်အစဉ်ဖြင့်စီလိုသော် 'asc' ဟု သတ်မှတ်ပါ။ 
   * - ဥပမာများ
     - * ``overlay_intersects('regions')`` → လက်ရှိ feature သည် တည်နေရာအရ နေရာဒေသ (region) တစ်ခုနှင့် ထိဖြတ်ပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_intersects('regions', filter:= population > 10000)`` → လက်ရှိ feature သည် လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region တစ်ခုနှင့် တည်နေရာအရ ထိဖြတ်ပါက TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_intersects('regions', name)`` → လက်ရှိ feature မှ တည်နေရာအရ ထိဖြတ်သော region များအတွက် နာမည်စဉ် (array of names) များ
       * ``array_to_string(overlay_intersects('regions', name))`` → လက်ရှိ feature မှ တည်နေရာအရ ထိဖြတ်သော region များအတွက် ကော်မာဖြင့် ခွဲခြားရေးသားထားသည့် အမည်စာရင်းစာသားတစ်ခု
       * ``array_sort(overlay_intersects(layer:='regions', expression:="name", filter:= population > 10000))`` → လက်ရှိ feature မှ တည်နေရာအရ ထိဖြတ် လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region များအတွက် အစဉ်လိုက် စီထားသော အမည်များ array တစ်ခု
       * ``overlay_intersects(layer:='regions', expression:= geom_to_wkt(@geometry), limit:=2)`` → လက်ရှိ feature မှ တည်နေရာအရ ထိဖြတ်သော region နှစ်ခုထိအတွက် ဂျီဩမေတြီများ array တစ်ခု (WKT ဖြင့်)
       * ``overlay_intersects(layer:='regions', min_overlap:=0.54)`` → လက်ရှိ feature သည် region တစ်ခုကို တည်နေရာအရ ထိဖြတ်ပြီး ထို ထိဖြတ်ဧရိယာ (polygon များစွာပါဝင်နေပါက အစိတ်အပိုင်းများထဲမှ အနည်းဆုံးတစ်ပိုင်း)သည် 0.54 နှင့် ညီမျှလျှင် သို့မဟုတ် ပိုကြီးလျှင် TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_intersects(layer:='regions', min_inscribed_circle_radius:=0.54)`` → လက်ရှိ feature သည် region တစ်ခုကို တည်နေရာအရ ထိဖြတ်ပြီး ထို ထိဖြတ်ဧရိယာ maximum inscribed circle ၏ အချင်းဝက် (အပိုင်းများစွာပါဝင်ပါက အနည်းဆုံးတစ်ခု) 0.54 နှင့်ညီမျှလျှင် သို့မဟုတ် ပိုကြီးလျှင် TRUE ကိုပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_intersects(layer:='regions', expression:= geom_to_wkt(@geometry), return_details:=true)`` → 'id' ၊ 'result' ၊ 'overlap' နှင့် 'radius' တို့ ပါဝင်သော ဖော်ပြချက် array တစ်ခု
       * ``overlay_intersects(layer:='regions', expression:= geom_to_wkt(@geometry), sort_by_intersection_size:='des')`` → ထပ်နေသော တန်ဖိုးဖြင့် ကြီးစဉ်ငယ်လိုက်စဉ်ထားသော (WKT ဖြင့်) ဂျီဩမေတြီ array တစ်ခု


.. end_overlay_intersects_section

.. _expression_function_GeometryGroup_overlay_nearest:


overlay_nearest
...............

ဤ function တွင် လက်ရှိ feature သည် သတ်မှတ်ထားသည့် အကွာအဝေးတစ်ခုအတွင်းတွင် ရည်ရွယ်သည့် layer တစ်ခုမှ feature (များ) ပါဝင်ခြင်းရှိ/မရှိကို ပြန်ထုတ်ပေးပါသည်၊ သို့မဟုတ် လက်ရှိ feature မှ အကွာအဝေးတစ်ခုအတွင်း ရည်ရွယ်သည့် layer ထဲရှိ feature များအတွက် expression ကိုအခြေခံသော ရလာဒ်များ၏ array တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။



မှတ်ချက်။ ဤ function သည် ကြီးမားသော layer များအတွက် မှတ်ဉာဏ်အမြောက်အမြားသုံးစွဲရသဖြင့် လုပ်ဆောင်မှုနှေးကွေးနိုင်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ) 
     - overlay_nearest(layer, [expression], [filter], [limit=1], [max_distance], [cache=false])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **layer** - ထပ်ခြင်းကို စစ်ဆေးမည့် layer
       * **expression** - ရည်ရွယ်ထားသည့် layer မှ feature များကို အကဲဖြတ်စစ်ဆေးမည့် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ဤ function သည် အနည်းဆုံးကိုက်ညီမှုတစ်ခု ရှိ/မရှိကို ညွှန်ပြသော မှန်/မှား တစ်ခုကိုသာ ပြန်ထုတ်ပေးမည်ဖြစ်သည်။
       * **filter** - စစ်ဆေးမည့် ရည်ရွယ်ထားသော feature များကို စစ်ထုတ် (filter) ရန် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ရည်ရွယ်သည့် layer ထဲရှိ feature များအားလုံးကို အသုံးပြုသွားမည်ဖြစ်သည်။
       * **limit** - ကိုက်ညီမှုရှိသည့် feature အရေအတွက်ကို ကန့်သတ်မည့် optional ဖြစ်သော ကိန်းပြည့်တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက အနီးဆုံးဖြစ်သော feature ကိုသာ ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။ -1 ကို သတ်မှတ်ထားပါက ကိုက်ညီမှုရှိသော feature များအားလုံးကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။
       * **max_distance** - ကိုက်ညီမှုရှိသော feature များကို ရှာဖွေရန်အတွက် optional ဖြစ်သော ကန့်သတ်ချက်အကွာအဝေး တစ်ခုဖြစ်သည်။ သတ်မှတ်မထားပါက ရည်ရွယ်သည့် layer ထဲရှိ feature များအားလုံးကို အသုံးပြုသွားမည်ဖြစသည်။
       * **cache** - local spatial index (စက်အတွင်း သီးသန့်သိမ်းဆည်းသည့် တည်နေရာဆိုင်ရာအညွှန်းကိန်း) တစ်ခုကို တည်ဆောက်နိုင်ရန် ၎င်းကို ture ဟု သတ်မှတ်ထားရမည် (များသောအားဖြင့် နှေးကွေးသော ဒေတာဝန်ဆောင်မှုများနှင့် အလုပ်လုပ်မနေပါက ၎င်းကို လိုချင်မည်မဟုတ်ပေ)
   * - ဥပမာများ
     - * ``overlay_nearest('airports')`` → "airports" layer တွင် အနည်းဆုံး feature တစ်ခုရှိပါက TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_nearest('airports', max_distance:= 5000)`` → လက်ရှိ feature မှ မြေပုံယူနစ် 5000 အကွာအဝေးအတွင်း လေဆိပ်တစ်ခုရှိပါက TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_nearest('airports', name)`` → လက်ရှိ feature နှင့်အနီးဆုံးရှိသော လေဆိပ်အတွက် array တစ်ခုအနေဖြင့် လေဆိပ်အမည်
       * ``array_to_string(overlay_nearest('airports', name))`` → လက်ရှိ feature နှင့်အနီးဆုံးရှိသော လေဆိပ်အတွက် စာသား တစ်ခုအနေဖြင့် လေဆိပ်အမည်
       * ``overlay_nearest(layer:='airports', expression:= name, max_distance:= 5000)`` → လက်ရှိ feature မှ မြေပုံယူနစ် 5000 အကွာအဝေးအတွင်း အနီးဆုံးရှိသောလေဆိပ်အတွက် array တစ်ခုအနေဖြင့် လေဆိပ်အမည်
       * ``overlay_nearest(layer:='airports', expression:="name", filter:= "Use"='Civilian', limit:=3)`` → အကွာအဝေးဖြင့် စဉ်ထားသော အနီးဆုံးပြည်သူပိုင်လေဆိပ် ၃ ခုအထိပါဝင်သော အမည်များ array တစ်ခု
       * ``overlay_nearest(layer:='airports', expression:="name", limit:= -1, max_distance:= 5000)`` → လက်ရှိ feature မှ မြေပုံယူနစ် 5000 အတွင်း အကွာအဝေးဖြင့် စဉ်ထားသော လေဆိပ်များအားလုံးအတွက် အမည်များ array တစ်ခု


.. end_overlay_nearest_section

.. _expression_function_GeometryGroup_overlay_touches:

overlay_touches
...............

ဤ function တွင် လက်ရှိ feature သည် ရည်ရွယ်သည့် layer တစ်ခုမှ အနည်းဆုံး feature တစ်ခုနှင့် တည်နေရာအရ ထိစပ်ခြင်း ရှိမရှိကို ပြန်ထုတ်ပေးပါသည်၊ သို့မဟုတ် လက်ရှိ feature မှ ထိစပ်နေသော ရည်ရွယ်သည့် layer ထဲရှိ feature များအတွက် expression ကိုအခြေခံသော ရလာဒ်များ၏ array တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။


PostGIS ရှိ `ST_Touches <https://postgis.net/docs/ST_Touches.html>`_ function တွင် ဖော်ပြထားသည့် GEOS "Touches" ခေါင်းစဉ်အောက်တွင် ပိုမိုလေ့လာနိုင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - overlay_touches(layer, [expression], [filter], [limit], [cache=false])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **layer** - ထပ်ခြင်းကို စစ်ဆေးမည့် layer
       * **expression** - ရည်ရွယ်ထားသည့် layer မှ feature များကို အကဲဖြတ်စစ်ဆေးမည့် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ဤ function သည် အနည်းဆုံးကိုက်ညီမှုတစ်ခု ရှိ/မရှိကို ညွှန်ပြသော မှန်/မှား တစ်ခုကိုသာ ပြန်ထုတ်ပေးမည်ဖြစ်သည်။
       * **filter** - စစ်ဆေးမည့် ရည်ရွယ်ထားသော feature များကို စစ်ထုတ် (filter) ရန် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို စစ်ဆေးသွားလိမ့်မည်ဖြစ်သည်။
       * **limit** - ကိုက်ညီမှုရှိသည့် feature အရေအတွက်ကို ကန့်သတ်မည့် optional ဖြစ်သော ကိန်းပြည့်တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ကိုက်ညီမှုရှိသော feature များအားလုံးကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။
       * **cache** - local spatial index (စက်အတွင်း သီးသန့်သိမ်းဆည်းသည့် တည်နေရာဆိုင်ရာအညွှန်းကိန်း) တစ်ခုကို တည်ဆောက်နိုင်ရန် ၎င်းကို ture ဟု သတ်မှတ်ထားရမည် (များသောအားဖြင့် နှေးကွေးသော ဒေတာဝန်ဆောင်မှုများနှင့် အလုပ်လုပ်မနေပါက ၎င်းကို လိုချင်မည်မဟုတ်ပေ)
   * - ဥပမာများ
     - * ``overlay_touches('regions')`` → လက်ရှိ feature သည် region တစ်ခုနှင့် တည်နေရာအရ ထိစပ်မှုရှိပါက TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_touches('regions', filter:= population > 10000)`` → လက်ရှိ feature သည် လူဦးရေ 10000 ထက်ကျော်လွန်သော region တစ်ခုနှင့် ထိစပ်မှုရှိပါက TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_touches('regions', name)`` → လက်ရှိ feature မှ ထိစပ်နေသော region များအတွက် နာမည်များ array တစ်ခု
       * ``string_to_array(overlay_touches('regions', name))`` → လက်ရှိ feature မှ ထိစပ်နေသော region များအတွက် ကော်မာဖြင့် ခွဲခြားရေးသားထားသည့် အမည်စာရင်း စာသားတစ်ခု
       * ``array_sort(overlay_touches(layer:='regions', expression:="name", filter:= population > 10000))`` → လက်ရှိ feature နှင့် ထိစပ်မှုရှိပြီး လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region များ၏ အစဉ်လိုက် စီထားသော နာမည်များ array တစ်ခု
       * ``overlay_touches(layer:='regions', expression:= geom_to_wkt(@geometry), limit:=2)`` → လက်ရှိ feature နှင့်ထိစပ်နေသော ဂျီဩမေတြီနှစ်ခုထိ (WKT ဖြင့်) ပါဝင်သည့် ဂျီဩမေတြီများ array တစ်ခု 


.. end_overlay_touches_section

.. _expression_function_GeometryGroup_overlay_within:

overlay_within
..............

ဤ function တွင် လက်ရှိ feature သည် ရည်ရွယ်သည့် layer တစ်ခုမှ အနည်းဆုံး feature တစ်ခုအတွင်းတွင်  တည်နေရာအရ ကျရောက်ခြင်းရှိ/မရှိကို ပြန်ထုတ်ပေးပါသည်၊ သို့မဟုတ် လက်ရှိ feature ပါဝင်နေသော ရည်ရွယ်သည့် layer ထဲရှိ feature များအတွက် expression ကိုအခြေခံသော ရလာဒ်များ၏ array တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။


PostGIS ရှိ `ST_Within <https://postgis.net/docs/ST_Within.html>`_ function တွင် ဖော်ပြထားသည့် GEOS "Within" ခေါင်းစဉ်အောက်တွင် ပိုမိုလေ့လာနိုင်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - overlay_within(layer, [expression], [filter], [limit], [cache=false])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **layer** - ထပ်ခြင်းကို စစ်ဆေးမည့် layer
       * **expression** - ရည်ရွယ်ထားသည့် layer မှ feature များကို အကဲဖြတ်စစ်ဆေးမည့် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ဤ function သည် အနည်းဆုံးကိုက်ညီမှုတစ်ခု ရှိ/မရှိကို ညွှန်ပြသော မှန်/မှား တစ်ခုကိုသာ ပြန်ထုတ်ပေးမည်ဖြစ်သည်။
       * **filter** - စစ်ဆေးမည့် ရည်ရွယ်ထားသော feature များကို စစ်ထုတ် (filter) ရန် optional ဖြစ်သော expression တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက feature များအားလုံးကို စစ်ဆေးသွားလိမ့်မည်ဖြစ်သည်။
       * **limit** - ကိုက်ညီမှုရှိသည့် feature အရေအတွက်ကို ကန့်သတ်မည့် optional ဖြစ်သော ကိန်းပြည့်တစ်ခုဖြစ်သည်။ အကယ်၍ သတ်မှတ်မထားပါက ကိုက်ညီမှုရှိသော feature များအားလုံးကို ပြန်ထုတ်ပေးလိမ့်မည်ဖြစ်သည်။
       * **cache** - local spatial index (စက်အတွင်း သီးသန့်သိမ်းဆည်းသည့် တည်နေရာဆိုင်ရာအညွှန်းကိန်း) တစ်ခုကို တည်ဆောက်နိုင်ရန် ၎င်းကို ture ဟု သတ်မှတ်ထားရမည် (များသောအားဖြင့် နှေးကွေးသော ဒေတာဝန်ဆောင်မှုများနှင့် အလုပ်လုပ်မနေပါက ၎င်းကို လိုချင်မည်မဟုတ်ပေ)
   * - ဥပမာများ
     - * ``overlay_within('regions')`` → လက်ရှိ feature သည် တည်နေရာအရ region တစ်ခုအတွင်း တည်ရှိပါက TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_within('regions', filter:= population > 10000)`` → လက်ရှိ feature သည် လူဦးရေ 10000 ထက်ကျော်လွန်သော region တစ်ခုအတွင်း တည်နေရာအရ တည်ရှိပါက TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်
       * ``overlay_within('regions', name)`` → လက်ရှိ feature ကျရောက်နေသော region များအတွက် အမည်များ array တစ်ခု
       * ``array_to_string(overlay_within('regions', name))`` → လက်ရှိ feature ကျရောက်နေသော region များအတွက် ကော်မာဖြင့် ခွဲခြားရေးသားထားသည့် အမည်များစာရင်းစာသားတစ်ခု
       * ``array_sort(overlay_within(layer:='regions', expression:="name", filter:= population > 10000))`` → လက်ရှိ feature ကျရောက်နေပြီး လူဦး‌ရေ 10000 ထက်ကျော်လွန်သော region များ၏ အစဉ်လိုက်စီထားသော အမည်များ array တစ်ခု
       * ``overlay_within(layer:='regions', expression:= geom_to_wkt(@geometry), limit:=2)`` → လက်ရှိ feature ကျရောက်နေသော region နှစ်ခုထိ ပါဝင်သည့် (WKT ဖြင့်) ဂျီဩမေတြီများ array တစ်ခု


.. end_overlay_within_section

.. _expression_function_GeometryGroup_$perimeter:


$perimeter
..........

ဤ function သည် လက်ရှိ feature ၏ ပတ်လည်အနား အလျားကို ပြန်ထုတ်ပေးပါသည်။ ဤ function မှ တွက်ထုတ်ထားသော ပတ်လည်အနားသည် လက်ရှိ project ၏ စက်လုံးပုံ (ellipsoid) setting နှင့် အကွာအဝေးယူနစ် setting နှစ်မျိုးစလုံးအတိုင်း ဖြစ်ပါသည်။ ဥပမာအားဖြင့် project ကို စက်လုံးပုံ (ellipsoid) အဖြစ် သတ်မှတ်ထားပါက တွက်ချက်မှုမှရရှိလာသော ပတ်လည်အနားသည် စက်လုံးပုံအတိုင်း ဖြစ်နေမည်ဖြစ်ပြီး စက်လုံးပုံ setting သတ်မှတ်မထားပါက တွက်ချက်ရရှိသော ပတ်လည်အနားသည် ပြင်ညီဆိုင်ရာ (planimetric) ပတ်လည်အနားဖြစ်နေပေလိမ့်မည်။ 


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $perimeter
   * - ဥပမာများ
     - * ``$perimeter`` → 42


.. end_$perimeter_section

.. _expression_function_GeometryGroup_perimeter:


perimeter
.........

ဤ function သည် polygon ဂျီဩမေတြီတစ်ခု၏ ပတ်လည်အနားကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများကို ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) ရှိ ပြင်ညီအတိုင်း တွက်ချက်ပြီး ရရှိလာသော ပတ်လည်အနား၏ ယူနစ်များသည် ထို SRS ၏ ယူနစ်များနှင့် ကိုက်ညီနေမည်ဖြစ်သည်။ $perimeter function မှ ရရှိလာသည့် တွက်ချက်မှုများနှင့် မတူညီသည့်အချက်မှာ $perimeter သည် project ၏ ellipsoid setting နှင့် အကွာအဝေးယူနစ် setting များအတိုင်း စက်လုံးဆိုင်ရာ (ellipsoidal) တွက်ချက်မှုများကိုသာ ပြုလုပ်ခြင်းဖြစ်သည်။


.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - perimeter(geometry)
   * - Argument များ
     - * **geometry** - polygon ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``perimeter(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))'))`` → 12.0


.. end_perimeter_section

.. _expression_function_GeometryGroup_point_n:


point_n
.......

ဤ function သည် ဂျီဩမေတြီတစ်ခုမှ သီးခြား node (ဆုံမှတ်) တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - point_n(geometry, index)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
       * **index** - ပြန်ထုတ်ပေးမည့် node ၏ အညွှန်းကိန်းဖြစ်သည်။ 1 သည် ပထမဆုံး node ဖြစ်ပြီး အကယ်၍ တန်ဖိုးသည် အနုတ်လက္ခဏာဖြစ်ပါက ရွေးချယ်ထားသည့် မျဉ်းအဆစ် (vertex) အညွန်းကိန်း သည် ၎င်း၏ စုစုပေါင်းတန်ဖိုးထဲမှ ပကတိတန်ဖိုးကိုနုတ်ထားခြင်းဖြစ်သည်။
       * **vertex** - 0 မှ စတင်သည့် မျဉ်းအဆစ်အညွှန်းကိန်းဖြစ်သည်။ အကယ်၍ တန်ဖိုးသည် အနုတ်လက္ခဏာဖြစ်ပါက ရွေးချယ်ထားသည့် မျဉ်းအဆစ်အညွှန်းကိန်းသည် ၎င်း၏ စုစုပေါင်းတန်ဖိုးထဲမှ ပကတိတန်ဖိုးကိုနုတ်ထားခြင်းဖြစ်သည်။
   * - ဥပမာများ
     - * ``geom_to_wkt(point_n(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))'),2))`` → 'Point (4 0)'



.. end_point_n_section

.. _expression_function_GeometryGroup_point_on_surface:


point_on_surface
................

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏မျက်နှာပြင်ပေါ်တွင် အတိအကျတည်ရှိနေသည့် point တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - point_on_surface(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``point_on_surface(@geometry)`` → point ဂျီဩမေတြီတစ်ခု


.. end_point_on_surface_section

.. _expression_function_GeometryGroup_pole_of_inaccessibility:


pole_of_inaccessibility
.......................

ဤ function သည် မျက်နှာပြင်တစ်ခုအတွက် ခန့်မှန်း အလှမ်းဝေးသောဝင်ရိုး (pole of inaccessibility) ကို အနီးစပ်ဆုံးတွက်ချက်ပေးခြင်းဖြစ်ပြီး ၎င်းသည် မျက်နှာပြင်၏နယ်နိမိတ်မှ အဝေးဆုံးအတွင်းကျသော point ဖြစ်ပါသည်။ ဤ function သည် လက်ခံနိုင်မှု (tolerance) တစ်ခုအတွင်း အလှမ်းဝေးသော ဝင်ရိုးအမှန်ကို ရှာဖွေရာတွင် ကောင်းမွန်သည့် နည်းလမ်းတစ်ခုဖြစ်သည့် 'polylabel' နည်းလမ်း (Vladimir Agafonkin, 2016) ကို အသုံးပြုထားပါသည်။ ပိုမိုတိကျသည့် tolerance များသည် iteration (ထပ်ခါတလဲလဲပြုလုပ်ခြင်း) များများလိုအပ်မည်ဖြစ်ပြီး တွက်ချက်ရာတွင်လည်း ပိုမိုအချိန်ကြာမည်ဖြစ်သည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - pole_of_inaccessibility(geometry, tolerance)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **tolerance** - ဝင်ရိုးအမှန်တည်နေရာနှင့် ပြန်လည်ရရှိမည့် point အကြား အဝေးဆုံးအကွာအဝေး
   * - ဥပမာများ
     - * ``geom_to_wkt(pole_of_inaccessibility( geom_from_wkt('POLYGON((0 1, 0 9, 3 10, 3 3, 10 3, 10 1, 0 1))'), 0.1))`` → 'Point(1.546875 2.546875)'


.. end_pole_of_inaccessibility_section

.. _expression_function_GeometryGroup_project:


project
.......

ဤ function သည် အကွာအဝေး ၊ လားရာ (azimuth) နှင့် radian ဖြင့်တိုင်းတာထားသော အမြင့်တို့ကို အသုံးပြု၍  စမှတ်တစ်ခုမှ ခန့်မှန်းနေရာချထား (project) သော point တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - project(point, distance, azimuth, [elevation])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **point** - စတင်သည့် point
       * **distance** - ခန့်မှန်းနေရာချမည့်အကွာအဝေး
       * **azimuth** - radian ဖြင့် နာရီလက်တံအတိုင်းတိုင်းတာသည့် ဦးတည်ရာထောင့်ဖြစ်ပြီး၊ 0 သည် မြောက်အရပ်ကို ကိုယ်စားပြုပါသည်
       * **elevation** - radian ဖြင့် တိုင်းတာသည့် စောင်းထောင့်
   * - ဥပမာများ
     - * ``geom_to_wkt(project(make_point(1, 2), 3, radians(270)))`` → 'Point(-2, 2)'


.. end_project_section


.. _expression_function_GeometryGroup_relate:


relate
......

ဤ function သည် ဂျီဩမေတြီနှစ်ခုအကြား ဆက်စပ်မှု၏ Dimensional Extended 9 Intersection Model (DE-9IM)ကိုယ်စားပြုမှုကို စမ်းသပ်ခြင်းဖြစ်သည်။

**Relationship variant (ဆက်စပ်မှုဆိုင်ရာမူကွဲ)**

ဤ function သည် ဂျီဩမေတြီနှစ်ခုအကြား ဆက်စပ်မှု၏ Dimensional Extended 9 Intersection Model (DE-9IM) ကိုယ်စားပြုမှုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - relate(geometry, geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``relate( geom_from_wkt( 'LINESTRING(40 40,120 120)' ), geom_from_wkt( 'LINESTRING(40 40,60 120)' ) )`` → 'FF1F00102'


**Pattern match variant (ပုံသဏ္ဍာန်ကိုက်ညီမှုဆိုင်ရာ မူကွဲ)**

ဤ function သည် ဂျီဩမေတြီနှစ်ခုအကြား DE-9IM ဆက်စပ်မှု သည် သတ်မှတ်ထားသည့် pattern နှင့် ကိုက်ညီမှု ရှိ/မရှိကို စစ်ဆေးခြင်းဖြစ်သည်။


.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - relate(geometry, geometry, pattern)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **pattern** - ကိုက်ညီမှုရှိရမည့် DE-9IM pattern
   * - ဥပမာများ
     - * ``relate( geom_from_wkt( 'LINESTRING(40 40,120 120)' ), geom_from_wkt( 'LINESTRING(40 40,60 120)' ), '**1F001**' )`` → TRUE


.. end_relate_section

.. _expression_function_GeometryGroup_reverse:


reverse
.......

ဤ function သည် မျဉ်းကြောင်းတစ်ခုတွင်ရှိသော ၎င်း၏မျဉ်းအဆစ် (vertex) များ၏အစဉ်ကို ပြောင်းပြန်ပြုလုပ်ခြင်းဖြင့် ထိုမျဉ်းကြောင်း၏ဦးတည်ရာကို ပြောင်းပြန်ပြောင်းလဲပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - reverse(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt(reverse(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')))`` → 'LINESTRING(2 2, 1 1, 0 0)'


.. end_reverse_section

.. _expression_function_GeometryGroup_rotate:


rotate
......

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ လှည့်နေသော ဗားရှင်းတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများကို ထိုဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) ဖြင့် တွက်ချက်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - rotate(geometry, rotation, [center=NULL], [per_part=false])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **rotation** - ဒီဂရီဖြင့် နာရီလက်တံအတိုင်းအလှည့်
       * **center** - အလှည့်၏ အလယ်ဗဟိုအမှတ်ဖြစ်သည်။ အကယ်၍ သီးခြားမသတ်မှတ်ထားပါက ထို‌ဂျီဩမေတြီ၏ စတုဂံပုံအကျယ်အဝန်းနယ် (bounding box) ၏ အလယ်ဗဟိုကို အသုံးပြုမည်ဖြစ်သည်။
       * **per_part**- အပိုင်းတစ်ခုစီတိုင်းတွင် လှည့်ခြင်းကို လုပ်ဆောင်ပါမည်။ ထည့်သွင်းလိုက်သည့် ဂျီဩမေတြီသည် အစိတ်အပိုင်းများစွာပါဝင်ပြီး အလှည့်၏အလယ်ဗဟိုအမှတ်ကိုလည်း တိတိကျကျသတ်မှတ်ထားခြင်းမရှိလျှင် လှည့်ခြင်းကို အပိုင်းတစ်ခုစီ၏ စတုဂံပုံအကျယ်အဝန်းနယ်၏ အလယ်ဗဟို ပတ်လည်တွင် လုပ်ဆောင်မည်ဖြစ်သည်။
   * - ဥပမာများ
     - * ``rotate(@geometry, 45, make_point(4, 5))`` → (4, 5) point ပတ်လည်တွင် 45 ဒီဂရီ နာရီလက်တံအတိုင်း လှည့်ထားသော ဂျီဩမေတြီ
       * ``rotate(@geometry, 45)`` → ၎င်း၏ bounding box ၏အလယ်ဗဟိုပတ်လည်တွင် 45 ဒီဂရီ နာရီလက်တံအတိုင်း လှည့်ထားသော ဂျီဩမေတြီ


.. figure:: /docs/user_manual/expressions/expression_help/img/rotate.*
   :align: center
   :width: 100%


   လည်နေသော feature များ


.. end_rotate_section

.. _expression_function_GeometryGroup_roundness:


roundness
.........

ဤ function တွင် polygon တစ်ခုသည် စက်ဝိုင်းပုံသဏ္ဍာန်ဖြစ်ရန် မည်မျှနီးစပ်သည်ကို တွက်ချက်ပေးခြင်းဖြစ်သည်။ Polygon သည် ပြီးပြည့်စုံသော စက်ဝိုင်းပုံသဏ္ဍာန်တစ်ခုဖြစ်လျှင် TRUE ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပြီး လုံးလုံးပြင်ညီဖြစ်နေသောအခါ 0 ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - roundness(geometry)
   * - Argument များ
     - * **geometry** - polygon တစ်ခု
   * - ဥပမာများ
     - * ``round(roundness(geom_from_wkt('POLYGON(( 0 0, 0 1, 1 1, 1 0, 0 0))')), 3)`` → 0.785
       * ``round(roundness(geom_from_wkt('POLYGON(( 0 0, 0 0.1, 1 0.1, 1 0, 0 0))')), 3)`` → 0.260


.. end_roundness_section

.. _expression_function_GeometryGroup_scale:


scale
.....

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ စကေးကိုက်ပြုလုပ်ထားသော ဗားရှင်းတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် အဆိုပါ ဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်းဖြစ်ပါသည်။ 

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - scale(geometry, x_scale, y_scale, [center])


       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **x_scale** - x-ဝင်ရိုး စကေးကိုက် မြှောက်ဖော်ကိန်း
       * **y_scale** - y-ဝင်ရိုး စကေးကိုက် မြှောက်ဖော်ကိန်း
       * **center** - စကေးကိုက် အလယ်မှတ်ဖြစ်ပြီး အကယ်၍ သတ်မှတ်ထားခြင်းမရှိလျှင် ဂျီဩမေတြီ၏ စတုဂံပုံအကျယ်အဝန်းနယ် (bounding box) ၏ အလယ်မှတ်ကို အသုံးပြုသွားမည်ဖြစ်ပါသည်။ 
   * - ဥပမာများ
     - * ``scale(@geometry, 2, 0.5, make_point(4, 5))`` → (4, 5) point ပတ်လည်တွင် ရေပြင်ညီအရ ၂ ဆ နှင့် ဒေါင်လိုက်အရ တဝက် စကေးကိုက်ပြုလုပ်ထားသော ဂျီဩမေတြီ
       * ``scale(@geometry, 2, 0.5)`` → ၎င်း၏ bounding box ၏ အလယ်ဗဟိုပတ်လည်တွင် ရေပြင်ညီအရ ၂ ဆ နှင့် ဒေါင်လိုက်အရ တဝက် စကေးကိုက်ပြုလုပ်ထားသော ဂျီဩမေတြီ


.. end_scale_section

.. _expression_function_GeometryGroup_segments_to_lines:

segments_to_lines
.................

ဤ function သည် ထည့်သွင်းလိုက်သော ဂျီဩမေတြီထဲရှိ မျဉ်းပိုင်းတိုင်းအတွက် line တစ်ခုစီပါဝင်သည့် multi line ဂျီဩမေတြီကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - segments_to_lines(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``geom_to_wkt(segments_to_lines(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')))`` → 'MultiLineString ((0 0, 1 1),(1 1, 2 2))'


.. end_segments_to_lines_section

.. _expression_function_GeometryGroup_shared_paths:


shared_paths
............

ဤ function သည် ထည့်သွင်းလိုက်သော ဂျီဩမေတြီ နှစ်ခု မှ ဝေမျှအသုံးပြုထားသော လမ်းကြောင်းများအစုအစည်း တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ တူညီသော လားရာသို့ဦးတည်နေသည့် လမ်းကြောင်းများမှာ စုစည်းမှု၏ ပထမ အရာ ဖြစ်ပြီး ဆန့်ကျင်ဘက် လားရာသို့ဦးတည်နေသည့် လမ်းကြောင်းများမှာ စုစည်းမှု၏ ဒုတိယ အရာ ဖြစ်ပါသည်။ လမ်းကြောင်းများကို ပထမ ဂျီဩမေတြီ၏ လားရာအတိုင်း သတ်မှတ်ပေးထားပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - shared_paths(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - LineString/MultiLineString ဂျီဩမေတြီတစ်ခု 
       * **geometry2** - LineString/MultiLineString ဂျီဩမေတြီတစ်ခု 
   * - ဥပမာများ
     - * ``geom_to_wkt(shared_paths(geom_from_wkt('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)))'),geom_from_wkt('LINESTRING(151 100,126 156.25,126 125,90 161, 76 175)')))`` → 'GeometryCollection (MultiLineString ((126 156.25, 126 125),(101 150, 90 161),(90 161, 76 175)),MultiLineString EMPTY)'
       * ``geom_to_wkt(shared_paths(geom_from_wkt('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),geom_from_wkt('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))')))`` → 'GeometryCollection (MultiLineString EMPTY,MultiLineString ((76 175, 90 161),(90 161, 101 150),(126 125, 126 156.25)))'


.. end_shared_paths_section

.. _expression_function_GeometryGroup_shortest_line:


shortest_line
.............

ဤ function သည် ဂျီဩမေတြီ (၁) နှင့် (၂) ကို ဆက်သွယ်ထားသော အတိုဆုံးမျဉ်းကို ပြန်ထုတ်ပေးပါသည်။ ရရှိလာမည့် မျဉ်းသည် ဂျီဩမေတြီ (၁) ၌ စတင်၍ (၂) ၌ အဆုံးသတ်မည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - shortest_line(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - အတိုဆုံးမျဉ်းကို ရှာဖွေမည့် စတင်သည့် ဂျီဩမေတြီ
       * **geometry2** - အတိုဆုံးမျဉ်းကို ရှာဖွေမည့် အဆုံး ဂျီဩမေတြီ 
   * - ဥပမာများ
     - * ``geom_to_wkt(shortest_line(geom_from_wkt('LINESTRING (20 80, 98 190, 110 180, 50 75 )'),geom_from_wkt('POINT(100 100)')))`` → 'LineString(73.0769 115.384, 100 100)'



.. end_shortest_line_section

.. _expression_function_GeometryGroup_simplify:


simplify
........

ဤ function သည် အကွာအဝေးကို အခြေခံသော ကန့်သတ်ချက်တစ်ခု (“Douglas Peucker” algorithm ကို ဆိုလိုပါသည်) ကို အသုံးပြု၍ node (အဆစ်) များကို ဖယ်ရှားပေးပြီး ဂျီဩမေတြီကို ရိုးရှင်းစေပါသည်။ ဤ algorithm သည် ဂျီဩမေတြီများတွင် ကြီးမားသော ကွဲလွဲမှုများ/သွေဖယ်မှုများကို ထိန်းသိမ်းထားပေးပြီး မျဉ်းဖြောင့်နီးပါးဖြစ်နေသော မျဉ်းပိုင်းများတွင် vertex များ၏ အရေအတွက်ကို လျှော့ချပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - simplify(geometry, tolerance)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **tolerance** - ဖယ်ရှားရမည့် point များအတွက် အဖြောင့်မျဉ်းပိုင်းများမှ အများဆုံး ကွဲလွဲမှု/သွေဖယ်မှု 
   * - ဥပမာများ
     - * ``geom_to_wkt(simplify(geometry:=geom_from_wkt('LineString(0 0, 5 0.1, 10 0)'),tolerance:=5))`` → 'LineString(0 0, 10 0)'


.. end_simplify_section

.. _expression_function_GeometryGroup_simplify_vw:


simplify_vw
...........

ဤ function သည် ဧရိယာကို အခြေခံသော ကန့်သတ်ချက်တစ်ခု (“Visvalingam-Whyatt” algorithm ကို ဆိုလိုပါသည်) ကို အသုံးပြု၍ node များကို ဖယ်ရှားခြင်းဖြင့် ဂျီဩမေတြီကို ရိုးရှင်းစေပါသည်။ ဤ algorithm သည် ဂျီဩမေတြီများထဲတွင် သေးငယ်သော ဧရိယာလေးများကို ဖြစ်ပေါ်စေသည့် vertex များကို ဖယ်ရှားပေးပါသည်၊ ဥပမာ- ကျဉ်းမြောင်းသော ဆူးချွန်ပုံများ သို့မဟုတ် မျဉ်းဖြောင့်နီးပါးဖြစ်နေသော မျဉ်းပိုင်းများ။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - simplify_vw(geometry, tolerance)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **tolerance** - node များကိုဖယ်ရှားရန်အတွက် node တစ်ခုမှဖန်တီးသော အများဆုံးဧရိယာအတိုင်းအတာ
   * - ဥပမာများ
     - * ``geom_to_wkt(simplify_vw(geometry:=geom_from_wkt('LineString(0 0, 5 0, 5.01 10, 5.02 0, 10 0)'),tolerance:=5))`` → 'LineString(0 0, 10 0)'


.. end_simplify_vw_section

.. _expression_function_GeometryGroup_single_sided_buffer:


single_sided_buffer
...................

ဤ function သည် မျဉ်းကြောင်း ဂျီဩမေတြီတစ်ခု၏ တစ်ဖက်တည်း၌သာ ကြားခံ (buffer) ပြုလုပ်၍ ဖြစ်ပေါ်လာသော ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ အကွာအဝေးများမှာ အဆိုပါ ဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်းဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ) 
     - single_sided_buffer(geometry, distance, [segments=8], [join=1], [miter_limit=2.0])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - (multi)linestring ဂျီဩမေတြီတစ်ခု
       * **distance** - ကြားခံအကွာအဝေး၊ အပေါင်းတန်ဖိုး များဖြစ်ပါက မျဉ်းကြောင်းများ၏ ဘယ်ဘက်သို့ ကြားခံပြုလုပ်မည်ဖြစ်ပြီး အနှုတ်တန်ဖိုးဖြစ်ပါက မျဉ်းကြောင်းများ၏ လက်ယာဘက်သို့ ကြားခံပြုလုပ်မည်ဖြစ်ပါသည်။ 
       * **segments** - လုံးဝန်းသော အဆက် (join) style ကို အသုံးပြုသောအခါတွင် စက်ဝိုင်း၏ လေးပုံတစ်ပုံ ကို ကိုယ်စားပြုရန် အသုံးပြုရမည့် မျဉ်းပိုင်းအရေအတွက်။ အရေအတွက်များလေလေ buffer တွင် node များပိုမိုပါလာပြီး ချောမွေ့လေဖြစ်ပါသည်။
       * **ထိစပ်မှု** - ထောင့်စွန်းများအတွက် အဆက် (join) style ဖြစ်ပြီး၊ 1 = round ၊ 2 = miter နှင့် 3 = bevel တို့ဖြစ်ပါသည်။ 
       * **miter_limit** - အလွန်ချွန်သော ထောင့်စွန်းများအတွက် အသုံးပြုသော miter အချိုးကန့်သတ်ချက် (miter join ကို အသုံးပြုသည့်အခါအတွက်သာ ဖြစ်ပါသည်)
   * - ဥပမာများ
     - * ``single_sided_buffer(@geometry, 10.5)`` → ဘယ်ဘက်သို့ 10.5 ယူနစ်ဖြင့် ကြားခံပြုလုပ်ထားသည့် မျဉ်းကြောင်း
       * ``single_sided_buffer(@geometry, -10.5)`` → ညာဘက်သို့ 10.5 ယူနစ်ဖြင့် ကြားခံပြုလုပ်ထားသည့် မျဉ်းကြောင်း
       * ``single_sided_buffer(@geometry, 10.5, segments:=16, join:=1)`` → ပိုမိုချောမွေ့သော ကြားခံရရှိစေရန် မျဉ်းပိုင်းများစွာ အသုံးပြုထားပြီး ဘယ်ဘက်သို့ 10.5 ယူနစ်ဖြင့် ကြားခံပြုလုပ်ထားသည့် မျဉ်းကြောင်း
       * ``single_sided_buffer(@geometry, 10.5, join:=3)`` → beveled join ကို အသုံးပြုထားပြီး ဘယ်ဘက်သို့ 10.5 ယူနစ်ဖြင့် ကြားခံပြုလုပ်ထားသည့် မျဉ်းကြောင်း


.. end_single_sided_buffer_section

.. _expression_function_GeometryGroup_sinuosity:


sinuosity
.........

ဤ function သည် မျဉ်းကွေးတစ်ခု၏ အကွေးပမာဏ ကို ပြန်ထုတ်ပေးပါသည်။ ၎င်းသည် အကွေးအလျားနှင့် အဆိုပါမျဉ်း၏ အဆုံးမှတ်များကြား မျဉ်းဖြောင့် (2D) အကွာအဝေးတို့ကို အချိုးချထားခြင်းဖြစ်သည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - sinuosity(geometry)
   * - Argument များ
     - * **geometry** - ထည့်သွင်းသော မျဉ်းကွေး (စက်ဝိုင်းပုံ မျဉ်းကြောင်း၊ မျဉ်းကြောင်း)
   * - ဥပမာများ
     - * ``round(sinuosity(geom_from_wkt('LINESTRING(2 0, 2 2, 3 2, 3 3)')), 3)`` → 1.265
       * ``sinuosity(geom_from_wkt('LINESTRING( 3 1, 5 1)'))`` → 1.0


.. end_sinuosity_section

.. _expression_function_GeometryGroup_smooth:


smooth
......

ဤ function သည် ဂျီဩမေတြီတစ်ခုတွင် ထောင့်စွန်းများကို လုံးဝန်းစေသော node အပိုများကို ထည့်သွင်းခြင်းဖြင့် ဂျီဩမေတြီတစ်ခုကို ချောမွေ့စေပါသည်။ ထည့်သွင်းလိုက်သော ဂျီဩမေတြီတွင် Z သို့မဟုတ် M တန်ဖိုးများ ပါဝင်နေလျှင် အဆိုပါအရာများပါ ချောမွေ့သွားမည်ဖြစ်ပြီး ရလာဒ် ဂျီဩမေတြီသည် ထည့်သွင်းလိုက်သော ဂျီဩမေတြီကဲ့သို့ပင် တူညီသောအတိုင်းအတာများ ဆက်လက်ကျန်ရှိမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - smooth(geometry, [iterations=1], [offset=0.25], [min_length=-1], [max_angle=180])
       
       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **iterations** - လုပ်ဆောင်မည့် ချောမွေ့ခြင်း ထပ်ခါတလဲလဲဆောင်ရွက်မှု အကြိမ်အရေအတွက်ဖြစ်ပြီး၊ ကိန်းဂဏန်းကြီးလေလေ ပိုမိုချောမွေ့သောရလာဒ်ကို ရရှိလေဖြစ်သော်လည်း ဂျီဩမေတြီကို ပိုမိုရှုပ်ထွေးစေပါသည်။
       * **offset** - ချောမွေ့အောင်လုပ်ထားသော ဂျီဩမေတြီသည် မူလဂျီဩမေတြီအတိုင်း မည်မျှနီးနီးကပ်ကပ်ဖြစ်ရမည်ကို ထိန်းချုပ်ပေးသော (0) နှင့် (0.5) အကြားရှိ တန်ဖိုးဖြစ်ပါသည်။ ပိုမိုသေးငယ်သောတန်ဖိုးများသည် ပိုမိုနီးစပ်စွာ ချောမွေ့စေမည်ဖြစ်ပြီး ပိုမိုကြီးမားသော တန်ဖိုးများသည် နီးစပ်မှုလျော့နည်းသော ချောမွေ့မှုကို ရရှိစေပါသည်။ 
       * **min_length** - ချောမွေ့အောင်လုပ်ဆောင်ခြင်းတွင်အသုံးပြုမည့် မျဉ်းပိုင်းများ၏ အနည်းဆုံးအလျား ဖြစ်ပါသည်။ ဂျီဩမေတြီ၏ တိုသော မျဉ်းပိုင်းများတွင် များပြားသော node အပိုများ ထပ်ထည့်ခြင်းကို ရှောင်ရှားရန် ဤ parameter ကို အသုံးပြုနိုင်ပါသည်။ 
       * **max_angle** - ချောမွေ့စေခြင်းအတွက် လုပ်ဆောင်ရာတွင် node တွင်အသုံးပြုမည့် အကြီးဆုံးထောင့် (0 မှ 180 အတွင်း) ဖြစ်ပါသည်။ ရည်ရွယ်ချက်ရှိရှိဖြင့် အကြီးဆုံးထောင့်တန်ဖိုးကို လျှော့ချ ပေးခြင်းဖြင့် ဂျီဩမေတြီများရှိ ချွန်ထက်သော ထောင့်စွန်းများကို ထိန်းသိမ်းထားပေးနိုင်မည် ဖြစ်ပါသည်။ ဥပမာအားဖြင့် 80 ဒီဂရီတန်ဖိုးသည် ဂျီဩမေတြီထဲရှိ ဒေါင့်မှန် ထောင့်များကို ထိန်းသိမ်းပေးထားမည်ဖြစ်သည်။
   * - ဥပမာများ
     - * ``geom_to_wkt(smooth(geometry:=geom_from_wkt('LineString(0 0, 5 0, 5 5)'),iterations:=1,offset:=0.2,min_length:=-1,max_angle:=180))`` → 'LineString (0 0, 4 0, 5 1, 5 5)'


.. end_smooth_section

.. _expression_function_GeometryGroup_square_wave:


square_wave
...........

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ နယ်နိမိတ်တလျှောက် စတုရန်းပုံ/စတုဂံပုံ လှိုင်းတွန့်များ တည်ဆောက်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - square_wave(geometry, wavelength, amplitude, [strict=False])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **wavelength** - စတုရန်း လှိုင်းတွန့်ပုံ၏ လှိုင်းအလျား (wavelength)
       * **amplitude** - စတုရန်း လှိုင်းတွန့်ပုံ၏ လှိုင်းလွှဲကျယ် (amplitude)
       * **strict** - Default အားဖြင့် လှိုင်းအလျား argument ကို "maximum wavelength" အဖြစ် ပြုမူပါသည်၊ ဤတွင် ဂျီဩမေတြီ၏ နယ်နိမိတ်တလျှောက်တွင် စတုရန်းပုံလှိုင်းတွန့် အရေအတွက် အတိအကျ ဖန်တီးနိုင်စေရန် အမှန်တကယ်ရှိသော လှိုင်းအလျား ကို ပြောင်းလဲညှိနှိုင်း ပေးလိမ့်မည်ဖြစ်ပါသည်။ အကယ်၍ strict argument ကို true ဟု သတ်မှတ်လိုက်ပါက လှိုင်းအလျားကို အတိအကျအသုံးပြုလိမ့်မည် ဖြစ်ပြီး နောက်ဆုံးလှိုင်းတွန့်ပုံအတွက် မပြည့်စုံသော pattern ကို အသုံးပြုနိုင်ပါသည်။ 
   * - ဥပမာများ
     - * ``square_wave(geom_from_wkt('LineString(0 0, 10 0)'), 3, 1)`` → မျဉ်းကြောင်းတလျှောက် wavelength 3 နှင့် amplitude 1 ရှိသော စတုရန်းလှိုင်းတွန့်များ


.. end_square_wave_section

.. _expression_function_GeometryGroup_square_wave_randomized:


square_wave_randomized
......................

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ နယ်နိမိတ်တလျှောက်တွင် ကျပန်းဖြစ်နေသော စတုရန်း/စတုဂံ ပုံ လှိုင်းတွန့်များကို တည်ဆောက်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - square_wave_randomized(geometry, min_wavelength, max_wavelength, min_amplitude, max_amplitude, [seed=0])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **min_wavelength** - လှိုင်းတွန့်များ၏ အငယ်ဆုံး လှိုင်းအလျား
       * **max_wavelength** - လှိုင်းတွန့်များ၏ အကြီးဆုံး လှိုင်းအလျား
       * **min_amplitude** - လှိုင်းတွန့်များ၏ အငယ်ဆုံး လှိုင်းလွှဲကျယ်
       * **max_amplitude** - လှိုင်းတွန့်များ၏ အကြီးဆုံး လှိုင်းလွှဲကျယ်
       * **seed** - လှိုင်းတွန့်များရရှိရန် ကျပန်း အစပျိုးမှု (seed) တစ်ခုကို သတ်မှတ်ပေးပါသည်။ အကယ်၍ seed သည် 0 ဖြစ်နေလျှင် လုံးဝကျပန်းဖြစ်နေသော လှိုင်းတွန့်များအစုကို ထုတ်ပေးမည်ဖြစ်ပါသည်။
   * - ဥပမာများ
     - * ``square_wave_randomized(geom_from_wkt('LineString(0 0, 10 0)'), 2, 3, 0.1, 0.2)`` → မျဉ်းကြောင်းတလျှောက် wavelength 2 နှင့် 3 အကြားရှိပြီး amplitude 0.1 နှင့် 0.2 အကြားရှိသော ကျပန်းအရွယ်အစား စတုရန်းလှိုင်းတွန့်များ


.. end_square_wave_randomized_section

.. _expression_function_GeometryGroup_start_point:

start_point
...........

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ ပထမဆုံး ဆုံမှတ် (node) ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - start_point(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``geom_to_wkt(start_point(geom_from_wkt('LINESTRING(4 0, 4 2, 0 2)')))`` → 'Point (4 0)'


.. end_start_point_section

.. _expression_function_GeometryGroup_straight_distance_2d:


straight_distance_2d
....................

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ ပထမဆုံးနှင့် နောက်ဆုံး မျဉ်းအဆစ် (vertex) များအကြား တိုက်ရိုက်/ပြင်ညီအကွာအဝေးကို ပြန်ထုတ်ပေးပါသည်။ ဂျီဩမေတြီသည် မျဉ်းကွေးတစ်ခု (စက်ဝိုင်းပုံမျဉ်း၊ မျဉ်းကြောင်း) ဖြစ်ရပါမည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - straight_distance_2d(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
   * - ဥပမာများ
     - * ``straight_distance_2d(geom_from_wkt('LINESTRING(1 0, 1 1)'))`` → 1
       * ``round(straight_distance_2d(geom_from_wkt('LINESTRING(1 4, 3 5, 5 0)')), 3)`` → 5.657


.. end_straight_distance_2d_section

.. _expression_function_GeometryGroup_sym_difference:

sym_difference
..............

ဤ function သည် ထိဖြတ်ခြင်းမရှိသည့် ဂျီဩမေတြီနှစ်ခု၏ အပိုင်းများကို ကိုယ်စားပြုသော ဂျီဩမေတြီ တစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - sym_difference(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt( sym_difference( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 8 8)' ) ) )`` → 'LINESTRING(5 5, 8 8)'


.. end_sym_difference_section

.. _expression_function_GeometryGroup_tapered_buffer:


tapered_buffer
..............

ဤ function သည် line ဂျီဩမေတြီ တလျှောက်တွင် buffer တစ်ခုကို ဖန်တီးပေးပြီး buffer ၏အချင်းသည် line ၏ အလျားပေါ်မူတည်၍ ညီတူညီမျှ ပြောင်းလဲပါသည်။ 

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - tapered_buffer(geometry, start_width, end_width, [segments=8])
       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်

   * - Argument များ
     - * **geometry** - ထည့်သွင်းလိုက်သည့် ဂျီဩမေတြီဖြစ်ပြီး (multi)line ဂျီဩမေတြီတစ်ခု ဖြစ်ရပါမည်။
       * **start_width** - မျဉ်းကြောင်း၏အစ၌ ရှိသော buffer ၏ အကျယ်
       * **end_width** - မျဉ်းကြောင်း ၏ အဆုံး၌ ရှိသော buffer ၏ အကျယ်
       * **segments** - Buffer တွင်း စက်ဝိုင်း၏လေးပုံတစ်ပုံ မျဉ်းကွေးကို အနီးစပ်ဆုံးရရှိစေရန် မျဉ်းပိုင်းများ အရေအတွက်
   * - ဥပမာများ
     - * ``tapered_buffer(geometry:=geom_from_wkt('LINESTRING(1 2, 4 2)'),start_width:=1,end_width:=2,segments:=8)`` → Line ဂျီဩမေတြီတလျှောက် အချင်း 1 နှင့်စပြီး အဆုံးသတ်တွင် အချင်း 2 ဖြင့် အဆုံးသတ်သည့် အဖျားချွန် buffer တစ်ခု


.. figure:: /docs/user_manual/processing_algs/qgis/img/tapered_buffer.png
   :align: center
   :width: 100%


   Line feature များပေါ်ရှိ အဖျားချွန် buffer


.. end_tapered_buffer_section

.. _expression_function_GeometryGroup_touches:


touches
.......

ဤ function တွင် ဂျီဩမေတြီတစ်ခုသည် အခြားတစ်ခုကို ထိနေခြင်း ရှိ/မရှိ စစ်ဆေးပေးပြီး အကယ်၍ ဂျီဩမေတြီများသည် အတွင်းပိုင်းများ မထိဖြတ်သော်လည်း အနည်းဆုံး ဘုံတူညီနေသော point တစ်ခုရှိနေလျှင် TRUE ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - touches(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``touches( geom_from_wkt( 'LINESTRING(5 3, 4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )`` → TRUE
       * ``touches( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(5 5)' ) )`` → FALSE


.. end_touches_section

.. _expression_function_GeometryGroup_transform:


transform
.........

ဤ function သည် မူလအရင်းအမြစ် CRS တစ်ခုမှ လိုချင်သည့် (destination) CRS တစ်ခုသို့ ပြောင်းလဲထားသော ဂျီဩမေတြီတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - transform(geometry, source_auth_id, dest_auth_id)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **source_auth_id** - အရင်းအမြစ် မူပိုင် CRS ID
       * **dest_auth_id** - လိုချင်သည့် မူပိုင် CRS ID
   * - ဥပမာများ
     - * ``geom_to_wkt( transform( make_point(488995.53240249, 7104473.38600835), 'EPSG:2154', 'EPSG:4326' ) )`` → 'POINT(0 51)'


.. end_transform_section

.. _expression_function_GeometryGroup_translate:


translate
.........

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ ရွှေ့ပြောင်းထားသော ဗားရှင်းတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများမှာ အဆိုပါ ဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်းဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ) 
     - translate(geometry, dx, dy)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **dx** - delta x
       * **dy** - delta y
   * - ဥပမာများ
     - * ``translate(@geometry, 5, 10)`` → မူရင်းဂျီဩမေတြီနှင့် အမျိုးအစားတူညီသော ဂျီဩမေတြီတစ်ခု


.. figure:: /docs/user_manual/processing_algs/qgis/img/translate_geometry.png
   :align: center
   :width: 100%


   ရွှေ့ပြောင်းထားသော feature များ


.. end_translate_section

.. _expression_function_GeometryGroup_triangular_wave:


triangular_wave
...............

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ နယ်နိမိတ်တလျှောက်တွင် တြိဂံပုံလှိုင်းတွန့်များ တည်ဆောက်ပေးပါသည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - triangular_wave(geometry, wavelength, amplitude, [strict=False])
       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **wavelength** - တြိဂံလှိုင်းတွန့်ပုံ၏ လှိုင်းအလျား
       * **amplitude** - တြိဂံလှိုင်းတွန့်ပုံ၏ လှိုင်းလွှဲကျယ်
       * **strict** - Default အားဖြင့် လှိုင်းအလျား argument ကို "maximum wavelength" အဖြစ် ပြုမူပါသည်၊ ဤတွင် ဂျီဩမေတြီ၏ နယ်နိမိတ်တလျှောက်တွင် တြိဂံပုံလှိုင်းတွန့် အရေအတွက် အတိအကျ ဖန်တီးနိုင်စေရန် အမှန်တကယ်ရှိသော လှိုင်းအလျား ကို ပြောင်းလဲညှိနှိုင်း ပေးလိမ့်မည်ဖြစ်ပါသည်။ အကယ်၍ strict argument ကို true ဟု သတ်မှတ်လိုက်ပါက လှိုင်းအလျားကို အတိအကျအသုံးပြုလိမ့်မည် ဖြစ်ပြီး နောက်ဆုံးလှိုင်းတွန့်ပုံအတွက် မပြည့်စုံသော pattern ကို အသုံးပြုနိုင်ပါသည်။ 
   * - ဥပမာများ
     - * ``triangular_wave(geom_from_wkt('LineString(0 0, 10 0)'), 3, 1)`` → Linestring တလျှောက် wavelength 3 နှင့် amplitude 1 ရှိသော တြိဂံပုံလှိုင်းတွန့်များ


.. end_triangular_wave_section

.. _expression_function_GeometryGroup_triangular_wave_randomized:


triangular_wave_randomized
..........................

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ နယ်နိမိတ်တလျှောက်တွင် ကျပန်းဖြစ်နေသော တြိဂံပုံ လှိုင်းတွန့်များကို တည်ဆောက်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - triangular_wave_randomized(geometry, min_wavelength, max_wavelength, min_amplitude, max_amplitude, [seed=0])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **min_wavelength** - လှိုင်းတွန့်များ၏ အငယ်ဆုံး လှိုင်းအလျား
       * **max_wavelength** - လှိုင်းတွန့်များ၏ အကြီးဆုံး လှိုင်းအလျား
       * **min_amplitude** - လှိုင်းတွန့်များ၏ အငယ်ဆုံး လှိုင်းလွှဲကျယ်
       * **max_amplitude** - လှိုင်းတွန့်များ၏ အကြီးဆုံး လှိုင်းလွှဲကျယ်
       * **seed** - လှိုင်းတွန့်များရရှိရန် ကျပန်း အစပျိုးမှု (seed) တစ်ခုကို သတ်မှတ်ပေးပါသည်။ အကယ်၍ seed သည် 0 ဖြစ်နေလျှင် လုံးဝကျပန်းဖြစ်နေသော လှိုင်းတွန့်များအစုကို ထုတ်ပေးမည်ဖြစ်ပါသည်။
   * - ဥပမာများ
     - * ``triangular_wave_randomized(geom_from_wkt('LineString(0 0, 10 0)'), 2, 3, 0.1, 0.2)`` → Linestring တလျှောက် wavelength 2 နှင့် 3 ကြားရှိပြီး amplitude 0.1 နှင့် 0.2 ကြားရှိသော ကျပန်းအရွယ်အစားရှိသည့် တြိဂံပုံလှိုင်းတွန့်များ


.. end_triangular_wave_randomized_section

.. _expression_function_GeometryGroup_union:


union
.....

ဤ function သည် ဂျီဩမေတြီများ၏ ပေါင်းစည်းမှု အမှတ်အစုကို ကိုယ်စားပြုသည့် ဂျီဩမေတြီကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - union(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``geom_to_wkt( union( make_point(4, 4), make_point(5, 5) ) )`` → 'MULTIPOINT(4 4, 5 5)'


.. end_union_section

.. _expression_function_GeometryGroup_wave:

wave
....

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ နယ်နိမိတ်တလျှောက် လုံးဝန်းသော (ပုံမှန် အတက်အကျဖြစ်နေသည့် (sine-like)) လှိုင်းများကို တည်ဆောက်ပေးပါသည်။ 

.. list-table::
   :widths: 15 85


   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - wave(geometry, wavelength, amplitude, [strict=False])
       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **wavelength** - ပုံမှန် အတက်အကျဖြစ်နေသည့် (sine-like) လှိုင်းတွန့်၏ လှိုင်းအလျား
       * **amplitude** - ပုံမှန် အတက်အကျဖြစ်နေသည့် (sine-like) လှိုင်းတွန့်၏ လှိုင်းလွှဲကျယ်
       * **strict** - Default အားဖြင့် လှိုင်းအလျား argument ကို "maximum wavelength" အဖြစ် ပြုမူပါသည်၊ ဤတွင် ဂျီဩမေတြီ၏ နယ်နိမိတ်တလျှောက်တွင် လှိုင်းတွန့် အရေအတွက် အတိအကျ ဖန်တီးနိုင်စေရန် အမှန်တကယ်ရှိသော လှိုင်းအလျား ကို ပြောင်းလဲညှိနှိုင်းပေးလိမ့်မည်ဖြစ်ပါသည်။ အကယ်၍ strict argument ကို true ဟု သတ်မှတ်လိုက်ပါက လှိုင်းအလျားကို အတိအကျအသုံးပြုလိမ့်မည် ဖြစ်ပြီး နောက်ဆုံးလှိုင်းတွန့်ပုံအတွက် မပြည့်စုံသော pattern ကို အသုံးပြုနိုင်ပါသည်။
   * - ဥပမာများ
     - * ``wave(geom_from_wkt('LineString(0 0, 10 0)'), 3, 1)`` → Linestring တလျှောက် wavelength 3 နှင့် amplitude 1 ရှိသော ပုံမှန် အတက်အကျဖြစ်နေသည့် (sine-like) လှိုင်းတွန့်များ


.. end_wave_section

.. _expression_function_GeometryGroup_wave_randomized:

wave_randomized
...............

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ နယ်နိမိတ်တလျှောက် တွင် ကျပန်းဖြစ်နေသော မျဉ်းကွေး (sine-like) လှိုင်းတွန့်များကို တည်ဆောက်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - wave_randomized(geometry, min_wavelength, max_wavelength, min_amplitude, max_amplitude, [seed=0])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
       * **min_wavelength** - လှိုင်းများ၏ အငယ်ဆုံးလှိုင်းအလျား
       * **max_wavelength** - လှိုင်းများ၏ အကြီးဆုံးလှိုင်းအလျား
       * **min_amplitude** - လှိုင်းများ၏ အငယ်ဆုံးလှိုင်းလွှဲကျယ်
       * **max_amplitude** - လှိုင်းများ၏ အကြီးဆုံး လှိုင်းလွှဲကျယ်
       * **seed** - လှိုင်းတွန့်များ ထုတ်ပေးခြင်းအတွက် ကျပန်း အစပျိုးမှု (seed) တစ်ခုကို သတ်မှတ်ပေးပါသည်။ အကယ်၍ seed သည် 0 ဖြစ်နေလျှင် လုံးဝကျပန်းဖြစ်နေသော လှိုင်းတွန့်များအစုတစ်ခုကို ထုတ်လုပ်ပေးပါသည်။
   * - ဥပမာများ
     - * ``wave_randomized(geom_from_wkt('LineString(0 0, 10 0)'), 2, 3, 0.1, 0.2)`` → မျဉ်းကြောင်းတလျှောက် wavelength 2 နှင့် 3 ကြားရှိပြီး amplitude 0.1 နှင့် 0.2 ကြားရှိသည့် ကျပန်းအရွယ်အစား မျဉ်းကွေးသဏ္ဍာန်လှိုင်းတွန့်များ


.. end_wave_randomized_section

.. _expression_function_GeometryGroup_wedge_buffer:


wedge_buffer
............

ဤ function သည် point ဂျီဩမေတြီတစ်ခုမှ အစပြုလာသော သပ်ပုံသဏ္ဍာန် ကြားခံဧရိယာတစ်ခုကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - wedge_buffer(center, azimuth, width, outer_radius, [inner_radius=0.0])

       [] သည် optional (မဖြစ်မနေလုပ်ဆောင်ရန်မလိုသော) argument များဖြစ်သည်
   * - Argument များ
     - * **center** - ကြားခံဧရိယာ၏ (အစပြုရာ) အလယ်မှတ်၊ point ဂျီဩမေတြီဖြစ်ရပါမည်။ 
       * **azimuth** - Point သို့ သပ်ပုံ၏အလယ်အတွက် ထောင့် (ဒီဂရီဖြင့်)
       * **width** - ကြားခံဧရိယာအကျယ် (ဒီဂရီဖြင့်)၊ သပ်ပုံသည် ဦးတည်ရာထောင့်၏ လားရာတစ်ဖက်စီတွင် ထောင့်၏အကျယ်၏ တဝက်သို့ တိုးချဲ့ ပေလိမ့်မည်။ 
       * **outer_radius** - ကြားခံဧရိယာအတွက် အပြင်ပိုင်းအချင်းဝက်
       * **inner_radius** - ရွေးချယ်ခွင့်ရှိသော ကြားခံဧရိယာအတွက် အတွင်းပိုင်းအချင်းဝက်
   * - ဥပမာများ
     - * ``wedge_buffer(center:=geom_from_wkt('POINT(1 2)'),azimuth:=90,width:=180,outer_radius:=1)`` → point (1,2) ကို ဗဟိုအဖြစ်သတ်မှတ်ထားသည့် သပ်ပုံကြားခံတစ်ခုဖြစ်ပြီး ၎င်းသည် အရှေ့ဘက်ကို မျက်နှာမူ၍ အကျယ်မှာ 180 ဒီဂရီရှိပြီး အပြင်အချင်းဝက်မှာ 1 ဖြစ်သည်


.. end_wedge_buffer_section

.. _expression_function_GeometryGroup_within:


within
......

ဤ function သည် ဂျီဩမေတြီတစ်ခုသည် အခြားတစ်ခုအတွင်း ကျရောက်နေခြင်း ရှိ/မရှိ စစ်ဆေးပေးပါသည်။ ဂျီဩမေတြီ(၁) သည် ဂျီဩမေတြီ(၂) အတွင်း လုံးဝကျရောက်နေလျှင် TRUE ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - within(geometry1, geometry2)
   * - Argument များ
     - * **geometry1** - ဂျီဩမေတြီတစ်ခု
       * **geometry2** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``within( geom_from_wkt( 'POINT( 0.5 0.5)' ), geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ) )`` → TRUE
       * ``within( geom_from_wkt( 'POINT( 5 5 )' ), geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0 ))' ) )`` → FALSE


.. end_within_section

.. _expression_function_GeometryGroup_$x:


$x
..

ဤ function သည် လက်ရှိအသုံးပြုနေသော point feature ၏ x ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ feature သည် point များစွာပါဝင်သော feature ဖြစ်နေပါက ပထမဆုံး point ၏ x ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။ **WARNING (သတိပေးချက်)- ဤ function သည် အပြစ်အနာအဆာပါရှိနေပါသည်။ @geometry variable အစား x() function ကို အစားထိုးအသုံးပြုရန် အကြံပြုပါသည်။**

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $x
   * - ဥပမာများ
     - * ``$x`` → 42


.. end_$x_section

.. _expression_function_GeometryGroup_x:


x
.

ဤ function သည် point ဂျီဩမေတြီတစ်ခု၏ x ကိုဩဒိနိတ် သို့မဟုတ် point မဟုတ်သော ဂျီဩမေတြီတစ်ခုအတွက် အလယ်ဗဟိုမှတ် (centroid) ၏ x ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - x(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``x( geom_from_wkt( 'POINT(2 5)' ) )`` → 2
       * ``x( @geometry )`` → လက်ရှိ feature ၏ အလယ်ဗဟိုရှိ x ကိုဩဒိနိတ်


.. end_x_section

.. _expression_function_GeometryGroup_$x_at:


$x_at
.....

ဤ function သည် လက်ရှိအသုံးပြုနေသော feature ဂျီဩမေတြီ၏ x ကိုဩဒိနိတ်ကိုရရှိစေပါသည်။ **WARNING(သတိပေးချက်) - ဤလုပ်ဆောင်ချက်သည် အပြစ်အနာအဆာ ပါရှိနေပါသည်။ @geometry variable အစား x_at function ဖြင့် အစားထိုးအသုံးပြုရန် အကြံပြုပါသည်။**


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $x_at(vertex)
   * - Argument များ
     - * **vertex** - လက်ရှိအသုံးပြုနေသော ဂျီဩမေတြီ၏ မျဉ်းဆစ် အညွှန်းကိန်း (အညွှန်းကိန်းမှာ (0)မှစတင်ပြီး ၊ နောက်ဆုံးအညွှန်းကိန်းမှဆိုလျှင် အနှုတ်တန်ဖိုးကို အသုံးပြုပါသည်၊ (-1) မှ စတင်ပါသည်)
   * - ဥပမာများ
     - * ``$x_at(1)`` → 5


.. end_$x_at_section

.. _expression_function_GeometryGroup_x_at:


x_at
....

ဤ function သည် ဂျီဩမေတြီ၏ x ကိုဩဒိနိတ်ကို ရယူပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - x_at(geometry, vertex)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
       * **vertex** - ဂျီဩမေတြီ၏ မျဉ်းဆစ် အညွှန်းကိန်း (အညွှန်းကိန်းမှာ (0)မှစတင်ပြီး ၊ နောက်ဆုံးအညွှန်းကိန်းမှဆိုလျှင် အနှုတ်တန်ဖိုးကို အသုံးပြုပါသည်၊ (-1) မှ စတင်ပါသည်)
   * - ဥပမာများ
     - * ``x_at( geom_from_wkt( 'POINT(4 5)' ), 0 )`` → 4


.. end_x_at_section

.. _expression_function_GeometryGroup_x_max:


x_max
.....

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အကြီးဆုံး x ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် အဆိုပါ ဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်း ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - x_max(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``x_max( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') )`` → 4


.. end_x_max_section

.. _expression_function_GeometryGroup_x_min:


x_min
.....

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အငယ်ဆုံး x ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် အဆိုပါ ဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်း ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - x_min(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``x_min( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') )`` → 2


.. end_x_min_section

.. _expression_function_GeometryGroup_$y:


$y
..

ဤ function သည် လက်ရှိအသုံးပြုနေသော point feature ၏ y ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ point များစွာပါသော feature တစ်ခု ဖြစ်နေလျှင် ပထမဆုံး point ၏ y ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။ **WARNING(သတိပေးချက်)- ဤ function သည် အပြစ်အနာဆာပါရှိနေပါသည်။ @geometry variable အစား y() function ဖြင့် အစားထိုးအသုံးပြုရန် အကြံပြုပါသည်။**


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $y
   * - ဥပမာများ
     - * ``$y`` → 42


.. end_$y_section

.. _expression_function_GeometryGroup_y:


y
.

ဤ function သည် point ဂျီဩမေတြီတစ်ခု၏ y ကိုဩဒိနိတ် သို့မဟုတ် point မဟုတ်သော ဂျီဩမေတြီတစ်ခုအတွက် အလယ်ဗဟို (centroid) ၏ y ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - y(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``y( geom_from_wkt( 'POINT(2 5)' ) )`` → 5
       * ``y( @geometry )`` → လက်ရှိ feature ၏ အလယ်ဗဟိုရှိ y ကိုဩဒိနိတ်



.. end_y_section

.. _expression_function_GeometryGroup_$y_at:


$y_at
.....

ဤ function သည် လက်ရှိအသုံးပြုနေသော feature ဂျီဩမေတြီ၏ y ကိုဩဒိနိတ်ကို ရယူပေးပါသည်။ **WARNING(သတိပေးချက်) - ဤ function သည် အပြစ်အနာဆာပါရှိနေပါသည်။ @geometry variable အစား y_at function ဖြင့် အစားထိုးအသုံးပြုရန် အကြံပြုပါသည်။**

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $y_at(vertex)
   * - Argument များ
     - * **vertex** - လက်ရှိအသုံးပြုနေသော ဂျီဩမေတြီ၏ မျဉ်းဆစ် အညွှန်းကိန်း (အညွှန်းကိန်းမှာ (0)မှစတင်ပြီး ၊ နောက်ဆုံးအညွှန်းကိန်းမှဆိုလျှင် အနှုတ်တန်ဖိုးကို အသုံးပြုပါသည်၊ (-1) မှ စတင်ပါသည်)
   * - ဥပမာများ
     - * ``$y_at(1)`` → 2


.. end_$y_at_section


.. _expression_function_GeometryGroup_y_at:


y_at
....

ဤ function သည် ဂျီဩမေတြီ၏ y ကိုဩဒိနိတ်ကို ရယူပေးပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - y_at(geometry, vertex)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
       * **vertex** - ဂျီဩမေတြီ၏ မျဉ်းဆစ် အညွှန်းကိန်း (အညွှန်းကိန်းမှာ (0)မှစတင်ပြီး ၊ နောက်ဆုံးအညွှန်းကိန်းမှဆိုလျှင် အနှုတ်တန်ဖိုးကို အသုံးပြုပါသည်၊ (-1) မှ စတင်ပါသည်)
   * - ဥပမာများ
     - * ``y_at( geom_from_wkt( 'POINT(4 5)' ), 0 )`` → 5


.. end_y_at_section

.. _expression_function_GeometryGroup_y_max:


y_max
.....

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အကြီးဆုံး y ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် ဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်း ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - y_max(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``y_max( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') )`` → 8


.. end_y_max_section


.. _expression_function_GeometryGroup_y_min:


y_min
.....

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အငယ်ဆုံး y ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပါသည်။ တွက်ချက်မှုများသည် ဂျီဩမေတြီ၏ တည်နေရာရည်ညွှန်းစနစ် (SRS) အတိုင်း ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - y_min(geometry)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``y_min( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') )`` → 5


.. end_y_min_section

.. _expression_function_GeometryGroup_$z:


$z
..

ဤ function သည် လက်ရှိအသုံးပြုနေသော point feature သည် 3D ဖြစ်ပါက z တန်ဖိုးကို ပြန်ထုတ်ပေးပါသည်။ အကယ်၍ feature သည် multipoint feature ဖြစ်ပါက ပထမဆုံးအမှတ်၏ z တန်ဖိုးကို ပြန်ထုတ်ပေးမည်ဖြစ်သည်။ **WARNING(သတိပေးချက်)- ဤ functin သည် အပြစ်အနာအဆာပါနေပါသည်။ @geometry variable အစား z() function ဖြင့် အစားထိုးအသုံးပြုရန် အကြံပြုပါသည်။**

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - $z
   * - ဥပမာများ
     - * ``$z`` → 123


.. end_$z_section

.. _expression_function_GeometryGroup_z:


z
.

ဤ function သည် point ဂျီဩမေတြီတစ်ခု၏ z ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပြီး အကယ်၍ ဂျီဩမေတြီတွင် z တန်ဖိုးမရှိပါက NULL ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - z(geometry)
   * - Argument များ
     - * **geometry** - Point ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``z( geom_from_wkt( 'POINTZ(2 5 7)' ) )`` → 7


.. end_z_section

.. _expression_function_GeometryGroup_z_at:


z_at
.....

ဤ function သည် ဂျီဩမေတြီ၏ z ကိုဩဒိနိတ်ကို ရယူပေးပါသည်။ သို့မဟုတ် ဂျီဩမေတြီတွင် z တန်ဖိုး မပါရှိပါက NULL ကို ရရှိစေမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - z_at(geometry, vertex)
   * - Argument များ
     - * **geometry** - ဂျီဩမေတြီ
       * **vertex** - ဂျီဩမေတြီ၏ မျဉ်းဆစ် အညွှန်းကိန်း (အညွှန်းကိန်းမှာ (0)မှစတင်ပြီး ၊ နောက်ဆုံးအညွှန်းကိန်းမှဆိုလျှင် အနှုတ်တန်ဖိုးကို အသုံးပြုပါသည်၊ (-1) မှ စတင်ပါသည်)
   * - ဥပမာများ
     - * ``z_at(geom_from_wkt('LineStringZ(0 0 0, 10 10 5, 10 10 0)'), 1)`` → 5


.. end_z_at_section

.. _expression_function_GeometryGroup_z_max:


z_max
......

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အများဆုံး z ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပြီး အကယ်၍ ဂျီဩမေတြီတွင် z တန်ဖိုးမပါရှိလျှင် NULL ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။


.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - z_max(geometry)
   * - Argument များ
     - * **geometry** - z ကိုဩဒိနိတ်ပါသော ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``z_max( geom_from_wkt( 'POINT ( 0 0 1 )' ) )`` → 1
       * ``z_max( geom_from_wkt( 'MULTIPOINT ( 0 0 1 , 1 1 3 )' ) )`` → 3
       * ``z_max( make_line( make_point( 0,0,0 ), make_point( -1,-1,-2 ) ) )`` → 0
       * ``z_max( geom_from_wkt( 'LINESTRING( 0 0 0, 1 0 2, 1 1 -1 )' ) )`` → 2
       * ``z_max( geom_from_wkt( 'POINT ( 0 0 )' ) )`` → NULL


.. end_z_max_section


.. _expression_function_GeometryGroup_z_min:


z_min
......

ဤ function သည် ဂျီဩမေတြီတစ်ခု၏ အနည်းဆုံး z ကိုဩဒိနိတ်ကို ပြန်ထုတ်ပေးပြီး အကယ်၍ ဂျီဩမေတြီတွင် z တန်ဖိုးမပါရှိလျှင်  NULL ကို ပြန်ထုတ်ပေးမည်ဖြစ်ပါသည်။

.. list-table::
   :widths: 15 85

   * - Syntax (ဝါကျဖွဲ့ပုံ)
     - z_min(geometry)
   * - Argument များ
     - * **geometry** - z ကိုဩဒိနိတ်ပါသော ဂျီဩမေတြီတစ်ခု
   * - ဥပမာများ
     - * ``z_min( geom_from_wkt( 'POINT ( 0 0 1 )' ) )`` → 1
       * ``z_min( geom_from_wkt( 'MULTIPOINT ( 0 0 1 , 1 1 3 )' ) )`` → 1
       * ``z_min( make_line( make_point( 0,0,0 ), make_point( -1,-1,-2 ) ) )`` → -2
       * ``z_min( geom_from_wkt( 'LINESTRING( 0 0 0, 1 0 2, 1 1 -1 )' ) )`` → -1
       * ``z_min( geom_from_wkt( 'POINT ( 0 0 )' ) )`` → NULL


.. end_z_min_section